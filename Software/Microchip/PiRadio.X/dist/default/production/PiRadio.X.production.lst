

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Dec 12 10:41:15 2017

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F44K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F44K22 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  000DDE                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _I2C2_slaveWriteData
    93  000DDE  55                 	db	85
    94                           
    95                           	psect	idataBANK0
    96  000A22                     __pidataBANK0:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _led_pattern_tbl
   100  000A22  00                 	db	0
   101  000A23  00                 	db	0
   102  000A24  00                 	db	0
   103  000A25  00                 	db	0
   104  000A26  00                 	db	0
   105  000A27  00                 	db	0
   106  000A28  00                 	db	0
   107  000A29  00                 	db	0
   108  000A2A  00                 	db	0
   109  000A2B  00                 	db	0
   110  000A2C  00                 	db	0
   111  000A2D  00                 	db	0
   112  000A2E  00                 	db	0
   113  000A2F  00                 	db	0
   114  000A30  00                 	db	0
   115  000A31  00                 	db	0
   116  000A32  00                 	db	0
   117  000A33  00                 	db	0
   118  000A34  00                 	db	0
   119  000A35  00                 	db	0
   120  000A36  00                 	db	0
   121  000A37  00                 	db	0
   122  000A38  00                 	db	0
   123  000A39  00                 	db	0
   124  000A3A  00                 	db	0
   125  000A3B  00                 	db	0
   126  000A3C  00                 	db	0
   127  000A3D  00                 	db	0
   128  000A3E  00                 	db	0
   129  000A3F  00                 	db	0
   130  000A40  00                 	db	0
   131  000A41  01                 	db	1
   132  000A42  00                 	db	0
   133  000A43  00                 	db	0
   134  000A44  01                 	db	1
   135  000A45  01                 	db	1
   136  000A46  00                 	db	0
   137  000A47  00                 	db	0
   138  000A48  01                 	db	1
   139  000A49  01                 	db	1
   140  000A4A  00                 	db	0
   141  000A4B  00                 	db	0
   142  000A4C  01                 	db	1
   143  000A4D  01                 	db	1
   144  000A4E  00                 	db	0
   145  000A4F  00                 	db	0
   146  000A50  01                 	db	1
   147  000A51  01                 	db	1
   148  000A52  00                 	db	0
   149  000A53  00                 	db	0
   150  000A54  00                 	db	0
   151  000A55  00                 	db	0
   152  000A56  00                 	db	0
   153  000A57  00                 	db	0
   154  000A58  00                 	db	0
   155  000A59  00                 	db	0
   156  000A5A  01                 	db	1
   157  000A5B  01                 	db	1
   158  000A5C  01                 	db	1
   159  000A5D  01                 	db	1
   160  000A5E  01                 	db	1
   161  000A5F  01                 	db	1
   162  000A60  01                 	db	1
   163  000A61  01                 	db	1
   164  000A62  00                 	db	0
   165  000A63  00                 	db	0
   166  000A64  00                 	db	0
   167  000A65  01                 	db	1
   168  000A66  01                 	db	1
   169  000A67  01                 	db	1
   170  000A68  01                 	db	1
   171  000A69  01                 	db	1
   172  000A6A  00                 	db	0
   173  000A6B  00                 	db	0
   174  000A6C  00                 	db	0
   175  000A6D  01                 	db	1
   176  000A6E  01                 	db	1
   177  000A6F  01                 	db	1
   178  000A70  01                 	db	1
   179  000A71  01                 	db	1
   180  000A72  01                 	db	1
   181  000A73  01                 	db	1
   182  000A74  01                 	db	1
   183  000A75  01                 	db	1
   184  000A76  01                 	db	1
   185  000A77  01                 	db	1
   186  000A78  01                 	db	1
   187  000A79  01                 	db	1
   188  000A7A  01                 	db	1
   189  000A7B  01                 	db	1
   190  000A7C  01                 	db	1
   191  000A7D  01                 	db	1
   192  000A7E  01                 	db	1
   193  000A7F  01                 	db	1
   194  000A80  01                 	db	1
   195  000A81  01                 	db	1
   196                           
   197                           ;initializer for _prev_color
   198  000A82  0001               	dw	1
   199  000A84  0000               	dw	0
   200                           
   201                           	psect	mediumconst
   202  003EEC                     __pmediumconst:
   203                           	opt stack 0
   204  003EEC  00                 	db	0
   205  003EED                     _dpowers:
   206                           	opt stack 0
   207  003EED  0001               	dw	1
   208  003EEF  0000               	dw	0
   209  003EF1  000A               	dw	10
   210  003EF3  0000               	dw	0
   211  003EF5  0064               	dw	100
   212  003EF7  0000               	dw	0
   213  003EF9  03E8               	dw	1000
   214  003EFB  0000               	dw	0
   215  003EFD  2710               	dw	10000
   216  003EFF  0000               	dw	0
   217  003F01  86A0               	dw	34464
   218  003F03  0001               	dw	1
   219  003F05  4240               	dw	16960
   220  003F07  000F               	dw	15
   221  003F09  9680               	dw	38528
   222  003F0B  0098               	dw	152
   223  003F0D  E100               	dw	57600
   224  003F0F  05F5               	dw	1525
   225  003F11  CA00               	dw	51712
   226  003F13  3B9A               	dw	15258
   227  003F15                     __end_of_dpowers:
   228                           	opt stack 0
   229  003F15                     _hexpowers:
   230                           	opt stack 0
   231  003F15  0001               	dw	1
   232  003F17  0000               	dw	0
   233  003F19  0010               	dw	16
   234  003F1B  0000               	dw	0
   235  003F1D  0100               	dw	256
   236  003F1F  0000               	dw	0
   237  003F21  1000               	dw	4096
   238  003F23  0000               	dw	0
   239  003F25  0000               	dw	0
   240  003F27  0001               	dw	1
   241  003F29  0000               	dw	0
   242  003F2B  0010               	dw	16
   243  003F2D  0000               	dw	0
   244  003F2F  0100               	dw	256
   245  003F31  0000               	dw	0
   246  003F33  1000               	dw	4096
   247  003F35                     __end_of_hexpowers:
   248                           	opt stack 0
   249  003F35                     STR_14:
   250  003F35  30                 	db	48	;'0'
   251  003F36  31                 	db	49	;'1'
   252  003F37  32                 	db	50	;'2'
   253  003F38  33                 	db	51	;'3'
   254  003F39  34                 	db	52	;'4'
   255  003F3A  35                 	db	53	;'5'
   256  003F3B  36                 	db	54	;'6'
   257  003F3C  37                 	db	55	;'7'
   258  003F3D  38                 	db	56	;'8'
   259  003F3E  39                 	db	57	;'9'
   260  003F3F  41                 	db	65	;'A'
   261  003F40  42                 	db	66	;'B'
   262  003F41  43                 	db	67	;'C'
   263  003F42  44                 	db	68	;'D'
   264  003F43  45                 	db	69	;'E'
   265  003F44  46                 	db	70	;'F'
   266  003F45  00                 	db	0
   267  003F46                     STR_12:
   268  003F46  0A                 	db	10
   269  003F47  0A                 	db	10
   270  003F48  0D                 	db	13
   271  003F49  50                 	db	80	;'P'
   272  003F4A  69                 	db	105	;'i'
   273  003F4B  33                 	db	51	;'3'
   274  003F4C  56                 	db	86	;'V'
   275  003F4D  20                 	db	32
   276  003F4E  20                 	db	32
   277  003F4F  20                 	db	32
   278  003F50  20                 	db	32
   279  003F51  25                 	db	37
   280  003F52  75                 	db	117	;'u'
   281  003F53  20                 	db	32
   282  003F54  6D                 	db	109	;'m'
   283  003F55  56                 	db	86	;'V'
   284  003F56  00                 	db	0
   285  003F57                     STR_1:
   286  003F57  0A                 	db	10
   287  003F58  0A                 	db	10
   288  003F59  0D                 	db	13
   289  003F5A  4C                 	db	76	;'L'
   290  003F5B  45                 	db	69	;'E'
   291  003F5C  44                 	db	68	;'D'
   292  003F5D  20                 	db	32
   293  003F5E  20                 	db	32
   294  003F5F  20                 	db	32
   295  003F60  30                 	db	48	;'0'
   296  003F61  78                 	db	120	;'x'
   297  003F62  25                 	db	37
   298  003F63  30                 	db	48	;'0'
   299  003F64  38                 	db	56	;'8'
   300  003F65  6C                 	db	108	;'l'
   301  003F66  58                 	db	88	;'X'
   302  003F67  00                 	db	0
   303  003F68                     STR_13:
   304  003F68  0A                 	db	10
   305  003F69  0D                 	db	13
   306  003F6A  50                 	db	80	;'P'
   307  003F6B  69                 	db	105	;'i'
   308  003F6C  35                 	db	53	;'5'
   309  003F6D  56                 	db	86	;'V'
   310  003F6E  20                 	db	32
   311  003F6F  20                 	db	32
   312  003F70  20                 	db	32
   313  003F71  20                 	db	32
   314  003F72  25                 	db	37
   315  003F73  75                 	db	117	;'u'
   316  003F74  20                 	db	32
   317  003F75  6D                 	db	109	;'m'
   318  003F76  56                 	db	86	;'V'
   319  003F77  00                 	db	0
   320  003F78                     STR_3:
   321  003F78  0A                 	db	10
   322  003F79  0D                 	db	13
   323  003F7A  43                 	db	67	;'C'
   324  003F7B  54                 	db	84	;'T'
   325  003F7C  52                 	db	82	;'R'
   326  003F7D  4C                 	db	76	;'L'
   327  003F7E  20                 	db	32
   328  003F7F  20                 	db	32
   329  003F80  30                 	db	48	;'0'
   330  003F81  78                 	db	120	;'x'
   331  003F82  25                 	db	37
   332  003F83  30                 	db	48	;'0'
   333  003F84  32                 	db	50	;'2'
   334  003F85  58                 	db	88	;'X'
   335  003F86  00                 	db	0
   336  003F87                     STR_2:
   337  003F87  0A                 	db	10
   338  003F88  0D                 	db	13
   339  003F89  53                 	db	83	;'S'
   340  003F8A  54                 	db	84	;'T'
   341  003F8B  41                 	db	65	;'A'
   342  003F8C  54                 	db	84	;'T'
   343  003F8D  20                 	db	32
   344  003F8E  20                 	db	32
   345  003F8F  30                 	db	48	;'0'
   346  003F90  78                 	db	120	;'x'
   347  003F91  25                 	db	37
   348  003F92  30                 	db	48	;'0'
   349  003F93  32                 	db	50	;'2'
   350  003F94  58                 	db	88	;'X'
   351  003F95  00                 	db	0
   352  003F96                     STR_10:
   353  003F96  0A                 	db	10
   354  003F97  0D                 	db	13
   355  003F98  42                 	db	66	;'B'
   356  003F99  41                 	db	65	;'A'
   357  003F9A  4E                 	db	78	;'N'
   358  003F9B  44                 	db	68	;'D'
   359  003F9C  20                 	db	32
   360  003F9D  20                 	db	32
   361  003F9E  20                 	db	32
   362  003F9F  20                 	db	32
   363  003FA0  25                 	db	37
   364  003FA1  75                 	db	117	;'u'
   365  003FA2  00                 	db	0
   366  003FA3                     STR_9:
   367  003FA3  0A                 	db	10
   368  003FA4  0D                 	db	13
   369  003FA5  54                 	db	84	;'T'
   370  003FA6  55                 	db	85	;'U'
   371  003FA7  4E                 	db	78	;'N'
   372  003FA8  45                 	db	69	;'E'
   373  003FA9  20                 	db	32
   374  003FAA  20                 	db	32
   375  003FAB  20                 	db	32
   376  003FAC  20                 	db	32
   377  003FAD  25                 	db	37
   378  003FAE  75                 	db	117	;'u'
   379  003FAF  00                 	db	0
   380  003FB0                     STR_6:
   381  003FB0  0A                 	db	10
   382  003FB1  0D                 	db	13
   383  003FB2  53                 	db	83	;'S'
   384  003FB3  54                 	db	84	;'T'
   385  003FB4  41                 	db	65	;'A'
   386  003FB5  54                 	db	84	;'T'
   387  003FB6  45                 	db	69	;'E'
   388  003FB7  20                 	db	32
   389  003FB8  20                 	db	32
   390  003FB9  20                 	db	32
   391  003FBA  25                 	db	37
   392  003FBB  75                 	db	117	;'u'
   393  003FBC  00                 	db	0
   394  003FBD                     STR_7:
   395  003FBD  0A                 	db	10
   396  003FBE  0D                 	db	13
   397  003FBF  41                 	db	65	;'A'
   398  003FC0  43                 	db	67	;'C'
   399  003FC1  5F                 	db	95	;'_'
   400  003FC2  4F                 	db	79	;'O'
   401  003FC3  4E                 	db	78	;'N'
   402  003FC4  20                 	db	32
   403  003FC5  20                 	db	32
   404  003FC6  20                 	db	32
   405  003FC7  25                 	db	37
   406  003FC8  75                 	db	117	;'u'
   407  003FC9  00                 	db	0
   408  003FCA                     STR_11:
   409  003FCA  0A                 	db	10
   410  003FCB  0D                 	db	13
   411  003FCC  56                 	db	86	;'V'
   412  003FCD  4F                 	db	79	;'O'
   413  003FCE  4C                 	db	76	;'L'
   414  003FCF  55                 	db	85	;'U'
   415  003FD0  4D                 	db	77	;'M'
   416  003FD1  45                 	db	69	;'E'
   417  003FD2  20                 	db	32
   418  003FD3  20                 	db	32
   419  003FD4  25                 	db	37
   420  003FD5  75                 	db	117	;'u'
   421  003FD6  00                 	db	0
   422  003FD7                     STR_8:
   423  003FD7  0A                 	db	10
   424  003FD8  0D                 	db	13
   425  003FD9  50                 	db	80	;'P'
   426  003FDA  49                 	db	73	;'I'
   427  003FDB  5F                 	db	95	;'_'
   428  003FDC  52                 	db	82	;'R'
   429  003FDD  55                 	db	85	;'U'
   430  003FDE  4E                 	db	78	;'N'
   431  003FDF  20                 	db	32
   432  003FE0  20                 	db	32
   433  003FE1  25                 	db	37
   434  003FE2  75                 	db	117	;'u'
   435  003FE3  00                 	db	0
   436  003FE4                     STR_5:
   437  003FE4  0A                 	db	10
   438  003FE5  0D                 	db	13
   439  003FE6  53                 	db	83	;'S'
   440  003FE7  50                 	db	80	;'P'
   441  003FE8  5F                 	db	95	;'_'
   442  003FE9  43                 	db	67	;'C'
   443  003FEA  4E                 	db	78	;'N'
   444  003FEB  54                 	db	84	;'T'
   445  003FEC  20                 	db	32
   446  003FED  20                 	db	32
   447  003FEE  25                 	db	37
   448  003FEF  75                 	db	117	;'u'
   449  003FF0  00                 	db	0
   450  003FF1                     STR_4:
   451  003FF1  0A                 	db	10
   452  003FF2  0D                 	db	13
   453  003FF3  53                 	db	83	;'S'
   454  003FF4  54                 	db	84	;'T'
   455  003FF5  5F                 	db	95	;'_'
   456  003FF6  43                 	db	67	;'C'
   457  003FF7  4E                 	db	78	;'N'
   458  003FF8  54                 	db	84	;'T'
   459  003FF9  20                 	db	32
   460  003FFA  20                 	db	32
   461  003FFB  25                 	db	37
   462  003FFC  75                 	db	117	;'u'
   463  003FFD  00                 	db	0
   464                           
   465                           ; #config settings
   466  003FFE  00                 	db	0	; dummy byte at the end
   467  0000                     
   468                           	psect	nvCOMRAM
   469  000044                     __pnvCOMRAM:
   470                           	opt stack 0
   471  000044                     _timer5ReloadVal:
   472                           	opt stack 0
   473  000044                     	ds	2
   474  000046                     _timer0ReloadVal:
   475                           	opt stack 0
   476  000046                     	ds	1
   477  0000                     _TMR5	set	3919
   478  0000                     _T5GCONbits	set	3917
   479  0000                     _T5CONbits	set	3918
   480  0000                     _TMR5L	set	3919
   481  0000                     _TMR5H	set	3920
   482  0000                     _T5GCON	set	3917
   483  0000                     _T5CON	set	3918
   484  0000                     _ANSELA	set	3896
   485  0000                     _ANSELE	set	3900
   486  0000                     _ANSELD	set	3899
   487  0000                     _ANSELB	set	3897
   488  0000                     _ANSELC	set	3898
   489  0000                     _LATDbits	set	3980
   490  0000                     _PORTCbits	set	3970
   491  0000                     _LATCbits	set	3979
   492  0000                     _PORTDbits	set	3971
   493  0000                     _RCONbits	set	4048
   494  0000                     _TXREG1	set	4013
   495  0000                     _RCREG1	set	4014
   496  0000                     _RCSTA1bits	set	4011
   497  0000                     _PIR1bits	set	3998
   498  0000                     _SPBRGH1	set	4016
   499  0000                     _SPBRG1	set	4015
   500  0000                     _TXSTA1	set	4012
   501  0000                     _RCSTA1	set	4011
   502  0000                     _BAUDCON1	set	4024
   503  0000                     _SSP2CON1bits	set	3948
   504  0000                     _SSP2CON2bits	set	3947
   505  0000                     _SSP2STATbits	set	3949
   506  0000                     _SSP2BUF	set	3951
   507  0000                     _PIE3bits	set	4003
   508  0000                     _PIR3bits	set	4004
   509  0000                     _SSP2ADD	set	3950
   510  0000                     _SSP2MSK	set	3946
   511  0000                     _SSP2CON3	set	3945
   512  0000                     _SSP2CON2	set	3947
   513  0000                     _SSP2CON1	set	3948
   514  0000                     _SSP2STAT	set	3949
   515  0000                     _PIR5bits	set	3966
   516  0000                     _T0CONbits	set	4053
   517  0000                     _INTCONbits	set	4082
   518  0000                     _TMR0L	set	4054
   519  0000                     _TMR0H	set	4055
   520  0000                     _T0CON	set	4053
   521  0000                     _INTCON2bits	set	4081
   522  0000                     _WPUB	set	3937
   523  0000                     _TRISD	set	3989
   524  0000                     _TRISC	set	3988
   525  0000                     _TRISB	set	3987
   526  0000                     _TRISA	set	3986
   527  0000                     _TRISE	set	3990
   528  0000                     _LATC	set	3979
   529  0000                     _LATB	set	3978
   530  0000                     _LATA	set	3977
   531  0000                     _LATD	set	3980
   532  0000                     _LATE	set	3981
   533  0000                     _OSCTUNE	set	3995
   534  0000                     _OSCCON2	set	4050
   535  0000                     _OSCCON	set	4051
   536  0000                     _ADCON0bits	set	4034
   537  0000                     _ADRESH	set	4036
   538  0000                     _ADRESL	set	4035
   539  0000                     _ADCON2	set	4032
   540  0000                     _ADCON1	set	4033
   541  0000                     _ADCON0	set	4034
   542                           
   543                           	psect	cinit
   544  000B8E                     __pcinit:
   545                           	opt stack 0
   546  000B8E                     start_initialization:
   547                           	opt stack 0
   548  000B8E                     __initialization:
   549                           	opt stack 0
   550                           
   551                           ; Initialize objects allocated to BANK0 (100 bytes)
   552                           ; load TBLPTR registers with __pidataBANK0
   553  000B8E  0E22               	movlw	low __pidataBANK0
   554  000B90  6EF6               	movwf	tblptrl,c
   555  000B92  0E0A               	movlw	high __pidataBANK0
   556  000B94  6EF7               	movwf	tblptrh,c
   557  000B96  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   558  000B98  6EF8               	movwf	tblptru,c
   559  000B9A  EE00  F060         	lfsr	0,__pdataBANK0
   560  000B9E  EE10 F064          	lfsr	1,100
   561  000BA2                     copy_data0:
   562  000BA2  0009               	tblrd		*+
   563  000BA4  CFF5 FFEE          	movff	tablat,postinc0
   564  000BA8  50E5               	movf	postdec1,w,c
   565  000BAA  50E1               	movf	fsr1l,w,c
   566  000BAC  E1FA               	bnz	copy_data0
   567                           
   568                           ; Initialize objects allocated to COMRAM (1 bytes)
   569                           ; load TBLPTR registers with __pidataCOMRAM
   570  000BAE  0EDE               	movlw	low __pidataCOMRAM
   571  000BB0  6EF6               	movwf	tblptrl,c
   572  000BB2  0E0D               	movlw	high __pidataCOMRAM
   573  000BB4  6EF7               	movwf	tblptrh,c
   574  000BB6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   575  000BB8  6EF8               	movwf	tblptru,c
   576  000BBA  0009               	tblrd		*+	;fetch initializer
   577  000BBC  CFF5 F049          	movff	tablat,__pdataCOMRAM
   578                           
   579                           ; Clear objects allocated to BANK0 (21 bytes)
   580  000BC0  EE00  F0C4         	lfsr	0,__pbssBANK0
   581  000BC4  0E15               	movlw	21
   582  000BC6                     clear_0:
   583  000BC6  6AEE               	clrf	postinc0,c
   584  000BC8  06E8               	decf	wreg,f,c
   585  000BCA  E1FD               	bnz	clear_0
   586                           
   587                           ; Clear objects allocated to COMRAM (2 bytes)
   588  000BCC  6A48               	clrf	(__pbssCOMRAM+1)& (0+255),c
   589  000BCE  6A47               	clrf	__pbssCOMRAM& (0+255),c
   590  000BD0                     end_of_initialization:
   591                           	opt stack 0
   592  000BD0                     __end_of__initialization:
   593                           	opt stack 0
   594  000BD0  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   595  000BD2  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   596  000BD4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   597  000BD6  6EF8               	movwf	tblptru,c
   598  000BD8  0100               	movlb	0
   599  000BDA  EF57  F000         	goto	_main	;jump to C main() function
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssCOMRAM
   610  000047                     __pbssCOMRAM:
   611                           	opt stack 0
   612  000047                     I2C2_StatusCallback@slaveWriteType:
   613                           	opt stack 0
   614  000047                     	ds	1
   615  000048                     I2C2_StatusCallback@RegAddress:
   616                           	opt stack 0
   617  000048                     	ds	1
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           postdec1	equ	0xFE5
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	dataCOMRAM
   628  000049                     __pdataCOMRAM:
   629                           	opt stack 0
   630  000049                     _I2C2_slaveWriteData:
   631                           	opt stack 0
   632  000049                     	ds	1
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1l	equ	0xFE1
   641                           
   642                           	psect	bssBANK0
   643  0000C4                     __pbssBANK0:
   644                           	opt stack 0
   645  0000C4                     _pi_power:
   646                           	opt stack 0
   647  0000C4                     	ds	8
   648  0000CC                     _led_color:
   649                           	opt stack 0
   650  0000CC                     	ds	4
   651  0000D0                     _meas_vol:
   652                           	opt stack 0
   653  0000D0                     	ds	2
   654  0000D2                     _meas_band:
   655                           	opt stack 0
   656  0000D2                     	ds	2
   657  0000D4                     _meas_tune:
   658                           	opt stack 0
   659  0000D4                     	ds	2
   660  0000D6                     _led_pattern_idx:
   661                           	opt stack 0
   662  0000D6                     	ds	1
   663  0000D7                     _reg_control:
   664                           	opt stack 0
   665  0000D7                     	ds	1
   666  0000D8                     _reg_status:
   667                           	opt stack 0
   668  0000D8                     	ds	1
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	dataBANK0
   679  000060                     __pdataBANK0:
   680                           	opt stack 0
   681  000060                     _led_pattern_tbl:
   682                           	opt stack 0
   683  000060                     	ds	96
   684  0000C0                     _prev_color:
   685                           	opt stack 0
   686  0000C0                     	ds	4
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           postdec1	equ	0xFE5
   694                           fsr1l	equ	0xFE1
   695                           
   696                           	psect	cstackBANK0
   697  0000D9                     __pcstackBANK0:
   698                           	opt stack 0
   699  0000D9                     main@pi3v:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x0
   703  0000D9                     	ds	2
   704  0000DB                     main@pi5v:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x2
   708  0000DB                     	ds	2
   709  0000DD                     main@meas_pi5v:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x4
   713  0000DD                     	ds	2
   714  0000DF                     main@meas_pi3v:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x6
   718  0000DF                     	ds	2
   719                           tblptru	equ	0xFF8
   720                           tblptrh	equ	0xFF7
   721                           tblptrl	equ	0xFF6
   722                           tablat	equ	0xFF5
   723                           postinc0	equ	0xFEE
   724                           wreg	equ	0xFE8
   725                           postdec1	equ	0xFE5
   726                           fsr1l	equ	0xFE1
   727                           
   728                           	psect	cstackCOMRAM
   729  000001                     __pcstackCOMRAM:
   730                           	opt stack 0
   731  000001                     I2C2_StatusCallback@i2c_bus_state:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x0
   735  000001                     	ds	1
   736  000002                     I2C2_ISR@i2c_data:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x1
   740  000002                     	ds	1
   741  000003                     ??_INTERRUPT_InterruptManager:
   742                           
   743                           ; 1 bytes @ 0x2
   744  000003                     	ds	18
   745  000015                     ??_update_status_reg:
   746  000015                     ??_isdigit:
   747  000015                     ?_ADC_GetConversion:
   748                           	opt stack 0
   749  000015                     ?___wmul:
   750                           	opt stack 0
   751  000015                     ?___lmul:
   752                           	opt stack 0
   753  000015                     ?___lldiv:
   754                           	opt stack 0
   755  000015                     EUSART1_Write@txData:
   756                           	opt stack 0
   757  000015                     ___wmul@multiplier:
   758                           	opt stack 0
   759  000015                     ws2812_send@led:
   760                           	opt stack 0
   761  000015                     ___lmul@multiplier:
   762                           	opt stack 0
   763  000015                     ___lldiv@dividend:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x14
   767  000015                     	ds	1
   768  000016                     putch@txData:
   769                           	opt stack 0
   770  000016                     _isdigit$1995:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x15
   774  000016                     	ds	1
   775  000017                     ??_ADC_GetConversion:
   776  000017                     isdigit@c:
   777                           	opt stack 0
   778  000017                     ___wmul@multiplicand:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x16
   782  000017                     	ds	2
   783  000019                     ??_ws2812_send:
   784  000019                     ADC_GetConversion@channel:
   785                           	opt stack 0
   786  000019                     ___wmul@product:
   787                           	opt stack 0
   788  000019                     ___lmul@multiplicand:
   789                           	opt stack 0
   790  000019                     ___lldiv@divisor:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x18
   794  000019                     	ds	4
   795  00001D                     ws2812_send@j:
   796                           	opt stack 0
   797  00001D                     ___lmul@product:
   798                           	opt stack 0
   799  00001D                     ___lldiv@quotient:
   800                           	opt stack 0
   801                           
   802                           ; 4 bytes @ 0x1C
   803  00001D                     	ds	4
   804  000021                     ___lldiv@counter:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x20
   808  000021                     	ds	1
   809  000022                     ?___llmod:
   810                           	opt stack 0
   811  000022                     ___llmod@dividend:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x21
   815  000022                     	ds	4
   816  000026                     ___llmod@divisor:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x25
   820  000026                     	ds	4
   821  00002A                     ___llmod@counter:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x29
   825  00002A                     	ds	1
   826  00002B                     ?_printf:
   827                           	opt stack 0
   828  00002B                     printf@f:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x2A
   832  00002B                     	ds	6
   833  000031                     ??_printf:
   834                           
   835                           ; 1 bytes @ 0x30
   836  000031                     	ds	4
   837  000035                     printf@idx:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x34
   841  000035                     	ds	1
   842  000036                     printf@ap:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x35
   846  000036                     	ds	2
   847  000038                     printf@prec:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x37
   851  000038                     	ds	2
   852  00003A                     printf@val:
   853                           	opt stack 0
   854                           
   855                           ; 4 bytes @ 0x39
   856  00003A                     	ds	4
   857  00003E                     printf@flag:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x3D
   861  00003E                     	ds	1
   862  00003F                     printf@width:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x3E
   866  00003F                     	ds	2
   867  000041                     printf@c:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x40
   871  000041                     	ds	1
   872  000042                     ??_main:
   873                           
   874                           ; 1 bytes @ 0x41
   875  000042                     	ds	2
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           postdec1	equ	0xFE5
   883                           fsr1l	equ	0xFE1
   884                           
   885 ;;
   886 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   887 ;;
   888 ;; *************** function _main *****************
   889 ;; Defined at:
   890 ;;		line 76 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  meas_pi3v       2    6[BANK0 ] unsigned int 
   895 ;;  meas_pi5v       2    4[BANK0 ] unsigned int 
   896 ;;  pi5v            2    2[BANK0 ] unsigned int 
   897 ;;  pi3v            2    0[BANK0 ] unsigned int 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   907 ;;      Params:         0       0       0       0
   908 ;;      Locals:         0       8       0       0
   909 ;;      Temps:          2       0       0       0
   910 ;;      Totals:         2       8       0       0
   911 ;;Total ram usage:       10 bytes
   912 ;; Hardware stack levels required when called:    6
   913 ;; This function calls:
   914 ;;		_ADC_GetConversion
   915 ;;		_ADC_Initialize
   916 ;;		_OSCILLATOR_FastClock
   917 ;;		_OSCILLATOR_Initialize
   918 ;;		_PIN_MANAGER_Initialize
   919 ;;		_SYSTEM_Initialize
   920 ;;		_TMR0_HasOverflowOccured
   921 ;;		_TMR0_Initialize
   922 ;;		_TMR5_HasOverflowOccured
   923 ;;		_TMR5_Initialize
   924 ;;		___lmul
   925 ;;		_pi_supply_off
   926 ;;		_pi_supply_on
   927 ;;		_printf
   928 ;;		_request_pi_run
   929 ;;		_request_pi_stop
   930 ;;		_update_status_reg
   931 ;;		_ws2812_send
   932 ;; This function is called by:
   933 ;;		Startup code after reset
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text0
   938  0000AE                     __ptext0:
   939                           	opt stack 0
   940  0000AE                     _main:
   941                           	opt stack 25
   942                           
   943                           ;main.c: 78: uint16_t meas_pi5v = 0;
   944                           
   945                           ;incstack = 0
   946  0000AE  0E00               	movlw	0
   947  0000B0  0100               	movlb	0	; () banked
   948  0000B2  6FDE               	movwf	(main@meas_pi5v+1)& (0+255),b
   949  0000B4  0E00               	movlw	0
   950  0000B6  6FDD               	movwf	main@meas_pi5v& (0+255),b
   951                           
   952                           ;main.c: 79: uint16_t meas_pi3v = 0;
   953  0000B8  0E00               	movlw	0
   954  0000BA  6FE0               	movwf	(main@meas_pi3v+1)& (0+255),b
   955  0000BC  0E00               	movlw	0
   956  0000BE  6FDF               	movwf	main@meas_pi3v& (0+255),b
   957                           
   958                           ; BSR set to: 0
   959                           ;main.c: 80: uint16_t pi3v;
   960                           ;main.c: 81: uint16_t pi5v;
   961                           ;main.c: 84: SYSTEM_Initialize();
   962  0000C0  EC59  F006         	call	_SYSTEM_Initialize	;wreg free
   963                           
   964                           ;main.c: 87: pi_power.state = RESET;
   965  0000C4  0E00               	movlw	0
   966  0000C6  0100               	movlb	0	; () banked
   967  0000C8  6FC4               	movwf	_pi_power& (0+255),b
   968                           
   969                           ; BSR set to: 0
   970                           ;main.c: 90: led_pattern_idx = 0;
   971  0000CA  0E00               	movlw	0
   972  0000CC  6FD6               	movwf	_led_pattern_idx& (0+255),b
   973  0000CE                     
   974                           ;main.c: 94: {
   975                           ;main.c: 96: OSCILLATOR_Initialize();
   976                           
   977                           ; BSR set to: 0
   978  0000CE  ECBB  F006         	call	_OSCILLATOR_Initialize	;wreg free
   979                           
   980                           ;main.c: 99: TMR5_Initialize();
   981  0000D2  EC6A  F006         	call	_TMR5_Initialize	;wreg free
   982                           
   983                           ;main.c: 106: TMR0_Initialize();
   984  0000D6  EC99  F006         	call	_TMR0_Initialize	;wreg free
   985                           
   986                           ;main.c: 109: pi_power.count += 1;
   987  0000DA  0100               	movlb	0	; () banked
   988  0000DC  4BC6               	infsnz	(_pi_power+2)& (0+255),f,b
   989  0000DE  2BC7               	incf	(_pi_power+3)& (0+255),f,b
   990                           
   991                           ; BSR set to: 0
   992                           ;main.c: 110: if (pi_power.count == 0)
   993  0000E0  51C6               	movf	(_pi_power+2)& (0+255),w,b
   994  0000E2  11C7               	iorwf	(_pi_power+3)& (0+255),w,b
   995  0000E4  A4D8               	btfss	status,2,c
   996  0000E6  D003               	goto	l362
   997                           
   998                           ; BSR set to: 0
   999                           ;main.c: 111: pi_power.count -= 1;
  1000  0000E8  07C6               	decf	(_pi_power+2)& (0+255),f,b
  1001  0000EA  A0D8               	btfss	status,0,c
  1002  0000EC  07C7               	decf	(_pi_power+3)& (0+255),f,b
  1003  0000EE                     l362:
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;main.c: 114: pi_power.running = (PORTDbits.RD3 == 0);
  1007                           
  1008                           ; BSR set to: 0
  1009  0000EE  B683               	btfsc	3971,3,c	;volatile
  1010  0000F0  D002               	goto	u1390
  1011  0000F2  0E01               	movlw	1
  1012  0000F4  D001               	goto	u1400
  1013  0000F6                     u1390:
  1014  0000F6  0E00               	movlw	0
  1015  0000F8                     u1400:
  1016  0000F8  6FCA               	movwf	(_pi_power+6)& (0+255),b
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;main.c: 117: if (pi_power.running == (0))
  1020  0000FA  51CA               	movf	(_pi_power+6)& (0+255),w,b
  1021  0000FC  A4D8               	btfss	status,2,c
  1022  0000FE  D00A               	goto	l363
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;main.c: 118: {
  1026                           ;main.c: 119: pi_power.stopped_count += 1;
  1027  000100  4BC8               	infsnz	(_pi_power+4)& (0+255),f,b
  1028  000102  2BC9               	incf	(_pi_power+5)& (0+255),f,b
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;main.c: 120: if (pi_power.stopped_count == 0)
  1032  000104  51C8               	movf	(_pi_power+4)& (0+255),w,b
  1033  000106  11C9               	iorwf	(_pi_power+5)& (0+255),w,b
  1034  000108  A4D8               	btfss	status,2,c
  1035  00010A  D008               	goto	l365
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;main.c: 121: pi_power.stopped_count -= 1;
  1039  00010C  07C8               	decf	(_pi_power+4)& (0+255),f,b
  1040  00010E  A0D8               	btfss	status,0,c
  1041  000110  07C9               	decf	(_pi_power+5)& (0+255),f,b
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;main.c: 122: }
  1045  000112  D004               	goto	l365
  1046  000114                     l363:
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;main.c: 123: else
  1050                           ;main.c: 124: pi_power.stopped_count = 0;
  1051                           
  1052                           ; BSR set to: 0
  1053  000114  0E00               	movlw	0
  1054  000116  6FC9               	movwf	(_pi_power+5)& (0+255),b
  1055  000118  0E00               	movlw	0
  1056  00011A  6FC8               	movwf	(_pi_power+4)& (0+255),b
  1057  00011C                     l365:
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;main.c: 137: if (STANDBY == pi_power.state)
  1061                           
  1062                           ; BSR set to: 0
  1063  00011C  05C4               	decf	_pi_power& (0+255),w,b
  1064  00011E  A4D8               	btfss	status,2,c
  1065  000120  D01F               	goto	l366
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;main.c: 138: {
  1069                           ;main.c: 140: if (pi_power.prev != STANDBY)
  1070  000122  05C5               	decf	(_pi_power+1)& (0+255),w,b
  1071  000124  B4D8               	btfsc	status,2,c
  1072  000126  D00A               	goto	l367
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;main.c: 141: {
  1076                           ;main.c: 142: pi_power.count = 0;
  1077  000128  0E00               	movlw	0
  1078  00012A  6FC7               	movwf	(_pi_power+3)& (0+255),b
  1079  00012C  0E00               	movlw	0
  1080  00012E  6FC6               	movwf	(_pi_power+2)& (0+255),b
  1081                           
  1082                           ;main.c: 143: pi_power.stopped_count = 0;
  1083  000130  0E00               	movlw	0
  1084  000132  6FC9               	movwf	(_pi_power+5)& (0+255),b
  1085  000134  0E00               	movlw	0
  1086  000136  6FC8               	movwf	(_pi_power+4)& (0+255),b
  1087                           
  1088                           ;main.c: 144: pi_power.prev = STANDBY;
  1089  000138  0E01               	movlw	1
  1090  00013A  6FC5               	movwf	(_pi_power+1)& (0+255),b
  1091  00013C                     l367:
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;main.c: 145: }
  1095                           ;main.c: 148: pi_supply_off();
  1096                           
  1097                           ; BSR set to: 0
  1098  00013C  ECE9  F006         	call	_pi_supply_off	;wreg free
  1099                           
  1100                           ;main.c: 151: request_pi_stop();
  1101  000140  ECE3  F006         	call	_request_pi_stop	;wreg free
  1102                           
  1103                           ;main.c: 154: led_color = (0);
  1104  000144  0E00               	movlw	0
  1105  000146  0100               	movlb	0	; () banked
  1106  000148  6FCC               	movwf	_led_color& (0+255),b
  1107  00014A  0E00               	movlw	0
  1108  00014C  6FCD               	movwf	(_led_color+1)& (0+255),b
  1109  00014E  0E00               	movlw	0
  1110  000150  6FCE               	movwf	(_led_color+2)& (0+255),b
  1111  000152  0E00               	movlw	0
  1112  000154  6FCF               	movwf	(_led_color+3)& (0+255),b
  1113                           
  1114                           ;main.c: 161: if (pi_power.power_switch)
  1115  000156  51CB               	movf	(_pi_power+7)& (0+255),w,b
  1116  000158  B4D8               	btfsc	status,2,c
  1117  00015A  D09E               	goto	L8
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;main.c: 162: pi_power.state = BOOTING;
  1121  00015C  0E02               	movlw	2
  1122  00015E  D09D               	goto	L6
  1123  000160                     l366:
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;main.c: 174: else if (BOOTING == pi_power.state)
  1127                           
  1128                           ; BSR set to: 0
  1129  000160  0E02               	movlw	2
  1130  000162  19C4               	xorwf	_pi_power& (0+255),w,b
  1131  000164  A4D8               	btfss	status,2,c
  1132  000166  D021               	goto	l371
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;main.c: 175: {
  1136                           ;main.c: 177: if (pi_power.prev != BOOTING)
  1137  000168  0E02               	movlw	2
  1138  00016A  19C5               	xorwf	(_pi_power+1)& (0+255),w,b
  1139  00016C  B4D8               	btfsc	status,2,c
  1140  00016E  D006               	goto	l372
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 178: {
  1144                           ;main.c: 179: pi_power.count = 0;
  1145  000170  0E00               	movlw	0
  1146  000172  6FC7               	movwf	(_pi_power+3)& (0+255),b
  1147  000174  0E00               	movlw	0
  1148  000176  6FC6               	movwf	(_pi_power+2)& (0+255),b
  1149                           
  1150                           ;main.c: 180: pi_power.prev = BOOTING;
  1151  000178  0E02               	movlw	2
  1152  00017A  6FC5               	movwf	(_pi_power+1)& (0+255),b
  1153  00017C                     l372:
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;main.c: 181: }
  1157                           ;main.c: 184: led_color = (0x0000c8e4);
  1158  00017C  0EE4               	movlw	228
  1159  00017E  6FCC               	movwf	_led_color& (0+255),b
  1160  000180  0EC8               	movlw	200
  1161  000182  6FCD               	movwf	(_led_color+1)& (0+255),b
  1162  000184  0E00               	movlw	0
  1163  000186  6FCE               	movwf	(_led_color+2)& (0+255),b
  1164  000188  0E00               	movlw	0
  1165  00018A  6FCF               	movwf	(_led_color+3)& (0+255),b
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;main.c: 187: pi_supply_on();
  1169  00018C  ECE7  F006         	call	_pi_supply_on	;wreg free
  1170                           
  1171                           ;main.c: 190: request_pi_run();
  1172  000190  ECE5  F006         	call	_request_pi_run	;wreg free
  1173                           
  1174                           ;main.c: 194: if (pi_power.power_switch == (0))
  1175  000194  0100               	movlb	0	; () banked
  1176  000196  51CB               	movf	(_pi_power+7)& (0+255),w,b
  1177  000198  A4D8               	btfss	status,2,c
  1178  00019A  D002               	goto	l373
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;main.c: 195: pi_power.state = STANDBY;
  1182  00019C  0E01               	movlw	1
  1183  00019E  6FC4               	movwf	_pi_power& (0+255),b
  1184  0001A0                     l373:
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 199: if (pi_power.running == (1))
  1188                           
  1189                           ; BSR set to: 0
  1190  0001A0  05CA               	decf	(_pi_power+6)& (0+255),w,b
  1191  0001A2  A4D8               	btfss	status,2,c
  1192  0001A4  D0A9               	goto	l390
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 200: pi_power.state = OPERATE;
  1196  0001A6  0E03               	movlw	3
  1197  0001A8  D078               	goto	L6
  1198  0001AA                     l371:
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;main.c: 213: else if (OPERATE == pi_power.state)
  1202                           
  1203                           ; BSR set to: 0
  1204  0001AA  0E03               	movlw	3
  1205  0001AC  19C4               	xorwf	_pi_power& (0+255),w,b
  1206  0001AE  A4D8               	btfss	status,2,c
  1207  0001B0  D024               	goto	l376
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;main.c: 214: {
  1211                           ;main.c: 216: if (pi_power.prev != OPERATE)
  1212  0001B2  0E03               	movlw	3
  1213  0001B4  19C5               	xorwf	(_pi_power+1)& (0+255),w,b
  1214  0001B6  B4D8               	btfsc	status,2,c
  1215  0001B8  D006               	goto	l377
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;main.c: 217: {
  1219                           ;main.c: 218: pi_power.count = 0;
  1220  0001BA  0E00               	movlw	0
  1221  0001BC  6FC7               	movwf	(_pi_power+3)& (0+255),b
  1222  0001BE  0E00               	movlw	0
  1223  0001C0  6FC6               	movwf	(_pi_power+2)& (0+255),b
  1224                           
  1225                           ;main.c: 219: pi_power.prev = OPERATE;
  1226  0001C2  0E03               	movlw	3
  1227  0001C4  6FC5               	movwf	(_pi_power+1)& (0+255),b
  1228  0001C6                     l377:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 220: }
  1232                           ;main.c: 223: led_color = (0x00f8f8f8);
  1233  0001C6  0EF8               	movlw	248
  1234  0001C8  6FCC               	movwf	_led_color& (0+255),b
  1235  0001CA  0EF8               	movlw	248
  1236  0001CC  6FCD               	movwf	(_led_color+1)& (0+255),b
  1237  0001CE  0EF8               	movlw	248
  1238  0001D0  6FCE               	movwf	(_led_color+2)& (0+255),b
  1239  0001D2  0E00               	movlw	0
  1240  0001D4  6FCF               	movwf	(_led_color+3)& (0+255),b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 226: pi_supply_on();
  1244  0001D6  ECE7  F006         	call	_pi_supply_on	;wreg free
  1245                           
  1246                           ;main.c: 229: request_pi_run();
  1247  0001DA  ECE5  F006         	call	_request_pi_run	;wreg free
  1248                           
  1249                           ;main.c: 234: if (pi_power.power_switch == 0)
  1250  0001DE  0100               	movlb	0	; () banked
  1251  0001E0  51CB               	movf	(_pi_power+7)& (0+255),w,b
  1252  0001E2  A4D8               	btfss	status,2,c
  1253  0001E4  D005               	goto	l378
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;main.c: 235: {
  1257                           ;main.c: 236: request_pi_stop();
  1258  0001E6  ECE3  F006         	call	_request_pi_stop	;wreg free
  1259                           
  1260                           ;main.c: 237: pi_power.state = SHUTDOWN;
  1261  0001EA  0E04               	movlw	4
  1262  0001EC  0100               	movlb	0	; () banked
  1263  0001EE  6FC4               	movwf	_pi_power& (0+255),b
  1264  0001F0                     l378:
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 238: }
  1268                           ;main.c: 243: if (pi_power.running == (0))
  1269                           
  1270                           ; BSR set to: 0
  1271  0001F0  51CA               	movf	(_pi_power+6)& (0+255),w,b
  1272  0001F2  A4D8               	btfss	status,2,c
  1273  0001F4  D081               	goto	l390
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 244: {
  1277                           ;main.c: 245: pi_power.state = PI_CONTROL;
  1278  0001F6  0E05               	movlw	5
  1279  0001F8  D050               	goto	L6
  1280  0001FA                     l376:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 257: else if (SHUTDOWN == pi_power.state)
  1284                           
  1285                           ; BSR set to: 0
  1286  0001FA  0E04               	movlw	4
  1287  0001FC  19C4               	xorwf	_pi_power& (0+255),w,b
  1288  0001FE  A4D8               	btfss	status,2,c
  1289  000200  D01E               	goto	l381
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;main.c: 258: {
  1293                           ;main.c: 260: if (pi_power.prev != SHUTDOWN)
  1294  000202  0E04               	movlw	4
  1295  000204  19C5               	xorwf	(_pi_power+1)& (0+255),w,b
  1296  000206  B4D8               	btfsc	status,2,c
  1297  000208  D006               	goto	l382
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;main.c: 261: {
  1301                           ;main.c: 262: pi_power.count = 0;
  1302  00020A  0E00               	movlw	0
  1303  00020C  6FC7               	movwf	(_pi_power+3)& (0+255),b
  1304  00020E  0E00               	movlw	0
  1305  000210  6FC6               	movwf	(_pi_power+2)& (0+255),b
  1306                           
  1307                           ;main.c: 263: pi_power.prev = SHUTDOWN;
  1308  000212  0E04               	movlw	4
  1309  000214  6FC5               	movwf	(_pi_power+1)& (0+255),b
  1310  000216                     l382:
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 264: }
  1314                           ;main.c: 267: led_color = (0x000000fc);
  1315  000216  0EFC               	movlw	252
  1316  000218  6FCC               	movwf	_led_color& (0+255),b
  1317  00021A  0E00               	movlw	0
  1318  00021C  6FCD               	movwf	(_led_color+1)& (0+255),b
  1319  00021E  0E00               	movlw	0
  1320  000220  6FCE               	movwf	(_led_color+2)& (0+255),b
  1321  000222  0E00               	movlw	0
  1322  000224  6FCF               	movwf	(_led_color+3)& (0+255),b
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;main.c: 270: pi_supply_on();
  1326  000226  ECE7  F006         	call	_pi_supply_on	;wreg free
  1327                           
  1328                           ;main.c: 273: request_pi_stop();
  1329  00022A  ECE3  F006         	call	_request_pi_stop	;wreg free
  1330                           
  1331                           ;main.c: 277: if (pi_power.stopped_count > (100u))
  1332  00022E  0100               	movlb	0	; () banked
  1333  000230  51C9               	movf	(_pi_power+5)& (0+255),w,b
  1334  000232  E132               	bnz	L8
  1335  000234  0E65               	movlw	101
  1336  000236  5DC8               	subwf	(_pi_power+4)& (0+255),w,b
  1337  000238  A0D8               	btfss	status,0,c
  1338  00023A  D05E               	goto	l390
  1339  00023C  D02D               	goto	L8
  1340  00023E                     l381:
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 287: else if (PI_CONTROL == pi_power.state)
  1344                           
  1345                           ; BSR set to: 0
  1346  00023E  0E05               	movlw	5
  1347  000240  19C4               	xorwf	_pi_power& (0+255),w,b
  1348  000242  A4D8               	btfss	status,2,c
  1349  000244  D02C               	goto	l385
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;main.c: 288: {
  1353                           ;main.c: 290: if (pi_power.prev != PI_CONTROL)
  1354  000246  0E05               	movlw	5
  1355  000248  19C5               	xorwf	(_pi_power+1)& (0+255),w,b
  1356  00024A  B4D8               	btfsc	status,2,c
  1357  00024C  D006               	goto	l386
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 291: {
  1361                           ;main.c: 292: pi_power.count = 0;
  1362  00024E  0E00               	movlw	0
  1363  000250  6FC7               	movwf	(_pi_power+3)& (0+255),b
  1364  000252  0E00               	movlw	0
  1365  000254  6FC6               	movwf	(_pi_power+2)& (0+255),b
  1366                           
  1367                           ;main.c: 293: pi_power.prev = PI_CONTROL;
  1368  000256  0E05               	movlw	5
  1369  000258  6FC5               	movwf	(_pi_power+1)& (0+255),b
  1370  00025A                     l386:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 294: }
  1374                           ;main.c: 297: led_color = (0x00f800f0);
  1375  00025A  0EF0               	movlw	240
  1376  00025C  6FCC               	movwf	_led_color& (0+255),b
  1377  00025E  0E00               	movlw	0
  1378  000260  6FCD               	movwf	(_led_color+1)& (0+255),b
  1379  000262  0EF8               	movlw	248
  1380  000264  6FCE               	movwf	(_led_color+2)& (0+255),b
  1381  000266  0E00               	movlw	0
  1382  000268  6FCF               	movwf	(_led_color+3)& (0+255),b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 300: pi_supply_on();
  1386  00026A  ECE7  F006         	call	_pi_supply_on	;wreg free
  1387                           
  1388                           ;main.c: 302: if ((pi_power.count < (200u)) && (pi_power.running))
  1389  00026E  0100               	movlb	0	; () banked
  1390  000270  51C7               	movf	(_pi_power+3)& (0+255),w,b
  1391  000272  E109               	bnz	l2236
  1392  000274  0EC8               	movlw	200
  1393  000276  5DC6               	subwf	(_pi_power+2)& (0+255),w,b
  1394  000278  B0D8               	btfsc	status,0,c
  1395  00027A  D005               	goto	l387
  1396                           
  1397                           ; BSR set to: 0
  1398  00027C  51CA               	movf	(_pi_power+6)& (0+255),w,b
  1399  00027E  B4D8               	btfsc	status,2,c
  1400  000280  D002               	goto	l387
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;main.c: 303: pi_power.state = OPERATE;
  1404  000282  0E03               	movlw	3
  1405  000284  6FC4               	movwf	_pi_power& (0+255),b
  1406  000286                     l387:
  1407  000286                     l2236:
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;main.c: 305: if ((pi_power.count > (200u)) && (pi_power.running == (0)))
  1411  000286  51C7               	movf	(_pi_power+3)& (0+255),w,b
  1412  000288  E104               	bnz	u1610
  1413  00028A  0EC9               	movlw	201
  1414  00028C  5DC6               	subwf	(_pi_power+2)& (0+255),w,b
  1415  00028E  A0D8               	btfss	status,0,c
  1416  000290  D033               	goto	l390
  1417  000292                     u1610:
  1418                           
  1419                           ; BSR set to: 0
  1420  000292  51CA               	movf	(_pi_power+6)& (0+255),w,b
  1421  000294  A4D8               	btfss	status,2,c
  1422  000296  D030               	goto	l390
  1423  000298                     L8:
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 306: pi_power.state = STANDBY;
  1427  000298  0E01               	movlw	1
  1428  00029A                     L6:
  1429  00029A  6FC4               	movwf	_pi_power& (0+255),b
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;main.c: 308: }
  1433  00029C  D02D               	goto	l390
  1434  00029E                     l385:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main.c: 315: else if (RESET == pi_power.state)
  1438                           
  1439                           ; BSR set to: 0
  1440  00029E  51C4               	movf	_pi_power& (0+255),w,b
  1441  0002A0  A4D8               	btfss	status,2,c
  1442  0002A2  D02A               	goto	l390
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 316: {
  1446                           ;main.c: 317: pi_power.state = STANDBY;
  1447  0002A4  0E01               	movlw	1
  1448  0002A6  6FC4               	movwf	_pi_power& (0+255),b
  1449                           
  1450                           ;main.c: 318: pi_power.prev = RESET;
  1451  0002A8  0E00               	movlw	0
  1452  0002AA  6FC5               	movwf	(_pi_power+1)& (0+255),b
  1453                           
  1454                           ;main.c: 319: pi_power.count = 0;
  1455  0002AC  0E00               	movlw	0
  1456  0002AE  6FC7               	movwf	(_pi_power+3)& (0+255),b
  1457  0002B0  0E00               	movlw	0
  1458  0002B2  6FC6               	movwf	(_pi_power+2)& (0+255),b
  1459                           
  1460                           ;main.c: 320: pi_power.stopped_count = 0;
  1461  0002B4  0E00               	movlw	0
  1462  0002B6  6FC9               	movwf	(_pi_power+5)& (0+255),b
  1463  0002B8  0E00               	movlw	0
  1464  0002BA  6FC8               	movwf	(_pi_power+4)& (0+255),b
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 323: PIN_MANAGER_Initialize();
  1468  0002BC  ECEF  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  1469                           
  1470                           ;main.c: 325: led_color = (0x00f80000);
  1471  0002C0  0E00               	movlw	0
  1472  0002C2  0100               	movlb	0	; () banked
  1473  0002C4  6FCC               	movwf	_led_color& (0+255),b
  1474  0002C6  0E00               	movlw	0
  1475  0002C8  6FCD               	movwf	(_led_color+1)& (0+255),b
  1476  0002CA  0EF8               	movlw	248
  1477  0002CC  6FCE               	movwf	(_led_color+2)& (0+255),b
  1478  0002CE  0E00               	movlw	0
  1479  0002D0  6FCF               	movwf	(_led_color+3)& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;main.c: 326: prev_color = (0);
  1483  0002D2  0E00               	movlw	0
  1484  0002D4  6FC0               	movwf	_prev_color& (0+255),b
  1485  0002D6  0E00               	movlw	0
  1486  0002D8  6FC1               	movwf	(_prev_color+1)& (0+255),b
  1487  0002DA  0E00               	movlw	0
  1488  0002DC  6FC2               	movwf	(_prev_color+2)& (0+255),b
  1489  0002DE  0E00               	movlw	0
  1490  0002E0  6FC3               	movwf	(_prev_color+3)& (0+255),b
  1491                           
  1492                           ;main.c: 329: pi_supply_off();
  1493  0002E2  ECE9  F006         	call	_pi_supply_off	;wreg free
  1494                           
  1495                           ;main.c: 332: request_pi_run();
  1496  0002E6  ECE5  F006         	call	_request_pi_run	;wreg free
  1497                           
  1498                           ;main.c: 335: do { LATCbits.LATC2 = 0; } while(0);
  1499  0002EA  948B               	bcf	3979,2,c	;volatile
  1500                           
  1501                           ;main.c: 338: do { LATCbits.LATC0 = 0; } while(0);
  1502  0002EC  908B               	bcf	3979,0,c	;volatile
  1503                           
  1504                           ;main.c: 341: reg_status = 0;
  1505  0002EE  0E00               	movlw	0
  1506  0002F0  0100               	movlb	0	; () banked
  1507  0002F2  6FD8               	movwf	_reg_status& (0+255),b
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;main.c: 342: reg_control = 0;
  1511  0002F4  0E00               	movlw	0
  1512  0002F6  6FD7               	movwf	_reg_control& (0+255),b
  1513  0002F8                     l390:
  1514                           
  1515                           ; BSR set to: 0
  1516                           
  1517                           ; BSR set to: 0
  1518                           
  1519                           ;main.c: 344: }
  1520                           ;main.c: 355: do { LATCbits.LATC5 = 1; } while(0);
  1521                           
  1522                           ; BSR set to: 0
  1523                           
  1524                           ; BSR set to: 0
  1525                           
  1526                           ; BSR set to: 0
  1527                           
  1528                           ; BSR set to: 0
  1529                           
  1530                           ; BSR set to: 0
  1531                           
  1532                           ; BSR set to: 0
  1533  0002F8  8A8B               	bsf	3979,5,c	;volatile
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 358: ADC_Initialize();
  1537                           
  1538                           ; BSR set to: 0
  1539  0002FA  ECB0  F006         	call	_ADC_Initialize	;wreg free
  1540                           
  1541                           ;main.c: 361: meas_tune = ADC_GetConversion(channel_TUNE);
  1542  0002FE  0E00               	movlw	0
  1543  000300  EC2E  F006         	call	_ADC_GetConversion
  1544  000304  C015  F0D4         	movff	?_ADC_GetConversion,_meas_tune
  1545  000308  C016  F0D5         	movff	?_ADC_GetConversion+1,_meas_tune+1
  1546                           
  1547                           ;main.c: 362: meas_band = ADC_GetConversion(channel_BAND);
  1548  00030C  0E01               	movlw	1
  1549  00030E  EC2E  F006         	call	_ADC_GetConversion
  1550  000312  C015  F0D2         	movff	?_ADC_GetConversion,_meas_band
  1551  000316  C016  F0D3         	movff	?_ADC_GetConversion+1,_meas_band+1
  1552                           
  1553                           ;main.c: 363: meas_vol = ADC_GetConversion(channel_VOL);
  1554  00031A  0E02               	movlw	2
  1555  00031C  EC2E  F006         	call	_ADC_GetConversion
  1556  000320  C015  F0D0         	movff	?_ADC_GetConversion,_meas_vol
  1557  000324  C016  F0D1         	movff	?_ADC_GetConversion+1,_meas_vol+1
  1558                           
  1559                           ;main.c: 366: meas_pi3v = ADC_GetConversion(channel_PI3V);
  1560  000328  0E19               	movlw	25
  1561  00032A  EC2E  F006         	call	_ADC_GetConversion
  1562  00032E  C015  F0DF         	movff	?_ADC_GetConversion,main@meas_pi3v
  1563  000332  C016  F0E0         	movff	?_ADC_GetConversion+1,main@meas_pi3v+1
  1564                           
  1565                           ;main.c: 367: pi3v = ((uint32_t)meas_pi3v * (uint32_t)5000 / (uint32_t)1024);
  1566  000336  C0DF  F015         	movff	main@meas_pi3v,___lmul@multiplier
  1567  00033A  C0E0  F016         	movff	main@meas_pi3v+1,___lmul@multiplier+1
  1568  00033E  6A17               	clrf	___lmul@multiplier+2,c
  1569  000340  6A18               	clrf	___lmul@multiplier+3,c
  1570  000342  0E88               	movlw	136
  1571  000344  6E19               	movwf	___lmul@multiplicand,c
  1572  000346  0E13               	movlw	19
  1573  000348  6E1A               	movwf	___lmul@multiplicand+1,c
  1574  00034A  0E00               	movlw	0
  1575  00034C  6E1B               	movwf	___lmul@multiplicand+2,c
  1576  00034E  0E00               	movlw	0
  1577  000350  6E1C               	movwf	___lmul@multiplicand+3,c
  1578  000352  EC72  F005         	call	___lmul	;wreg free
  1579  000356  0E0B               	movlw	11
  1580  000358  D005               	goto	u1640
  1581  00035A                     u1645:
  1582  00035A  90D8               	bcf	status,0,c
  1583  00035C  3218               	rrcf	?___lmul+3,f,c
  1584  00035E  3217               	rrcf	?___lmul+2,f,c
  1585  000360  3216               	rrcf	?___lmul+1,f,c
  1586  000362  3215               	rrcf	?___lmul,f,c
  1587  000364                     u1640:
  1588  000364  2EE8               	decfsz	wreg,f,c
  1589  000366  D7F9               	goto	u1645
  1590  000368  C015  F0D9         	movff	?___lmul,main@pi3v
  1591  00036C  C016  F0DA         	movff	?___lmul+1,main@pi3v+1
  1592                           
  1593                           ;main.c: 369: meas_pi5v = ADC_GetConversion(channel_PI5V);
  1594  000370  0E0F               	movlw	15
  1595  000372  EC2E  F006         	call	_ADC_GetConversion
  1596  000376  C015  F0DD         	movff	?_ADC_GetConversion,main@meas_pi5v
  1597  00037A  C016  F0DE         	movff	?_ADC_GetConversion+1,main@meas_pi5v+1
  1598                           
  1599                           ;main.c: 370: pi5v = ((uint32_t)meas_pi5v * (uint32_t)5000 / (uint32_t)512);
  1600  00037E  C0DD  F015         	movff	main@meas_pi5v,___lmul@multiplier
  1601  000382  C0DE  F016         	movff	main@meas_pi5v+1,___lmul@multiplier+1
  1602  000386  6A17               	clrf	___lmul@multiplier+2,c
  1603  000388  6A18               	clrf	___lmul@multiplier+3,c
  1604  00038A  0E88               	movlw	136
  1605  00038C  6E19               	movwf	___lmul@multiplicand,c
  1606  00038E  0E13               	movlw	19
  1607  000390  6E1A               	movwf	___lmul@multiplicand+1,c
  1608  000392  0E00               	movlw	0
  1609  000394  6E1B               	movwf	___lmul@multiplicand+2,c
  1610  000396  0E00               	movlw	0
  1611  000398  6E1C               	movwf	___lmul@multiplicand+3,c
  1612  00039A  EC72  F005         	call	___lmul	;wreg free
  1613  00039E  0E0A               	movlw	10
  1614  0003A0  D005               	goto	u1650
  1615  0003A2                     u1655:
  1616  0003A2  90D8               	bcf	status,0,c
  1617  0003A4  3218               	rrcf	?___lmul+3,f,c
  1618  0003A6  3217               	rrcf	?___lmul+2,f,c
  1619  0003A8  3216               	rrcf	?___lmul+1,f,c
  1620  0003AA  3215               	rrcf	?___lmul,f,c
  1621  0003AC                     u1650:
  1622  0003AC  2EE8               	decfsz	wreg,f,c
  1623  0003AE  D7F9               	goto	u1655
  1624  0003B0  C015  F0DB         	movff	?___lmul,main@pi5v
  1625  0003B4  C016  F0DC         	movff	?___lmul+1,main@pi5v+1
  1626                           
  1627                           ;main.c: 373: do { LATCbits.LATC5 = 0; } while(0);
  1628  0003B8  9A8B               	bcf	3979,5,c	;volatile
  1629                           
  1630                           ;main.c: 381: {
  1631                           ;main.c: 382: printf("\n\n\rLED   0x%08lX",led_color);
  1632                           
  1633                           ;main.c: 380: if ( ((1)) )
  1634  0003BA  0E57               	movlw	low STR_1
  1635  0003BC  6E2B               	movwf	printf@f,c
  1636  0003BE  0E3F               	movlw	high STR_1
  1637  0003C0  6E2C               	movwf	printf@f+1,c
  1638  0003C2  C0CC  F02D         	movff	_led_color,?_printf+2
  1639  0003C6  C0CD  F02E         	movff	_led_color+1,?_printf+3
  1640  0003CA  C0CE  F02F         	movff	_led_color+2,?_printf+4
  1641  0003CE  C0CF  F030         	movff	_led_color+3,?_printf+5
  1642  0003D2  ECB3  F002         	call	_printf	;wreg free
  1643                           
  1644                           ;main.c: 383: printf("\n\rSTAT  0x%02X",reg_status);
  1645  0003D6  0E87               	movlw	low STR_2
  1646  0003D8  6E2B               	movwf	printf@f,c
  1647  0003DA  0E3F               	movlw	high STR_2
  1648  0003DC  6E2C               	movwf	printf@f+1,c
  1649  0003DE  C0D8  F02D         	movff	_reg_status,?_printf+2
  1650  0003E2  6A2E               	clrf	?_printf+3,c
  1651  0003E4  ECB3  F002         	call	_printf	;wreg free
  1652                           
  1653                           ;main.c: 384: printf("\n\rCTRL  0x%02X",reg_control);
  1654  0003E8  0E78               	movlw	low STR_3
  1655  0003EA  6E2B               	movwf	printf@f,c
  1656  0003EC  0E3F               	movlw	high STR_3
  1657  0003EE  6E2C               	movwf	printf@f+1,c
  1658  0003F0  C0D7  F02D         	movff	_reg_control,?_printf+2
  1659  0003F4  6A2E               	clrf	?_printf+3,c
  1660  0003F6  ECB3  F002         	call	_printf	;wreg free
  1661                           
  1662                           ;main.c: 385: printf("\n\rST_CNT  %u",pi_power.count);
  1663  0003FA  0EF1               	movlw	low STR_4
  1664  0003FC  6E2B               	movwf	printf@f,c
  1665  0003FE  0E3F               	movlw	high STR_4
  1666  000400  6E2C               	movwf	printf@f+1,c
  1667  000402  C0C6  F02D         	movff	_pi_power+2,?_printf+2
  1668  000406  C0C7  F02E         	movff	_pi_power+3,?_printf+3
  1669  00040A  ECB3  F002         	call	_printf	;wreg free
  1670                           
  1671                           ;main.c: 386: printf("\n\rSP_CNT  %u",pi_power.stopped_count);
  1672  00040E  0EE4               	movlw	low STR_5
  1673  000410  6E2B               	movwf	printf@f,c
  1674  000412  0E3F               	movlw	high STR_5
  1675  000414  6E2C               	movwf	printf@f+1,c
  1676  000416  C0C8  F02D         	movff	_pi_power+4,?_printf+2
  1677  00041A  C0C9  F02E         	movff	_pi_power+5,?_printf+3
  1678  00041E  ECB3  F002         	call	_printf	;wreg free
  1679                           
  1680                           ;main.c: 387: printf("\n\rSTATE   %u",pi_power.state);
  1681  000422  0EB0               	movlw	low STR_6
  1682  000424  6E2B               	movwf	printf@f,c
  1683  000426  0E3F               	movlw	high STR_6
  1684  000428  6E2C               	movwf	printf@f+1,c
  1685  00042A  C0C4  F02D         	movff	_pi_power,?_printf+2
  1686  00042E  6A2E               	clrf	?_printf+3,c
  1687  000430  ECB3  F002         	call	_printf	;wreg free
  1688                           
  1689                           ;main.c: 388: printf("\n\rAC_ON   %u",pi_power.power_switch);
  1690  000434  0EBD               	movlw	low STR_7
  1691  000436  6E2B               	movwf	printf@f,c
  1692  000438  0E3F               	movlw	high STR_7
  1693  00043A  6E2C               	movwf	printf@f+1,c
  1694  00043C  C0CB  F02D         	movff	_pi_power+7,?_printf+2
  1695  000440  6A2E               	clrf	?_printf+3,c
  1696  000442  ECB3  F002         	call	_printf	;wreg free
  1697                           
  1698                           ;main.c: 389: printf("\n\rPI_RUN  %u",pi_power.running);
  1699  000446  0ED7               	movlw	low STR_8
  1700  000448  6E2B               	movwf	printf@f,c
  1701  00044A  0E3F               	movlw	high STR_8
  1702  00044C  6E2C               	movwf	printf@f+1,c
  1703  00044E  C0CA  F02D         	movff	_pi_power+6,?_printf+2
  1704  000452  6A2E               	clrf	?_printf+3,c
  1705  000454  ECB3  F002         	call	_printf	;wreg free
  1706                           
  1707                           ;main.c: 390: printf("\n\rTUNE    %u",meas_tune);
  1708  000458  0EA3               	movlw	low STR_9
  1709  00045A  6E2B               	movwf	printf@f,c
  1710  00045C  0E3F               	movlw	high STR_9
  1711  00045E  6E2C               	movwf	printf@f+1,c
  1712  000460  C0D4  F02D         	movff	_meas_tune,?_printf+2
  1713  000464  C0D5  F02E         	movff	_meas_tune+1,?_printf+3
  1714  000468  ECB3  F002         	call	_printf	;wreg free
  1715                           
  1716                           ;main.c: 391: printf("\n\rBAND    %u",meas_band);
  1717  00046C  0E96               	movlw	low STR_10
  1718  00046E  6E2B               	movwf	printf@f,c
  1719  000470  0E3F               	movlw	high STR_10
  1720  000472  6E2C               	movwf	printf@f+1,c
  1721  000474  C0D2  F02D         	movff	_meas_band,?_printf+2
  1722  000478  C0D3  F02E         	movff	_meas_band+1,?_printf+3
  1723  00047C  ECB3  F002         	call	_printf	;wreg free
  1724                           
  1725                           ;main.c: 392: printf("\n\rVOLUME  %u",meas_vol);
  1726  000480  0ECA               	movlw	low STR_11
  1727  000482  6E2B               	movwf	printf@f,c
  1728  000484  0E3F               	movlw	high STR_11
  1729  000486  6E2C               	movwf	printf@f+1,c
  1730  000488  C0D0  F02D         	movff	_meas_vol,?_printf+2
  1731  00048C  C0D1  F02E         	movff	_meas_vol+1,?_printf+3
  1732  000490  ECB3  F002         	call	_printf	;wreg free
  1733                           
  1734                           ;main.c: 393: printf("\n\n\rPi3V    %u mV",pi3v);
  1735  000494  0E46               	movlw	low STR_12
  1736  000496  6E2B               	movwf	printf@f,c
  1737  000498  0E3F               	movlw	high STR_12
  1738  00049A  6E2C               	movwf	printf@f+1,c
  1739  00049C  C0D9  F02D         	movff	main@pi3v,?_printf+2
  1740  0004A0  C0DA  F02E         	movff	main@pi3v+1,?_printf+3
  1741  0004A4  ECB3  F002         	call	_printf	;wreg free
  1742                           
  1743                           ;main.c: 394: printf("\n\rPi5V    %u mV",pi5v);
  1744  0004A8  0E68               	movlw	low STR_13
  1745  0004AA  6E2B               	movwf	printf@f,c
  1746  0004AC  0E3F               	movlw	high STR_13
  1747  0004AE  6E2C               	movwf	printf@f+1,c
  1748  0004B0  C0DB  F02D         	movff	main@pi5v,?_printf+2
  1749  0004B4  C0DC  F02E         	movff	main@pi5v+1,?_printf+3
  1750  0004B8  ECB3  F002         	call	_printf	;wreg free
  1751                           
  1752                           ;main.c: 395: }
  1753                           ;main.c: 400: if (prev_color != led_color)
  1754  0004BC  0100               	movlb	0	; () banked
  1755  0004BE  51CC               	movf	_led_color& (0+255),w,b
  1756  0004C0  19C0               	xorwf	_prev_color& (0+255),w,b
  1757  0004C2  E10A               	bnz	u1660
  1758  0004C4  51CD               	movf	(_led_color+1)& (0+255),w,b
  1759  0004C6  19C1               	xorwf	(_prev_color+1)& (0+255),w,b
  1760  0004C8  E107               	bnz	u1660
  1761  0004CA  51CE               	movf	(_led_color+2)& (0+255),w,b
  1762  0004CC  19C2               	xorwf	(_prev_color+2)& (0+255),w,b
  1763  0004CE  E104               	bnz	u1660
  1764  0004D0  51CF               	movf	(_led_color+3)& (0+255),w,b
  1765  0004D2  19C3               	xorwf	(_prev_color+3)& (0+255),w,b
  1766  0004D4  B4D8               	btfsc	status,2,c
  1767  0004D6  D018               	goto	l400
  1768  0004D8                     u1660:
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;main.c: 401: {
  1772                           ;main.c: 404: (INTCONbits.GIE = 0);
  1773  0004D8  9EF2               	bcf	intcon,7,c	;volatile
  1774                           
  1775                           ;main.c: 406: (INTCONbits.PEIE = 0);
  1776  0004DA  9CF2               	bcf	intcon,6,c	;volatile
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 409: OSCILLATOR_FastClock();
  1780  0004DC  ECC2  F006         	call	_OSCILLATOR_FastClock	;wreg free
  1781                           
  1782                           ;main.c: 410: ws2812_send(led_color);
  1783  0004E0  C0CC  F015         	movff	_led_color,ws2812_send@led
  1784  0004E4  C0CD  F016         	movff	_led_color+1,ws2812_send@led+1
  1785  0004E8  C0CE  F017         	movff	_led_color+2,ws2812_send@led+2
  1786  0004EC  C0CF  F018         	movff	_led_color+3,ws2812_send@led+3
  1787  0004F0  EC43  F005         	call	_ws2812_send	;wreg free
  1788                           
  1789                           ;main.c: 413: OSCILLATOR_Initialize();
  1790  0004F4  ECBB  F006         	call	_OSCILLATOR_Initialize	;wreg free
  1791                           
  1792                           ;main.c: 415: prev_color = led_color;
  1793  0004F8  C0CC  F0C0         	movff	_led_color,_prev_color
  1794  0004FC  C0CD  F0C1         	movff	_led_color+1,_prev_color+1
  1795  000500  C0CE  F0C2         	movff	_led_color+2,_prev_color+2
  1796  000504  C0CF  F0C3         	movff	_led_color+3,_prev_color+3
  1797  000508                     l400:
  1798                           
  1799                           ;main.c: 416: }
  1800                           ;main.c: 419: (INTCONbits.GIE = 1);
  1801  000508  8EF2               	bsf	intcon,7,c	;volatile
  1802                           
  1803                           ;main.c: 421: (INTCONbits.PEIE = 1);
  1804  00050A  8CF2               	bsf	intcon,6,c	;volatile
  1805  00050C  ECCF  F006         	call	_TMR5_HasOverflowOccured	;wreg free
  1806  000510  0900               	iorlw	0
  1807  000512  B4D8               	btfsc	status,2,c
  1808  000514  D7FB               	goto	l402
  1809                           
  1810                           ;main.c: 431: if (led_pattern_idx++ >= (16u))
  1811  000516  0100               	movlb	0	; () banked
  1812  000518  2BD6               	incf	_led_pattern_idx& (0+255),f,b
  1813  00051A  05D6               	decf	_led_pattern_idx& (0+255),w,b
  1814  00051C  6E42               	movwf	??_main& (0+255),c
  1815  00051E  0E0F               	movlw	15
  1816  000520  6442               	cpfsgt	??_main,c
  1817  000522  D002               	goto	l404
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;main.c: 432: {
  1821                           ;main.c: 433: led_pattern_idx = 0;
  1822  000524  0E00               	movlw	0
  1823  000526  6FD6               	movwf	_led_pattern_idx& (0+255),b
  1824  000528                     l404:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 434: }
  1828                           ;main.c: 436: if (led_pattern_tbl[pi_power.state][led_pattern_idx] == 0)
  1829                           
  1830                           ; BSR set to: 0
  1831  000528  51C4               	movf	_pi_power& (0+255),w,b
  1832  00052A  0D10               	mullw	16
  1833  00052C  0E60               	movlw	low _led_pattern_tbl
  1834  00052E  6E42               	movwf	??_main& (0+255),c
  1835  000530  0E00               	movlw	high _led_pattern_tbl
  1836  000532  6E43               	movwf	(??_main+1)& (0+255),c
  1837  000534  50F3               	movf	prodl,w,c
  1838  000536  2642               	addwf	??_main,f,c
  1839  000538  50F4               	movf	prodh,w,c
  1840  00053A  2243               	addwfc	??_main+1,f,c
  1841  00053C  51D6               	movf	_led_pattern_idx& (0+255),w,b
  1842  00053E  0D01               	mullw	1
  1843  000540  50F3               	movf	prodl,w,c
  1844  000542  2442               	addwf	??_main,w,c
  1845  000544  6ED9               	movwf	fsr2l,c
  1846  000546  50F4               	movf	prodh,w,c
  1847  000548  2043               	addwfc	??_main+1,w,c
  1848  00054A  6EDA               	movwf	fsr2h,c
  1849  00054C  50DF               	movf	indf2,w,c
  1850  00054E  A4D8               	btfss	status,2,c
  1851  000550  D002               	goto	l405
  1852                           
  1853                           ; BSR set to: 0
  1854                           
  1855                           ;main.c: 437: {
  1856                           ;main.c: 438: do { LATCbits.LATC0 = 0; } while(0);
  1857  000552  908B               	bcf	3979,0,c	;volatile
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;main.c: 439: }
  1861  000554  D001               	goto	l410
  1862  000556                     l405:
  1863                           
  1864                           ; BSR set to: 0
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 440: else
  1868                           ;main.c: 441: {
  1869                           ;main.c: 442: do { LATCbits.LATC0 = 1; } while(0);
  1870  000556  808B               	bsf	3979,0,c	;volatile
  1871  000558                     l410:
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;main.c: 443: }
  1875                           ;main.c: 447: pi_power.power_switch = TMR0_HasOverflowOccured();
  1876                           
  1877                           ; BSR set to: 0
  1878                           
  1879                           ; BSR set to: 0
  1880  000558  ECD5  F006         	call	_TMR0_HasOverflowOccured	;wreg free
  1881  00055C  0100               	movlb	0	; () banked
  1882  00055E  6FCB               	movwf	(_pi_power+7)& (0+255),b
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;main.c: 450: update_status_reg();
  1886  000560  EC9D  F005         	call	_update_status_reg	;wreg free
  1887  000564  D5B4               	goto	l361
  1888  000566                     __end_of_main:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           indf2	equ	0xFDF
  1902                           fsr2h	equ	0xFDA
  1903                           fsr2l	equ	0xFD9
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _ws2812_send *****************
  1907 ;; Defined at:
  1908 ;;		line 7 in file "ws2812.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  led             4   20[COMRAM] unsigned long 
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  j               1   28[COMRAM] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2, status,0
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1922 ;;      Params:         4       0       0       0
  1923 ;;      Locals:         1       0       0       0
  1924 ;;      Temps:          4       0       0       0
  1925 ;;      Totals:         9       0       0       0
  1926 ;;Total ram usage:        9 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    3
  1929 ;; This function calls:
  1930 ;;		Nothing
  1931 ;; This function is called by:
  1932 ;;		_main
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text1
  1937  000A86                     __ptext1:
  1938                           	opt stack 0
  1939  000A86                     _ws2812_send:
  1940                           	opt stack 27
  1941                           
  1942                           ;ws2812.c: 9: unsigned char j;
  1943                           ;ws2812.c: 20: for(j = 0; j < 24; j++) {
  1944                           
  1945                           ;incstack = 0
  1946  000A86  0E00               	movlw	0
  1947  000A88  6E1D               	movwf	ws2812_send@j,c
  1948  000A8A                     l2096:
  1949  000A8A  0E17               	movlw	23
  1950  000A8C  641D               	cpfsgt	ws2812_send@j,c
  1951  000A8E  D001               	goto	l466
  1952  000A90  D024               	goto	u1270
  1953  000A92                     l466:
  1954                           
  1955                           ;ws2812.c: 24: if (led & 1) {
  1956  000A92  A015               	btfss	ws2812_send@led,0,c
  1957  000A94  D006               	goto	l468
  1958  000A96  8282               	bsf	3970,1,c	;# 
  1959  000A98  F000               	nop		;# 
  1960  000A9A  F000               	nop		;# 
  1961  000A9C  F000               	nop		;# 
  1962  000A9E  9282               	bcf	3970,1,c	;# 
  1963                           
  1964                           ;ws2812.c: 33: } else {
  1965  000AA0  D005               	goto	l469
  1966  000AA2                     l468:
  1967  000AA2  8282               	bsf	3970,1,c	;# 
  1968  000AA4  9282               	bcf	3970,1,c	;# 
  1969  000AA6  F000               	nop		;# 
  1970  000AA8  F000               	nop		;# 
  1971  000AAA  F000               	nop		;# 
  1972  000AAC                     l469:
  1973                           
  1974                           ;ws2812.c: 42: }
  1975                           ;ws2812.c: 45: led = led >> 1L;
  1976  000AAC  C015  F019         	movff	ws2812_send@led,??_ws2812_send
  1977  000AB0  C016  F01A         	movff	ws2812_send@led+1,??_ws2812_send+1
  1978  000AB4  C017  F01B         	movff	ws2812_send@led+2,??_ws2812_send+2
  1979  000AB8  C018  F01C         	movff	ws2812_send@led+3,??_ws2812_send+3
  1980  000ABC  90D8               	bcf	status,0,c
  1981  000ABE  321C               	rrcf	??_ws2812_send+3,f,c
  1982  000AC0  321B               	rrcf	??_ws2812_send+2,f,c
  1983  000AC2  321A               	rrcf	??_ws2812_send+1,f,c
  1984  000AC4  3219               	rrcf	??_ws2812_send,f,c
  1985  000AC6  C019  F015         	movff	??_ws2812_send,ws2812_send@led
  1986  000ACA  C01A  F016         	movff	??_ws2812_send+1,ws2812_send@led+1
  1987  000ACE  C01B  F017         	movff	??_ws2812_send+2,ws2812_send@led+2
  1988  000AD2  C01C  F018         	movff	??_ws2812_send+3,ws2812_send@led+3
  1989  000AD6  2A1D               	incf	ws2812_send@j,f,c
  1990  000AD8  D7D8               	goto	l2096
  1991  000ADA                     u1270:
  1992                           
  1993                           ;ws2812.c: 46: }
  1994                           ;ws2812.c: 48: _delay((unsigned long)((50)*(64000000/4000000.0)));
  1995  000ADA  0EA0               	movlw	160
  1996  000ADC                     u1707:
  1997  000ADC  D000               	nop2	
  1998  000ADE  2EE8               	decfsz	wreg,f,c
  1999  000AE0  D7FD               	bra	u1707
  2000  000AE2  0012               	return		;funcret
  2001  000AE4                     __end_of_ws2812_send:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           prodh	equ	0xFF4
  2008                           prodl	equ	0xFF3
  2009                           intcon	equ	0xFF2
  2010                           postinc0	equ	0xFEE
  2011                           wreg	equ	0xFE8
  2012                           postdec1	equ	0xFE5
  2013                           fsr1l	equ	0xFE1
  2014                           indf2	equ	0xFDF
  2015                           fsr2h	equ	0xFDA
  2016                           fsr2l	equ	0xFD9
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _update_status_reg *****************
  2020 ;; Defined at:
  2021 ;;		line 455 in file "main.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, status,2, status,0
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2035 ;;      Params:         0       0       0       0
  2036 ;;      Locals:         0       0       0       0
  2037 ;;      Temps:          6       0       0       0
  2038 ;;      Totals:         6       0       0       0
  2039 ;;Total ram usage:        6 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    3
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_main
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text2
  2050  000B3A                     __ptext2:
  2051                           	opt stack 0
  2052  000B3A                     _update_status_reg:
  2053                           	opt stack 27
  2054                           
  2055                           ;main.c: 471: reg_status = ((pi_power.power_switch & 1) << 7) |
  2056                           ;main.c: 472: ((PORTDbits.RD2 & 1) << 6) |
  2057                           ;main.c: 473: ((pi_power.running & 1) << 5 ) |
  2058                           ;main.c: 474: ((PORTCbits.RC4 & 1) << 4) |
  2059                           ;main.c: 475: (pi_power.state & 7);
  2060                           
  2061                           ;incstack = 0
  2062  000B3A  C0C4  F015         	movff	_pi_power,??_update_status_reg
  2063  000B3E  0E07               	movlw	7
  2064  000B40  1615               	andwf	??_update_status_reg,f,c
  2065  000B42  A882               	btfss	3970,4,c	;volatile
  2066  000B44  D003               	goto	u1280
  2067  000B46  0E10               	movlw	16
  2068  000B48  6E16               	movwf	(??_update_status_reg+1)& (0+255),c
  2069  000B4A  D001               	goto	u1295
  2070  000B4C                     u1280:
  2071  000B4C  6A16               	clrf	(??_update_status_reg+1)& (0+255),c
  2072  000B4E                     u1295:
  2073  000B4E  C0CA  F017         	movff	_pi_power+6,??_update_status_reg+2
  2074  000B52  0E01               	movlw	1
  2075  000B54  1617               	andwf	??_update_status_reg+2,f,c
  2076  000B56  0E05               	movlw	5
  2077  000B58  6E18               	movwf	(??_update_status_reg+3)& (0+255),c
  2078  000B5A                     u1305:
  2079  000B5A  90D8               	bcf	status,0,c
  2080  000B5C  3617               	rlcf	??_update_status_reg+2,f,c
  2081  000B5E  2E18               	decfsz	(??_update_status_reg+3)& (0+255),f,c
  2082  000B60  D7FC               	goto	u1305
  2083  000B62  A483               	btfss	3971,2,c	;volatile
  2084  000B64  D003               	goto	u1310
  2085  000B66  0E40               	movlw	64
  2086  000B68  6E19               	movwf	(??_update_status_reg+4)& (0+255),c
  2087  000B6A  D001               	goto	u1325
  2088  000B6C                     u1310:
  2089  000B6C  6A19               	clrf	(??_update_status_reg+4)& (0+255),c
  2090  000B6E                     u1325:
  2091  000B6E  C0CB  F01A         	movff	_pi_power+7,??_update_status_reg+5
  2092  000B72  0E01               	movlw	1
  2093  000B74  161A               	andwf	??_update_status_reg+5,f,c
  2094  000B76  0E00               	movlw	0
  2095  000B78  B01A               	btfsc	??_update_status_reg+5,0,c
  2096  000B7A  0E80               	movlw	128
  2097  000B7C  6E1A               	movwf	??_update_status_reg+5,c
  2098  000B7E  501A               	movf	??_update_status_reg+5,w,c
  2099  000B80  1019               	iorwf	??_update_status_reg+4,w,c
  2100  000B82  1017               	iorwf	??_update_status_reg+2,w,c
  2101  000B84  1016               	iorwf	??_update_status_reg+1,w,c
  2102  000B86  1015               	iorwf	??_update_status_reg,w,c
  2103  000B88  0100               	movlb	0	; () banked
  2104  000B8A  6FD8               	movwf	_reg_status& (0+255),b
  2105                           
  2106                           ; BSR set to: 0
  2107  000B8C  0012               	return		;funcret
  2108  000B8E                     __end_of_update_status_reg:
  2109                           	opt stack 0
  2110                           tblptru	equ	0xFF8
  2111                           tblptrh	equ	0xFF7
  2112                           tblptrl	equ	0xFF6
  2113                           tablat	equ	0xFF5
  2114                           prodh	equ	0xFF4
  2115                           prodl	equ	0xFF3
  2116                           intcon	equ	0xFF2
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           postdec1	equ	0xFE5
  2120                           fsr1l	equ	0xFE1
  2121                           indf2	equ	0xFDF
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _request_pi_stop *****************
  2127 ;; Defined at:
  2128 ;;		line 496 in file "main.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		None
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2142 ;;      Params:         0       0       0       0
  2143 ;;      Locals:         0       0       0       0
  2144 ;;      Temps:          0       0       0       0
  2145 ;;      Totals:         0       0       0       0
  2146 ;;Total ram usage:        0 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    3
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text3
  2157  000DC6                     __ptext3:
  2158                           	opt stack 0
  2159  000DC6                     _request_pi_stop:
  2160                           	opt stack 27
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;incstack = 0
  2164                           ;main.c: 499: do { LATCbits.LATC4 = 0; } while(0);
  2165  000DC6  988B               	bcf	3979,4,c	;volatile
  2166  000DC8  0012               	return	
  2167  000DCA                     __end_of_request_pi_stop:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           prodh	equ	0xFF4
  2174                           prodl	equ	0xFF3
  2175                           intcon	equ	0xFF2
  2176                           postinc0	equ	0xFEE
  2177                           wreg	equ	0xFE8
  2178                           postdec1	equ	0xFE5
  2179                           fsr1l	equ	0xFE1
  2180                           indf2	equ	0xFDF
  2181                           fsr2h	equ	0xFDA
  2182                           fsr2l	equ	0xFD9
  2183                           status	equ	0xFD8
  2184                           
  2185 ;; *************** function _request_pi_run *****************
  2186 ;; Defined at:
  2187 ;;		line 490 in file "main.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		None
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2201 ;;      Params:         0       0       0       0
  2202 ;;      Locals:         0       0       0       0
  2203 ;;      Temps:          0       0       0       0
  2204 ;;      Totals:         0       0       0       0
  2205 ;;Total ram usage:        0 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    3
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text4
  2216  000DCA                     __ptext4:
  2217                           	opt stack 0
  2218  000DCA                     _request_pi_run:
  2219                           	opt stack 27
  2220                           
  2221                           ;incstack = 0
  2222                           ;main.c: 493: do { LATCbits.LATC4 = 1; } while(0);
  2223  000DCA  888B               	bsf	3979,4,c	;volatile
  2224  000DCC  0012               	return	
  2225  000DCE                     __end_of_request_pi_run:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           postdec1	equ	0xFE5
  2237                           fsr1l	equ	0xFE1
  2238                           indf2	equ	0xFDF
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function _printf *****************
  2244 ;; Defined at:
  2245 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;  f               2   42[COMRAM] PTR const unsigned char 
  2248 ;;		 -> STR_13(16), STR_12(17), STR_11(13), STR_10(13), 
  2249 ;;		 -> STR_9(13), STR_8(13), STR_7(13), STR_6(13), 
  2250 ;;		 -> STR_5(13), STR_4(13), STR_3(15), STR_2(15), 
  2251 ;;		 -> STR_1(17), 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  idx             1   52[COMRAM] unsigned char 
  2254 ;;  val             4   57[COMRAM] unsigned long 
  2255 ;;  tmpval          4    0        struct .
  2256 ;;  cp              3    0        PTR const unsigned char 
  2257 ;;  width           2   62[COMRAM] int 
  2258 ;;  prec            2   55[COMRAM] int 
  2259 ;;  ap              2   53[COMRAM] PTR void [1]
  2260 ;;		 -> ?_printf(2), 
  2261 ;;  len             2    0        unsigned int 
  2262 ;;  c               1   64[COMRAM] char 
  2263 ;;  flag            1   61[COMRAM] unsigned char 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  2   42[COMRAM] int 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2273 ;;      Params:         6       0       0       0
  2274 ;;      Locals:        13       0       0       0
  2275 ;;      Temps:          4       0       0       0
  2276 ;;      Totals:        23       0       0       0
  2277 ;;Total ram usage:       23 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    5
  2280 ;; This function calls:
  2281 ;;		___lldiv
  2282 ;;		___llmod
  2283 ;;		___wmul
  2284 ;;		_isdigit
  2285 ;;		_putch
  2286 ;; This function is called by:
  2287 ;;		_main
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text5
  2292  000566                     __ptext5:
  2293                           	opt stack 0
  2294  000566                     _printf:
  2295                           	opt stack 25
  2296                           
  2297                           ;doprnt.c: 466: va_list ap;
  2298                           ;doprnt.c: 499: signed char c;
  2299                           ;doprnt.c: 501: int width;
  2300                           ;doprnt.c: 504: int prec;
  2301                           ;doprnt.c: 508: unsigned char flag;
  2302                           ;doprnt.c: 523: union {
  2303                           ;doprnt.c: 524: unsigned long vd;
  2304                           ;doprnt.c: 525: double integ;
  2305                           ;doprnt.c: 526: } tmpval;
  2306                           ;doprnt.c: 528: unsigned long val;
  2307                           ;doprnt.c: 529: unsigned len;
  2308                           ;doprnt.c: 530: const char * cp;
  2309                           ;doprnt.c: 533: *ap = __va_start();
  2310                           
  2311                           ;incstack = 0
  2312  000566  0E2D               	movlw	low (?_printf+2)
  2313  000568  6E36               	movwf	printf@ap,c
  2314  00056A  0E00               	movlw	high (?_printf+2)
  2315  00056C  6E37               	movwf	printf@ap+1,c
  2316                           
  2317                           ;doprnt.c: 536: while(c = *f++) {
  2318  00056E  D19B               	goto	u1230
  2319  000570                     
  2320                           ;doprnt.c: 538: if(c != '%')
  2321  000570  0E25               	movlw	37
  2322  000572  1841               	xorwf	printf@c,w,c
  2323  000574  B4D8               	btfsc	status,2,c
  2324  000576  D004               	goto	l487
  2325                           
  2326                           ;doprnt.c: 540: {
  2327                           ;doprnt.c: 541: (putch(c) );
  2328  000578  5041               	movf	printf@c,w,c
  2329  00057A  ECDB  F006         	call	_putch
  2330                           
  2331                           ;doprnt.c: 542: continue;
  2332  00057E  D193               	goto	u1230
  2333  000580                     l487:
  2334                           
  2335                           ;doprnt.c: 543: }
  2336                           ;doprnt.c: 546: width = 0;
  2337  000580  0E00               	movlw	0
  2338  000582  6E40               	movwf	printf@width+1,c
  2339  000584  0E00               	movlw	0
  2340  000586  6E3F               	movwf	printf@width,c
  2341                           
  2342                           ;doprnt.c: 548: flag = 0;
  2343  000588  0E00               	movlw	0
  2344  00058A  6E3E               	movwf	printf@flag,c
  2345                           
  2346                           ;doprnt.c: 551: switch(*f) {
  2347                           
  2348                           ;doprnt.c: 550: for(;;) {
  2349  00058C  D003               	goto	l489
  2350  00058E                     
  2351                           ;doprnt.c: 580: flag |= 0x04;
  2352  00058E  843E               	bsf	printf@flag,2,c
  2353                           
  2354                           ;doprnt.c: 581: f++;
  2355  000590  4A2B               	infsnz	printf@f,f,c
  2356  000592  2A2C               	incf	printf@f+1,f,c
  2357  000594                     l489:
  2358  000594  C02B  FFF6         	movff	printf@f,tblptrl
  2359  000598  C02C  FFF7         	movff	printf@f+1,tblptrh
  2360  00059C                     	if	0	;tblptru may be non-zero
  2361  00059C                     	endif
  2362  00059C                     	if	0	;tblptru may be non-zero
  2363  00059C                     	endif
  2364  00059C  0008               	tblrd		*
  2365  00059E  50F5               	movf	tablat,w,c
  2366                           
  2367                           ; Switch size 1, requested type "space"
  2368                           ; Number of cases is 1, Range of values is 48 to 48
  2369                           ; switch strategies available:
  2370                           ; Name         Instructions Cycles
  2371                           ; simple_byte            4     3 (average)
  2372                           ;	Chosen strategy is simple_byte
  2373  0005A0  0A30               	xorlw	48	; case 48
  2374  0005A2  B4D8               	btfsc	status,2,c
  2375  0005A4  D7F4               	goto	l490
  2376                           
  2377                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2378                           
  2379                           ;doprnt.c: 586: }
  2380                           
  2381                           ;doprnt.c: 585: break;
  2382  0005A6  C02B  FFF6         	movff	printf@f,tblptrl
  2383  0005AA  C02C  FFF7         	movff	printf@f+1,tblptrh
  2384  0005AE                     	if	0	;tblptru may be non-zero
  2385  0005AE                     	endif
  2386  0005AE                     	if	0	;tblptru may be non-zero
  2387  0005AE                     	endif
  2388  0005AE  0008               	tblrd		*
  2389  0005B0  50F5               	movf	tablat,w,c
  2390  0005B2  EC7B  F006         	call	_isdigit
  2391  0005B6  A0D8               	btfss	status,0,c
  2392  0005B8  D03A               	goto	l498
  2393                           
  2394                           ;doprnt.c: 598: width = 0;
  2395  0005BA  0E00               	movlw	0
  2396  0005BC  6E40               	movwf	printf@width+1,c
  2397  0005BE  0E00               	movlw	0
  2398  0005C0  6E3F               	movwf	printf@width,c
  2399  0005C2                     
  2400                           ;doprnt.c: 600: width *= 10;
  2401  0005C2  C03F  F015         	movff	printf@width,___wmul@multiplier
  2402  0005C6  C040  F016         	movff	printf@width+1,___wmul@multiplier+1
  2403  0005CA  0E00               	movlw	0
  2404  0005CC  6E18               	movwf	___wmul@multiplicand+1,c
  2405  0005CE  0E0A               	movlw	10
  2406  0005D0  6E17               	movwf	___wmul@multiplicand,c
  2407  0005D2  EC46  F006         	call	___wmul	;wreg free
  2408  0005D6  C015  F03F         	movff	?___wmul,printf@width
  2409  0005DA  C016  F040         	movff	?___wmul+1,printf@width+1
  2410                           
  2411                           ;doprnt.c: 601: width += *f++ - '0';
  2412  0005DE  0ED0               	movlw	208
  2413  0005E0  6E31               	movwf	??_printf& (0+255),c
  2414  0005E2  0EFF               	movlw	255
  2415  0005E4  6E32               	movwf	(??_printf+1)& (0+255),c
  2416  0005E6  C02B  FFF6         	movff	printf@f,tblptrl
  2417  0005EA  C02C  FFF7         	movff	printf@f+1,tblptrh
  2418  0005EE                     	if	0	;tblptru may be non-zero
  2419  0005EE                     	endif
  2420  0005EE                     	if	0	;tblptru may be non-zero
  2421  0005EE                     	endif
  2422  0005EE  0008               	tblrd		*
  2423  0005F0  50F5               	movf	tablat,w,c
  2424  0005F2  6E33               	movwf	(??_printf+2)& (0+255),c
  2425  0005F4  6A34               	clrf	(??_printf+3)& (0+255),c
  2426  0005F6  5031               	movf	??_printf,w,c
  2427  0005F8  2633               	addwf	??_printf+2,f,c
  2428  0005FA  5032               	movf	??_printf+1,w,c
  2429  0005FC  2234               	addwfc	??_printf+3,f,c
  2430  0005FE  5033               	movf	??_printf+2,w,c
  2431  000600  263F               	addwf	printf@width,f,c
  2432  000602  5034               	movf	??_printf+3,w,c
  2433  000604  2240               	addwfc	printf@width+1,f,c
  2434  000606  4A2B               	infsnz	printf@f,f,c
  2435  000608  2A2C               	incf	printf@f+1,f,c
  2436                           
  2437                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2438  00060A  C02B  FFF6         	movff	printf@f,tblptrl
  2439  00060E  C02C  FFF7         	movff	printf@f+1,tblptrh
  2440  000612                     	if	0	;tblptru may be non-zero
  2441  000612                     	endif
  2442  000612                     	if	0	;tblptru may be non-zero
  2443  000612                     	endif
  2444  000612  0008               	tblrd		*
  2445  000614  50F5               	movf	tablat,w,c
  2446  000616  EC7B  F006         	call	_isdigit
  2447  00061A  A0D8               	btfss	status,0,c
  2448  00061C  D008               	goto	l498
  2449  00061E  D7D1               	goto	l495
  2450  000620                     
  2451                           ;doprnt.c: 643: flag |= 0x10;
  2452  000620  883E               	bsf	printf@flag,4,c
  2453                           
  2454                           ;doprnt.c: 644: goto loop;
  2455  000622  D005               	goto	l498
  2456  000624                     
  2457                           ;doprnt.c: 718: case 'x':
  2458                           ;doprnt.c: 721: flag |= 0x80;
  2459  000624  8E3E               	bsf	printf@flag,7,c
  2460                           
  2461                           ;doprnt.c: 723: break;
  2462  000626  D01D               	goto	l504
  2463  000628                     
  2464                           ;doprnt.c: 818: flag |= 0xC0;
  2465  000628  0EC0               	movlw	192
  2466  00062A  123E               	iorwf	printf@flag,f,c
  2467                           
  2468                           ;doprnt.c: 822: }
  2469                           
  2470                           ;doprnt.c: 819: break;
  2471  00062C  D01A               	goto	l504
  2472  00062E                     l498:
  2473  00062E  C02B  FFF6         	movff	printf@f,tblptrl
  2474  000632  C02C  FFF7         	movff	printf@f+1,tblptrh
  2475  000636  4A2B               	infsnz	printf@f,f,c
  2476  000638  2A2C               	incf	printf@f+1,f,c
  2477  00063A                     	if	0	;tblptru may be non-zero
  2478  00063A                     	endif
  2479  00063A                     	if	0	;tblptru may be non-zero
  2480  00063A                     	endif
  2481  00063A  0008               	tblrd		*
  2482  00063C  CFF5 F041          	movff	tablat,printf@c
  2483  000640  5041               	movf	printf@c,w,c
  2484                           
  2485                           ; Switch size 1, requested type "space"
  2486                           ; Number of cases is 5, Range of values is 0 to 120
  2487                           ; switch strategies available:
  2488                           ; Name         Instructions Cycles
  2489                           ; simple_byte           16     9 (average)
  2490                           ;	Chosen strategy is simple_byte
  2491  000642  0A00               	xorlw	0	; case 0
  2492  000644  B4D8               	btfsc	status,2,c
  2493  000646  0012               	return	
  2494  000648  0A58               	xorlw	88	; case 88
  2495  00064A  B4D8               	btfsc	status,2,c
  2496  00064C  D7EB               	goto	l502
  2497  00064E  0A34               	xorlw	52	; case 108
  2498  000650  B4D8               	btfsc	status,2,c
  2499  000652  D7E6               	goto	l501
  2500  000654  0A19               	xorlw	25	; case 117
  2501  000656  B4D8               	btfsc	status,2,c
  2502  000658  D7E7               	goto	l506
  2503  00065A  0A0D               	xorlw	13	; case 120
  2504  00065C  B4D8               	btfsc	status,2,c
  2505  00065E  D7E2               	goto	l502
  2506  000660  D122               	goto	u1230
  2507  000662                     l504:
  2508                           
  2509                           ;doprnt.c: 1273: {
  2510                           ;doprnt.c: 1281: if(flag & 0x10)
  2511  000662  A83E               	btfss	printf@flag,4,c
  2512  000664  D00E               	goto	l507
  2513                           
  2514                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2515  000666  C036  FFD9         	movff	printf@ap,fsr2l
  2516  00066A  C037  FFDA         	movff	printf@ap+1,fsr2h
  2517  00066E  CFDE F03A          	movff	postinc2,printf@val
  2518  000672  CFDE F03B          	movff	postinc2,printf@val+1
  2519  000676  CFDE F03C          	movff	postinc2,printf@val+2
  2520  00067A  CFDE F03D          	movff	postinc2,printf@val+3
  2521  00067E  0E04               	movlw	4
  2522  000680  D00F               	goto	L5
  2523  000682                     l507:
  2524                           
  2525                           ;doprnt.c: 1283: else
  2526                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2527  000682  C036  FFD9         	movff	printf@ap,fsr2l
  2528  000686  C037  FFDA         	movff	printf@ap+1,fsr2h
  2529  00068A  CFDE F031          	movff	postinc2,??_printf
  2530  00068E  CFDD F032          	movff	postdec2,??_printf+1
  2531  000692  C031  F03A         	movff	??_printf,printf@val
  2532  000696  C032  F03B         	movff	??_printf+1,printf@val+1
  2533  00069A  6A3C               	clrf	printf@val+2,c
  2534  00069C  6A3D               	clrf	printf@val+3,c
  2535  00069E  0E02               	movlw	2
  2536  0006A0                     L5:
  2537  0006A0  2636               	addwf	printf@ap,f,c
  2538  0006A2  0E00               	movlw	0
  2539  0006A4  2237               	addwfc	printf@ap+1,f,c
  2540                           
  2541                           ;doprnt.c: 1287: }
  2542                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2543  0006A6  D03C               	goto	l509
  2544  0006A8                     
  2545                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2546  0006A8  0E01               	movlw	1
  2547  0006AA  6E41               	movwf	printf@c,c
  2548  0006AC                     l2026:
  2549  0006AC  0E0A               	movlw	10
  2550  0006AE  1841               	xorwf	printf@c,w,c
  2551  0006B0  B4D8               	btfsc	status,2,c
  2552  0006B2  D03E               	goto	l514
  2553                           
  2554                           ;doprnt.c: 1306: if(val < dpowers[c])
  2555  0006B4  5041               	movf	printf@c,w,c
  2556  0006B6  0D04               	mullw	4
  2557  0006B8  0EED               	movlw	low _dpowers
  2558  0006BA  24F3               	addwf	prodl,w,c
  2559  0006BC  6EF6               	movwf	tblptrl,c
  2560  0006BE  0E3E               	movlw	high _dpowers
  2561  0006C0  20F4               	addwfc	prodh,w,c
  2562  0006C2  6EF7               	movwf	tblptrh,c
  2563  0006C4                     	if	0	;There are less than 3 active tblptr bytes
  2564  0006C4                     	endif
  2565  0006C4  0009               	tblrd		*+
  2566  0006C6  50F5               	movf	tablat,w,c
  2567  0006C8  5C3A               	subwf	printf@val,w,c
  2568  0006CA  0009               	tblrd		*+
  2569  0006CC  50F5               	movf	tablat,w,c
  2570  0006CE  583B               	subwfb	printf@val+1,w,c
  2571  0006D0  0009               	tblrd		*+
  2572  0006D2  50F5               	movf	tablat,w,c
  2573  0006D4  583C               	subwfb	printf@val+2,w,c
  2574  0006D6  0009               	tblrd		*+
  2575  0006D8  50F5               	movf	tablat,w,c
  2576  0006DA  583D               	subwfb	printf@val+3,w,c
  2577  0006DC  A0D8               	btfss	status,0,c
  2578  0006DE  D028               	goto	l514
  2579                           
  2580                           ;doprnt.c: 1307: break;
  2581  0006E0  2A41               	incf	printf@c,f,c
  2582  0006E2  D7E4               	goto	l2026
  2583  0006E4                     
  2584                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2585  0006E4  0E01               	movlw	1
  2586  0006E6  6E41               	movwf	printf@c,c
  2587  0006E8                     l2040:
  2588  0006E8  0E08               	movlw	8
  2589  0006EA  1841               	xorwf	printf@c,w,c
  2590  0006EC  B4D8               	btfsc	status,2,c
  2591  0006EE  D020               	goto	l514
  2592                           
  2593                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2594  0006F0  5041               	movf	printf@c,w,c
  2595  0006F2  0D04               	mullw	4
  2596  0006F4  0E15               	movlw	low _hexpowers
  2597  0006F6  24F3               	addwf	prodl,w,c
  2598  0006F8  6EF6               	movwf	tblptrl,c
  2599  0006FA  0E3F               	movlw	high _hexpowers
  2600  0006FC  20F4               	addwfc	prodh,w,c
  2601  0006FE  6EF7               	movwf	tblptrh,c
  2602  000700                     	if	0	;There are less than 3 active tblptr bytes
  2603  000700                     	endif
  2604  000700  0009               	tblrd		*+
  2605  000702  50F5               	movf	tablat,w,c
  2606  000704  5C3A               	subwf	printf@val,w,c
  2607  000706  0009               	tblrd		*+
  2608  000708  50F5               	movf	tablat,w,c
  2609  00070A  583B               	subwfb	printf@val+1,w,c
  2610  00070C  0009               	tblrd		*+
  2611  00070E  50F5               	movf	tablat,w,c
  2612  000710  583C               	subwfb	printf@val+2,w,c
  2613  000712  0009               	tblrd		*+
  2614  000714  50F5               	movf	tablat,w,c
  2615  000716  583D               	subwfb	printf@val+3,w,c
  2616  000718  A0D8               	btfss	status,0,c
  2617  00071A  D00A               	goto	l514
  2618                           
  2619                           ;doprnt.c: 1318: break;
  2620  00071C  2A41               	incf	printf@c,f,c
  2621  00071E  D7E4               	goto	l2040
  2622  000720                     l509:
  2623  000720  503E               	movf	printf@flag,w,c
  2624  000722  0BC0               	andlw	192
  2625                           
  2626                           ; Switch size 1, requested type "space"
  2627                           ; Number of cases is 2, Range of values is 128 to 192
  2628                           ; switch strategies available:
  2629                           ; Name         Instructions Cycles
  2630                           ; simple_byte            7     4 (average)
  2631                           ;	Chosen strategy is simple_byte
  2632  000724  0A80               	xorlw	128	; case 128
  2633  000726  B4D8               	btfsc	status,2,c
  2634  000728  D7DD               	goto	l515
  2635  00072A  0A40               	xorlw	64	; case 192
  2636  00072C  B4D8               	btfsc	status,2,c
  2637  00072E  D7BC               	goto	l510
  2638  000730                     l514:
  2639                           
  2640                           ;doprnt.c: 1381: if(width > c)
  2641  000730  0E80               	movlw	128
  2642  000732  BE41               	btfsc	printf@c,7,c
  2643  000734  0E7F               	movlw	127
  2644  000736  6E31               	movwf	??_printf& (0+255),c
  2645  000738  503F               	movf	printf@width,w,c
  2646  00073A  5C41               	subwf	printf@c,w,c
  2647  00073C  5040               	movf	printf@width+1,w,c
  2648  00073E  0A80               	xorlw	128
  2649  000740  5831               	subwfb	??_printf& (0+255),w,c
  2650  000742  B0D8               	btfsc	status,0,c
  2651  000744  D007               	goto	l519
  2652                           
  2653                           ;doprnt.c: 1382: width -= c;
  2654  000746  5041               	movf	printf@c,w,c
  2655  000748  5E3F               	subwf	printf@width,f,c
  2656  00074A  0E00               	movlw	0
  2657  00074C  BE41               	btfsc	printf@c,7,c
  2658  00074E  0EFF               	movlw	255
  2659  000750  5A40               	subwfb	printf@width+1,f,c
  2660  000752  D004               	goto	l520
  2661  000754                     l519:
  2662                           
  2663                           ;doprnt.c: 1383: else
  2664                           ;doprnt.c: 1384: width = 0;
  2665  000754  0E00               	movlw	0
  2666  000756  6E40               	movwf	printf@width+1,c
  2667  000758  0E00               	movlw	0
  2668  00075A  6E3F               	movwf	printf@width,c
  2669  00075C                     l520:
  2670                           
  2671                           ;doprnt.c: 1387: if(flag & 0x04) {
  2672  00075C  A43E               	btfss	printf@flag,2,c
  2673  00075E  D00B               	goto	l521
  2674  000760                     
  2675                           ;doprnt.c: 1415: if(width)
  2676  000760  503F               	movf	printf@width,w,c
  2677  000762  1040               	iorwf	printf@width+1,w,c
  2678  000764  B4D8               	btfsc	status,2,c
  2679  000766  D015               	goto	u1220
  2680                           
  2681                           ;doprnt.c: 1417: (putch('0') );
  2682                           
  2683                           ;doprnt.c: 1416: do
  2684  000768  0E30               	movlw	48
  2685  00076A  ECDB  F006         	call	_putch
  2686                           
  2687                           ;doprnt.c: 1418: while(--width);
  2688  00076E  063F               	decf	printf@width,f,c
  2689  000770  A0D8               	btfss	status,0,c
  2690  000772  0640               	decf	printf@width+1,f,c
  2691  000774  D7F5               	goto	L7
  2692  000776                     l521:
  2693                           
  2694                           ;doprnt.c: 1422: {
  2695                           ;doprnt.c: 1424: if(width
  2696                           ;doprnt.c: 1428: )
  2697  000776  503F               	movf	printf@width,w,c
  2698  000778  1040               	iorwf	printf@width+1,w,c
  2699  00077A  B4D8               	btfsc	status,2,c
  2700  00077C  D00A               	goto	u1220
  2701  00077E                     u1210:
  2702                           
  2703                           ;doprnt.c: 1430: (putch(' ') );
  2704                           
  2705                           ;doprnt.c: 1429: do
  2706  00077E  0E20               	movlw	32
  2707  000780  ECDB  F006         	call	_putch
  2708                           
  2709                           ;doprnt.c: 1431: while(--width);
  2710  000784  063F               	decf	printf@width,f,c
  2711  000786  A0D8               	btfss	status,0,c
  2712  000788  0640               	decf	printf@width+1,f,c
  2713  00078A  503F               	movf	printf@width,w,c
  2714  00078C  1040               	iorwf	printf@width+1,w,c
  2715  00078E  A4D8               	btfss	status,2,c
  2716  000790  D7F6               	goto	u1210
  2717  000792                     u1220:
  2718                           
  2719                           ;doprnt.c: 1469: }
  2720                           ;doprnt.c: 1472: prec = c;
  2721  000792  5041               	movf	printf@c,w,c
  2722  000794  6E38               	movwf	printf@prec,c
  2723  000796  6A39               	clrf	printf@prec+1,c
  2724  000798  BE38               	btfsc	printf@prec,7,c
  2725  00079A  0639               	decf	printf@prec+1,f,c
  2726                           
  2727                           ;doprnt.c: 1474: while(prec--) {
  2728  00079C  D07C               	goto	l529
  2729  00079E                     
  2730                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2731  00079E  C038  F031         	movff	printf@prec,??_printf
  2732  0007A2  C039  F032         	movff	printf@prec+1,??_printf+1
  2733  0007A6  90D8               	bcf	status,0,c
  2734  0007A8  3631               	rlcf	??_printf,f,c
  2735  0007AA  3632               	rlcf	??_printf+1,f,c
  2736  0007AC  90D8               	bcf	status,0,c
  2737  0007AE  3631               	rlcf	??_printf,f,c
  2738  0007B0  3632               	rlcf	??_printf+1,f,c
  2739  0007B2  0EED               	movlw	low _dpowers
  2740  0007B4  2431               	addwf	??_printf,w,c
  2741  0007B6  6EF6               	movwf	tblptrl,c
  2742  0007B8  0E3E               	movlw	high _dpowers
  2743  0007BA  2032               	addwfc	??_printf+1,w,c
  2744  0007BC  6EF7               	movwf	tblptrh,c
  2745  0007BE                     	if	0	;There are less than 3 active tblptr bytes
  2746  0007BE                     	endif
  2747  0007BE  0009               	tblrd		*+
  2748  0007C0  CFF5 F019          	movff	tablat,___lldiv@divisor
  2749  0007C4  0009               	tblrd		*+
  2750  0007C6  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  2751  0007CA  0009               	tblrd		*+
  2752  0007CC  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  2753  0007D0  000A               	tblrd		*-
  2754  0007D2  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  2755  0007D6  C03A  F015         	movff	printf@val,___lldiv@dividend
  2756  0007DA  C03B  F016         	movff	printf@val+1,___lldiv@dividend+1
  2757  0007DE  C03C  F017         	movff	printf@val+2,___lldiv@dividend+2
  2758  0007E2  C03D  F018         	movff	printf@val+3,___lldiv@dividend+3
  2759  0007E6  EC60  F004         	call	___lldiv	;wreg free
  2760  0007EA  C015  F022         	movff	?___lldiv,___llmod@dividend
  2761  0007EE  C016  F023         	movff	?___lldiv+1,___llmod@dividend+1
  2762  0007F2  C017  F024         	movff	?___lldiv+2,___llmod@dividend+2
  2763  0007F6  C018  F025         	movff	?___lldiv+3,___llmod@dividend+3
  2764  0007FA  0E0A               	movlw	10
  2765  0007FC  6E26               	movwf	___llmod@divisor,c
  2766  0007FE  0E00               	movlw	0
  2767  000800  6E27               	movwf	___llmod@divisor+1,c
  2768  000802  0E00               	movlw	0
  2769  000804  6E28               	movwf	___llmod@divisor+2,c
  2770  000806  0E00               	movlw	0
  2771  000808  6E29               	movwf	___llmod@divisor+3,c
  2772  00080A  ECDE  F004         	call	___llmod	;wreg free
  2773  00080E  5022               	movf	?___llmod,w,c
  2774  000810  0F30               	addlw	48
  2775  000812  6E41               	movwf	printf@c,c
  2776                           
  2777                           ;doprnt.c: 1491: break;
  2778  000814  D03D               	goto	l533
  2779  000816                     
  2780                           ;doprnt.c: 1499: {
  2781                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2782  000816  C03A  F015         	movff	printf@val,___lldiv@dividend
  2783  00081A  C03B  F016         	movff	printf@val+1,___lldiv@dividend+1
  2784  00081E  C03C  F017         	movff	printf@val+2,___lldiv@dividend+2
  2785  000822  C03D  F018         	movff	printf@val+3,___lldiv@dividend+3
  2786  000826  C038  F031         	movff	printf@prec,??_printf
  2787  00082A  C039  F032         	movff	printf@prec+1,??_printf+1
  2788  00082E  90D8               	bcf	status,0,c
  2789  000830  3631               	rlcf	??_printf,f,c
  2790  000832  3632               	rlcf	??_printf+1,f,c
  2791  000834  90D8               	bcf	status,0,c
  2792  000836  3631               	rlcf	??_printf,f,c
  2793  000838  3632               	rlcf	??_printf+1,f,c
  2794  00083A  0E15               	movlw	low _hexpowers
  2795  00083C  2431               	addwf	??_printf,w,c
  2796  00083E  6EF6               	movwf	tblptrl,c
  2797  000840  0E3F               	movlw	high _hexpowers
  2798  000842  2032               	addwfc	??_printf+1,w,c
  2799  000844  6EF7               	movwf	tblptrh,c
  2800  000846                     	if	0	;There are less than 3 active tblptr bytes
  2801  000846                     	endif
  2802  000846  0009               	tblrd		*+
  2803  000848  CFF5 F019          	movff	tablat,___lldiv@divisor
  2804  00084C  0009               	tblrd		*+
  2805  00084E  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  2806  000852  0009               	tblrd		*+
  2807  000854  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  2808  000858  000A               	tblrd		*-
  2809  00085A  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  2810  00085E  EC60  F004         	call	___lldiv	;wreg free
  2811  000862  5015               	movf	?___lldiv,w,c
  2812  000864  0B0F               	andlw	15
  2813  000866  6E35               	movwf	printf@idx,c
  2814                           
  2815                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2816  000868  5035               	movf	printf@idx,w,c
  2817  00086A  0D01               	mullw	1
  2818  00086C  0E35               	movlw	low STR_14
  2819  00086E  24F3               	addwf	prodl,w,c
  2820  000870  6EF6               	movwf	tblptrl,c
  2821  000872  0E3F               	movlw	high STR_14
  2822  000874  20F4               	addwfc	prodh,w,c
  2823  000876  6EF7               	movwf	tblptrh,c
  2824  000878                     	if	0	;There are less than 3 active tblptr bytes
  2825  000878                     	endif
  2826  000878  0008               	tblrd		*
  2827  00087A  CFF5 F041          	movff	tablat,printf@c
  2828                           
  2829                           ;doprnt.c: 1523: }
  2830                           
  2831                           ;doprnt.c: 1508: }
  2832                           ;doprnt.c: 1510: break;
  2833  00087E  D008               	goto	l533
  2834  000880                     l2086:
  2835  000880  503E               	movf	printf@flag,w,c
  2836  000882  0BC0               	andlw	192
  2837                           
  2838                           ; Switch size 1, requested type "space"
  2839                           ; Number of cases is 2, Range of values is 128 to 192
  2840                           ; switch strategies available:
  2841                           ; Name         Instructions Cycles
  2842                           ; simple_byte            7     4 (average)
  2843                           ;	Chosen strategy is simple_byte
  2844  000884  0A80               	xorlw	128	; case 128
  2845  000886  B4D8               	btfsc	status,2,c
  2846  000888  D7C6               	goto	l534
  2847  00088A  0A40               	xorlw	64	; case 192
  2848  00088C  B4D8               	btfsc	status,2,c
  2849  00088E  D787               	goto	l532
  2850  000890                     l533:
  2851                           
  2852                           ;doprnt.c: 1524: (putch(c) );
  2853  000890  5041               	movf	printf@c,w,c
  2854  000892  ECDB  F006         	call	_putch
  2855  000896                     l529:
  2856  000896  0638               	decf	printf@prec,f,c
  2857  000898  A0D8               	btfss	status,0,c
  2858  00089A  0639               	decf	printf@prec+1,f,c
  2859  00089C  2838               	incf	printf@prec,w,c
  2860  00089E  E1F0               	bnz	l2086
  2861  0008A0  2839               	incf	printf@prec+1,w,c
  2862  0008A2  A4D8               	btfss	status,2,c
  2863  0008A4  D7ED               	goto	l531
  2864  0008A6                     u1230:
  2865  0008A6  C02B  FFF6         	movff	printf@f,tblptrl
  2866  0008AA  C02C  FFF7         	movff	printf@f+1,tblptrh
  2867  0008AE  4A2B               	infsnz	printf@f,f,c
  2868  0008B0  2A2C               	incf	printf@f+1,f,c
  2869  0008B2                     	if	0	;tblptru may be non-zero
  2870  0008B2                     	endif
  2871  0008B2                     	if	0	;tblptru may be non-zero
  2872  0008B2                     	endif
  2873  0008B2  0008               	tblrd		*
  2874  0008B4  CFF5 F041          	movff	tablat,printf@c
  2875  0008B8  5041               	movf	printf@c,w,c
  2876  0008BA  B4D8               	btfsc	status,2,c
  2877  0008BC  0012               	return	
  2878  0008BE  D658               	goto	l486
  2879  0008C0                     __end_of_printf:
  2880                           	opt stack 0
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           prodh	equ	0xFF4
  2886                           prodl	equ	0xFF3
  2887                           intcon	equ	0xFF2
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1l	equ	0xFE1
  2892                           indf2	equ	0xFDF
  2893                           postinc2	equ	0xFDE
  2894                           postdec2	equ	0xFDD
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _putch *****************
  2900 ;; Defined at:
  2901 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  txData          1    wreg     unsigned char 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  txData          1   21[COMRAM] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2915 ;;      Params:         0       0       0       0
  2916 ;;      Locals:         1       0       0       0
  2917 ;;      Temps:          0       0       0       0
  2918 ;;      Totals:         1       0       0       0
  2919 ;;Total ram usage:        1 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    4
  2922 ;; This function calls:
  2923 ;;		_EUSART1_Write
  2924 ;; This function is called by:
  2925 ;;		_printf
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text6
  2930  000DB6                     __ptext6:
  2931                           	opt stack 0
  2932  000DB6                     _putch:
  2933                           	opt stack 25
  2934                           
  2935                           ;incstack = 0
  2936                           ;putch@txData stored from wreg
  2937  000DB6  6E16               	movwf	putch@txData,c
  2938                           
  2939                           ;eusart1.c: 112: EUSART1_Write(txData);
  2940  000DB8  5016               	movf	putch@txData,w,c
  2941  000DBA  ECC9  F006         	call	_EUSART1_Write
  2942  000DBE  0012               	return		;funcret
  2943  000DC0                     __end_of_putch:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           intcon	equ	0xFF2
  2952                           postinc0	equ	0xFEE
  2953                           wreg	equ	0xFE8
  2954                           postdec1	equ	0xFE5
  2955                           fsr1l	equ	0xFE1
  2956                           indf2	equ	0xFDF
  2957                           postinc2	equ	0xFDE
  2958                           postdec2	equ	0xFDD
  2959                           fsr2h	equ	0xFDA
  2960                           fsr2l	equ	0xFD9
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _EUSART1_Write *****************
  2964 ;; Defined at:
  2965 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  txData          1    wreg     unsigned char 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  txData          1   20[COMRAM] unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2979 ;;      Params:         0       0       0       0
  2980 ;;      Locals:         1       0       0       0
  2981 ;;      Temps:          0       0       0       0
  2982 ;;      Totals:         1       0       0       0
  2983 ;;Total ram usage:        1 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    3
  2986 ;; This function calls:
  2987 ;;		Nothing
  2988 ;; This function is called by:
  2989 ;;		_putch
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text7
  2994  000D92                     __ptext7:
  2995                           	opt stack 0
  2996  000D92                     _EUSART1_Write:
  2997                           	opt stack 25
  2998                           
  2999                           ;incstack = 0
  3000                           ;EUSART1_Write@txData stored from wreg
  3001  000D92  6E15               	movwf	EUSART1_Write@txData,c
  3002  000D94                     
  3003                           ;eusart1.c: 99: {
  3004                           
  3005                           ;eusart1.c: 98: while(0 == PIR1bits.TX1IF)
  3006  000D94  A89E               	btfss	3998,4,c	;volatile
  3007  000D96  D7FE               	goto	l1786
  3008                           
  3009                           ;eusart1.c: 100: }
  3010                           ;eusart1.c: 102: TXREG1 = txData;
  3011  000D98  C015  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3012  000D9C  0012               	return		;funcret
  3013  000D9E                     __end_of_EUSART1_Write:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           intcon	equ	0xFF2
  3022                           postinc0	equ	0xFEE
  3023                           wreg	equ	0xFE8
  3024                           postdec1	equ	0xFE5
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           fsr2h	equ	0xFDA
  3030                           fsr2l	equ	0xFD9
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _isdigit *****************
  3034 ;; Defined at:
  3035 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  c               1    wreg     unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  c               1   22[COMRAM] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;		None               void
  3042 ;; Registers used:
  3043 ;;		wreg, status,2, status,0
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3049 ;;      Params:         0       0       0       0
  3050 ;;      Locals:         2       0       0       0
  3051 ;;      Temps:          1       0       0       0
  3052 ;;      Totals:         3       0       0       0
  3053 ;;Total ram usage:        3 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    3
  3056 ;; This function calls:
  3057 ;;		Nothing
  3058 ;; This function is called by:
  3059 ;;		_printf
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text8
  3064  000CF6                     __ptext8:
  3065                           	opt stack 0
  3066  000CF6                     _isdigit:
  3067                           	opt stack 26
  3068                           
  3069                           ;incstack = 0
  3070                           ;isdigit@c stored from wreg
  3071  000CF6  6E17               	movwf	isdigit@c,c
  3072  000CF8  0E00               	movlw	0
  3073  000CFA  6E16               	movwf	_isdigit$1995,c
  3074  000CFC  0E3A               	movlw	58
  3075  000CFE  6017               	cpfslt	isdigit@c,c
  3076  000D00  D005               	goto	l867
  3077  000D02  0E2F               	movlw	47
  3078  000D04  6417               	cpfsgt	isdigit@c,c
  3079  000D06  D002               	goto	l867
  3080  000D08  0E01               	movlw	1
  3081  000D0A  6E16               	movwf	_isdigit$1995,c
  3082  000D0C                     l867:
  3083  000D0C  C016  F015         	movff	_isdigit$1995,??_isdigit
  3084  000D10  3015               	rrcf	??_isdigit,w,c
  3085  000D12  0012               	return	
  3086  000D14                     __end_of_isdigit:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           intcon	equ	0xFF2
  3095                           postinc0	equ	0xFEE
  3096                           wreg	equ	0xFE8
  3097                           postdec1	equ	0xFE5
  3098                           fsr1l	equ	0xFE1
  3099                           indf2	equ	0xFDF
  3100                           postinc2	equ	0xFDE
  3101                           postdec2	equ	0xFDD
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function ___wmul *****************
  3107 ;; Defined at:
  3108 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  multiplier      2   20[COMRAM] unsigned int 
  3111 ;;  multiplicand    2   22[COMRAM] unsigned int 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  product         2   24[COMRAM] unsigned int 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  2   20[COMRAM] unsigned int 
  3116 ;; Registers used:
  3117 ;;		wreg, status,2, status,0, prodl, prodh
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3123 ;;      Params:         4       0       0       0
  3124 ;;      Locals:         2       0       0       0
  3125 ;;      Temps:          0       0       0       0
  3126 ;;      Totals:         6       0       0       0
  3127 ;;Total ram usage:        6 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    3
  3130 ;; This function calls:
  3131 ;;		Nothing
  3132 ;; This function is called by:
  3133 ;;		_printf
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text9
  3138  000C8C                     __ptext9:
  3139                           	opt stack 0
  3140  000C8C                     ___wmul:
  3141                           	opt stack 26
  3142                           
  3143                           ;incstack = 0
  3144  000C8C  5015               	movf	___wmul@multiplier,w,c
  3145  000C8E  0217               	mulwf	___wmul@multiplicand,c
  3146  000C90  CFF3 F019          	movff	prodl,___wmul@product
  3147  000C94  CFF4 F01A          	movff	prodh,___wmul@product+1
  3148  000C98  5015               	movf	___wmul@multiplier,w,c
  3149  000C9A  0218               	mulwf	___wmul@multiplicand+1,c
  3150  000C9C  50F3               	movf	prodl,w,c
  3151  000C9E  261A               	addwf	___wmul@product+1,f,c
  3152  000CA0  5016               	movf	___wmul@multiplier+1,w,c
  3153  000CA2  0217               	mulwf	___wmul@multiplicand,c
  3154  000CA4  50F3               	movf	prodl,w,c
  3155  000CA6  261A               	addwf	___wmul@product+1,f,c
  3156  000CA8  C019  F015         	movff	___wmul@product,?___wmul
  3157  000CAC  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  3158  000CB0  0012               	return	
  3159  000CB2                     __end_of___wmul:
  3160                           	opt stack 0
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           postdec1	equ	0xFE5
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function ___llmod *****************
  3180 ;; Defined at:
  3181 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  dividend        4   33[COMRAM] unsigned long 
  3184 ;;  divisor         4   37[COMRAM] unsigned long 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  counter         1   41[COMRAM] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  4   33[COMRAM] unsigned long 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3196 ;;      Params:         8       0       0       0
  3197 ;;      Locals:         1       0       0       0
  3198 ;;      Temps:          0       0       0       0
  3199 ;;      Totals:         9       0       0       0
  3200 ;;Total ram usage:        9 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    3
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_printf
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text10
  3211  0009BC                     __ptext10:
  3212                           	opt stack 0
  3213  0009BC                     ___llmod:
  3214                           	opt stack 26
  3215                           
  3216                           ;incstack = 0
  3217  0009BC  5026               	movf	___llmod@divisor,w,c
  3218  0009BE  1027               	iorwf	___llmod@divisor+1,w,c
  3219  0009C0  1028               	iorwf	___llmod@divisor+2,w,c
  3220  0009C2  1029               	iorwf	___llmod@divisor+3,w,c
  3221  0009C4  B4D8               	btfsc	status,2,c
  3222  0009C6  D024               	goto	l908
  3223  0009C8  0E01               	movlw	1
  3224  0009CA  6E2A               	movwf	___llmod@counter,c
  3225  0009CC  D006               	goto	l903
  3226  0009CE  90D8               	bcf	status,0,c
  3227  0009D0  3626               	rlcf	___llmod@divisor,f,c
  3228  0009D2  3627               	rlcf	___llmod@divisor+1,f,c
  3229  0009D4  3628               	rlcf	___llmod@divisor+2,f,c
  3230  0009D6  3629               	rlcf	___llmod@divisor+3,f,c
  3231  0009D8  2A2A               	incf	___llmod@counter,f,c
  3232  0009DA                     l903:
  3233  0009DA  AE29               	btfss	___llmod@divisor+3,7,c
  3234  0009DC  D7F8               	goto	l904
  3235  0009DE                     u980:
  3236  0009DE  5026               	movf	___llmod@divisor,w,c
  3237  0009E0  5C22               	subwf	___llmod@dividend,w,c
  3238  0009E2  5027               	movf	___llmod@divisor+1,w,c
  3239  0009E4  5823               	subwfb	___llmod@dividend+1,w,c
  3240  0009E6  5028               	movf	___llmod@divisor+2,w,c
  3241  0009E8  5824               	subwfb	___llmod@dividend+2,w,c
  3242  0009EA  5029               	movf	___llmod@divisor+3,w,c
  3243  0009EC  5825               	subwfb	___llmod@dividend+3,w,c
  3244  0009EE  A0D8               	btfss	status,0,c
  3245  0009F0  D008               	goto	l907
  3246  0009F2  5026               	movf	___llmod@divisor,w,c
  3247  0009F4  5E22               	subwf	___llmod@dividend,f,c
  3248  0009F6  5027               	movf	___llmod@divisor+1,w,c
  3249  0009F8  5A23               	subwfb	___llmod@dividend+1,f,c
  3250  0009FA  5028               	movf	___llmod@divisor+2,w,c
  3251  0009FC  5A24               	subwfb	___llmod@dividend+2,f,c
  3252  0009FE  5029               	movf	___llmod@divisor+3,w,c
  3253  000A00  5A25               	subwfb	___llmod@dividend+3,f,c
  3254  000A02                     l907:
  3255  000A02  90D8               	bcf	status,0,c
  3256  000A04  3229               	rrcf	___llmod@divisor+3,f,c
  3257  000A06  3228               	rrcf	___llmod@divisor+2,f,c
  3258  000A08  3227               	rrcf	___llmod@divisor+1,f,c
  3259  000A0A  3226               	rrcf	___llmod@divisor,f,c
  3260  000A0C  2E2A               	decfsz	___llmod@counter,f,c
  3261  000A0E  D7E7               	goto	u980
  3262  000A10                     l908:
  3263  000A10  C022  F022         	movff	___llmod@dividend,?___llmod
  3264  000A14  C023  F023         	movff	___llmod@dividend+1,?___llmod+1
  3265  000A18  C024  F024         	movff	___llmod@dividend+2,?___llmod+2
  3266  000A1C  C025  F025         	movff	___llmod@dividend+3,?___llmod+3
  3267  000A20  0012               	return		;funcret
  3268  000A22                     __end_of___llmod:
  3269                           	opt stack 0
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           intcon	equ	0xFF2
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           postdec1	equ	0xFE5
  3280                           fsr1l	equ	0xFE1
  3281                           indf2	equ	0xFDF
  3282                           postinc2	equ	0xFDE
  3283                           postdec2	equ	0xFDD
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function ___lldiv *****************
  3289 ;; Defined at:
  3290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  dividend        4   20[COMRAM] unsigned long 
  3293 ;;  divisor         4   24[COMRAM] unsigned long 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  quotient        4   28[COMRAM] unsigned long 
  3296 ;;  counter         1   32[COMRAM] unsigned char 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  4   20[COMRAM] unsigned long 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, status,0
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3306 ;;      Params:         8       0       0       0
  3307 ;;      Locals:         5       0       0       0
  3308 ;;      Temps:          0       0       0       0
  3309 ;;      Totals:        13       0       0       0
  3310 ;;Total ram usage:       13 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    3
  3313 ;; This function calls:
  3314 ;;		Nothing
  3315 ;; This function is called by:
  3316 ;;		_printf
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text11
  3321  0008C0                     __ptext11:
  3322                           	opt stack 0
  3323  0008C0                     ___lldiv:
  3324                           	opt stack 26
  3325                           
  3326                           ;incstack = 0
  3327  0008C0  0E00               	movlw	0
  3328  0008C2  6E1D               	movwf	___lldiv@quotient,c
  3329  0008C4  0E00               	movlw	0
  3330  0008C6  6E1E               	movwf	___lldiv@quotient+1,c
  3331  0008C8  0E00               	movlw	0
  3332  0008CA  6E1F               	movwf	___lldiv@quotient+2,c
  3333  0008CC  0E00               	movlw	0
  3334  0008CE  6E20               	movwf	___lldiv@quotient+3,c
  3335  0008D0  5019               	movf	___lldiv@divisor,w,c
  3336  0008D2  101A               	iorwf	___lldiv@divisor+1,w,c
  3337  0008D4  101B               	iorwf	___lldiv@divisor+2,w,c
  3338  0008D6  101C               	iorwf	___lldiv@divisor+3,w,c
  3339  0008D8  B4D8               	btfsc	status,2,c
  3340  0008DA  D02A               	goto	l898
  3341  0008DC  0E01               	movlw	1
  3342  0008DE  6E21               	movwf	___lldiv@counter,c
  3343  0008E0  D006               	goto	l893
  3344  0008E2  90D8               	bcf	status,0,c
  3345  0008E4  3619               	rlcf	___lldiv@divisor,f,c
  3346  0008E6  361A               	rlcf	___lldiv@divisor+1,f,c
  3347  0008E8  361B               	rlcf	___lldiv@divisor+2,f,c
  3348  0008EA  361C               	rlcf	___lldiv@divisor+3,f,c
  3349  0008EC  2A21               	incf	___lldiv@counter,f,c
  3350  0008EE                     l893:
  3351  0008EE  AE1C               	btfss	___lldiv@divisor+3,7,c
  3352  0008F0  D7F8               	goto	l894
  3353  0008F2                     u950:
  3354  0008F2  90D8               	bcf	status,0,c
  3355  0008F4  361D               	rlcf	___lldiv@quotient,f,c
  3356  0008F6  361E               	rlcf	___lldiv@quotient+1,f,c
  3357  0008F8  361F               	rlcf	___lldiv@quotient+2,f,c
  3358  0008FA  3620               	rlcf	___lldiv@quotient+3,f,c
  3359  0008FC  5019               	movf	___lldiv@divisor,w,c
  3360  0008FE  5C15               	subwf	___lldiv@dividend,w,c
  3361  000900  501A               	movf	___lldiv@divisor+1,w,c
  3362  000902  5816               	subwfb	___lldiv@dividend+1,w,c
  3363  000904  501B               	movf	___lldiv@divisor+2,w,c
  3364  000906  5817               	subwfb	___lldiv@dividend+2,w,c
  3365  000908  501C               	movf	___lldiv@divisor+3,w,c
  3366  00090A  5818               	subwfb	___lldiv@dividend+3,w,c
  3367  00090C  A0D8               	btfss	status,0,c
  3368  00090E  D009               	goto	l897
  3369  000910  5019               	movf	___lldiv@divisor,w,c
  3370  000912  5E15               	subwf	___lldiv@dividend,f,c
  3371  000914  501A               	movf	___lldiv@divisor+1,w,c
  3372  000916  5A16               	subwfb	___lldiv@dividend+1,f,c
  3373  000918  501B               	movf	___lldiv@divisor+2,w,c
  3374  00091A  5A17               	subwfb	___lldiv@dividend+2,f,c
  3375  00091C  501C               	movf	___lldiv@divisor+3,w,c
  3376  00091E  5A18               	subwfb	___lldiv@dividend+3,f,c
  3377  000920  801D               	bsf	___lldiv@quotient,0,c
  3378  000922                     l897:
  3379  000922  90D8               	bcf	status,0,c
  3380  000924  321C               	rrcf	___lldiv@divisor+3,f,c
  3381  000926  321B               	rrcf	___lldiv@divisor+2,f,c
  3382  000928  321A               	rrcf	___lldiv@divisor+1,f,c
  3383  00092A  3219               	rrcf	___lldiv@divisor,f,c
  3384  00092C  2E21               	decfsz	___lldiv@counter,f,c
  3385  00092E  D7E1               	goto	u950
  3386  000930                     l898:
  3387  000930  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  3388  000934  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  3389  000938  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  3390  00093C  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  3391  000940  0012               	return		;funcret
  3392  000942                     __end_of___lldiv:
  3393                           	opt stack 0
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           prodh	equ	0xFF4
  3399                           prodl	equ	0xFF3
  3400                           intcon	equ	0xFF2
  3401                           postinc0	equ	0xFEE
  3402                           wreg	equ	0xFE8
  3403                           postdec1	equ	0xFE5
  3404                           fsr1l	equ	0xFE1
  3405                           indf2	equ	0xFDF
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _pi_supply_on *****************
  3413 ;; Defined at:
  3414 ;;		line 484 in file "main.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		None
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3428 ;;      Params:         0       0       0       0
  3429 ;;      Locals:         0       0       0       0
  3430 ;;      Temps:          0       0       0       0
  3431 ;;      Totals:         0       0       0       0
  3432 ;;Total ram usage:        0 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    3
  3435 ;; This function calls:
  3436 ;;		Nothing
  3437 ;; This function is called by:
  3438 ;;		_main
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text12
  3443  000DCE                     __ptext12:
  3444                           	opt stack 0
  3445  000DCE                     _pi_supply_on:
  3446                           	opt stack 27
  3447                           
  3448                           ;incstack = 0
  3449                           ;main.c: 487: do { LATDbits.LATD2 = 1; } while(0);
  3450  000DCE  848C               	bsf	3980,2,c	;volatile
  3451  000DD0  0012               	return	
  3452  000DD2                     __end_of_pi_supply_on:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function _pi_supply_off *****************
  3473 ;; Defined at:
  3474 ;;		line 478 in file "main.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		None
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3488 ;;      Params:         0       0       0       0
  3489 ;;      Locals:         0       0       0       0
  3490 ;;      Temps:          0       0       0       0
  3491 ;;      Totals:         0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    3
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text13
  3503  000DD2                     __ptext13:
  3504                           	opt stack 0
  3505  000DD2                     _pi_supply_off:
  3506                           	opt stack 27
  3507                           
  3508                           ;incstack = 0
  3509                           ;main.c: 481: do { LATDbits.LATD2 = 0; } while(0);
  3510  000DD2  948C               	bcf	3980,2,c	;volatile
  3511  000DD4  0012               	return	
  3512  000DD6                     __end_of_pi_supply_off:
  3513                           	opt stack 0
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           prodh	equ	0xFF4
  3519                           prodl	equ	0xFF3
  3520                           intcon	equ	0xFF2
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           postdec1	equ	0xFE5
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function ___lmul *****************
  3533 ;; Defined at:
  3534 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  multiplier      4   20[COMRAM] unsigned long 
  3537 ;;  multiplicand    4   24[COMRAM] unsigned long 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  product         4   28[COMRAM] unsigned long 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  4   20[COMRAM] unsigned long 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3549 ;;      Params:         8       0       0       0
  3550 ;;      Locals:         4       0       0       0
  3551 ;;      Temps:          0       0       0       0
  3552 ;;      Totals:        12       0       0       0
  3553 ;;Total ram usage:       12 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    3
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_main
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text14
  3564  000AE4                     __ptext14:
  3565                           	opt stack 0
  3566  000AE4                     ___lmul:
  3567                           	opt stack 27
  3568                           
  3569                           ;incstack = 0
  3570  000AE4  0E00               	movlw	0
  3571  000AE6  6E1D               	movwf	___lmul@product,c
  3572  000AE8  0E00               	movlw	0
  3573  000AEA  6E1E               	movwf	___lmul@product+1,c
  3574  000AEC  0E00               	movlw	0
  3575  000AEE  6E1F               	movwf	___lmul@product+2,c
  3576  000AF0  0E00               	movlw	0
  3577  000AF2  6E20               	movwf	___lmul@product+3,c
  3578  000AF4  A015               	btfss	___lmul@multiplier,0,c
  3579  000AF6  D008               	goto	l550
  3580  000AF8  5019               	movf	___lmul@multiplicand,w,c
  3581  000AFA  261D               	addwf	___lmul@product,f,c
  3582  000AFC  501A               	movf	___lmul@multiplicand+1,w,c
  3583  000AFE  221E               	addwfc	___lmul@product+1,f,c
  3584  000B00  501B               	movf	___lmul@multiplicand+2,w,c
  3585  000B02  221F               	addwfc	___lmul@product+2,f,c
  3586  000B04  501C               	movf	___lmul@multiplicand+3,w,c
  3587  000B06  2220               	addwfc	___lmul@product+3,f,c
  3588  000B08                     l550:
  3589  000B08  90D8               	bcf	status,0,c
  3590  000B0A  3619               	rlcf	___lmul@multiplicand,f,c
  3591  000B0C  361A               	rlcf	___lmul@multiplicand+1,f,c
  3592  000B0E  361B               	rlcf	___lmul@multiplicand+2,f,c
  3593  000B10  361C               	rlcf	___lmul@multiplicand+3,f,c
  3594  000B12  90D8               	bcf	status,0,c
  3595  000B14  3218               	rrcf	___lmul@multiplier+3,f,c
  3596  000B16  3217               	rrcf	___lmul@multiplier+2,f,c
  3597  000B18  3216               	rrcf	___lmul@multiplier+1,f,c
  3598  000B1A  3215               	rrcf	___lmul@multiplier,f,c
  3599  000B1C  5015               	movf	___lmul@multiplier,w,c
  3600  000B1E  1016               	iorwf	___lmul@multiplier+1,w,c
  3601  000B20  1017               	iorwf	___lmul@multiplier+2,w,c
  3602  000B22  1018               	iorwf	___lmul@multiplier+3,w,c
  3603  000B24  A4D8               	btfss	status,2,c
  3604  000B26  D7E6               	goto	l549
  3605  000B28  C01D  F015         	movff	___lmul@product,?___lmul
  3606  000B2C  C01E  F016         	movff	___lmul@product+1,?___lmul+1
  3607  000B30  C01F  F017         	movff	___lmul@product+2,?___lmul+2
  3608  000B34  C020  F018         	movff	___lmul@product+3,?___lmul+3
  3609  000B38  0012               	return		;funcret
  3610  000B3A                     __end_of___lmul:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           intcon	equ	0xFF2
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _TMR5_HasOverflowOccured *****************
  3631 ;; Defined at:
  3632 ;;		line 153 in file "mcc_generated_files/tmr5.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      unsigned char 
  3639 ;; Registers used:
  3640 ;;		wreg
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3646 ;;      Params:         0       0       0       0
  3647 ;;      Locals:         0       0       0       0
  3648 ;;      Temps:          0       0       0       0
  3649 ;;      Totals:         0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    3
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text15
  3661  000D9E                     __ptext15:
  3662                           	opt stack 0
  3663  000D9E                     _TMR5_HasOverflowOccured:
  3664                           	opt stack 27
  3665                           
  3666                           ;tmr5.c: 156: return(PIR5bits.TMR5IF);
  3667                           
  3668                           ;incstack = 0
  3669  000D9E  A27E               	btfss	3966,1,c	;volatile
  3670  000DA0  D002               	goto	u1020
  3671  000DA2  0E01               	movlw	1
  3672  000DA4  0012               	return	
  3673  000DA6                     u1020:
  3674  000DA6  0E00               	movlw	0
  3675  000DA8  0012               	return	
  3676  000DAA                     __end_of_TMR5_HasOverflowOccured:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           intcon	equ	0xFF2
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           postdec1	equ	0xFE5
  3688                           fsr1l	equ	0xFE1
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _TMR0_HasOverflowOccured *****************
  3697 ;; Defined at:
  3698 ;;		line 124 in file "mcc_generated_files/tmr0.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      unsigned char 
  3705 ;; Registers used:
  3706 ;;		wreg
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3712 ;;      Params:         0       0       0       0
  3713 ;;      Locals:         0       0       0       0
  3714 ;;      Temps:          0       0       0       0
  3715 ;;      Totals:         0       0       0       0
  3716 ;;Total ram usage:        0 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    3
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_main
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text16
  3727  000DAA                     __ptext16:
  3728                           	opt stack 0
  3729  000DAA                     _TMR0_HasOverflowOccured:
  3730                           	opt stack 27
  3731                           
  3732                           ;tmr0.c: 127: return(INTCONbits.TMR0IF);
  3733                           
  3734                           ;incstack = 0
  3735  000DAA  A4F2               	btfss	intcon,2,c	;volatile
  3736  000DAC  D002               	goto	u1010
  3737  000DAE  0E01               	movlw	1
  3738  000DB0  0012               	return	
  3739  000DB2                     u1010:
  3740  000DB2  0E00               	movlw	0
  3741  000DB4  0012               	return	
  3742  000DB6                     __end_of_TMR0_HasOverflowOccured:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           intcon	equ	0xFF2
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           postdec1	equ	0xFE5
  3754                           fsr1l	equ	0xFE1
  3755                           indf2	equ	0xFDF
  3756                           postinc2	equ	0xFDE
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _SYSTEM_Initialize *****************
  3763 ;; Defined at:
  3764 ;;		line 105 in file "mcc_generated_files/mcc.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      void 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3778 ;;      Params:         0       0       0       0
  3779 ;;      Locals:         0       0       0       0
  3780 ;;      Temps:          0       0       0       0
  3781 ;;      Totals:         0       0       0       0
  3782 ;;Total ram usage:        0 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    5
  3785 ;; This function calls:
  3786 ;;		_ADC_Initialize
  3787 ;;		_EUSART1_Initialize
  3788 ;;		_I2C2_Initialize
  3789 ;;		_INTERRUPT_Initialize
  3790 ;;		_OSCILLATOR_Initialize
  3791 ;;		_PIN_MANAGER_Initialize
  3792 ;;		_TMR0_Initialize
  3793 ;;		_TMR5_Initialize
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text17
  3800  000CB2                     __ptext17:
  3801                           	opt stack 0
  3802  000CB2                     _SYSTEM_Initialize:
  3803                           	opt stack 25
  3804                           
  3805                           ;mcc.c: 108: INTERRUPT_Initialize();
  3806                           
  3807                           ;incstack = 0
  3808  000CB2  ECED  F006         	call	_INTERRUPT_Initialize	;wreg free
  3809                           
  3810                           ;mcc.c: 109: PIN_MANAGER_Initialize();
  3811  000CB6  ECEF  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  3812                           
  3813                           ;mcc.c: 110: OSCILLATOR_Initialize();
  3814  000CBA  ECBB  F006         	call	_OSCILLATOR_Initialize	;wreg free
  3815                           
  3816                           ;mcc.c: 111: I2C2_Initialize();
  3817  000CBE  EC8A  F006         	call	_I2C2_Initialize	;wreg free
  3818                           
  3819                           ;mcc.c: 112: ADC_Initialize();
  3820  000CC2  ECB0  F006         	call	_ADC_Initialize	;wreg free
  3821                           
  3822                           ;mcc.c: 113: TMR5_Initialize();
  3823  000CC6  EC6A  F006         	call	_TMR5_Initialize	;wreg free
  3824                           
  3825                           ;mcc.c: 114: TMR0_Initialize();
  3826  000CCA  EC99  F006         	call	_TMR0_Initialize	;wreg free
  3827                           
  3828                           ;mcc.c: 115: EUSART1_Initialize();
  3829  000CCE  ECA5  F006         	call	_EUSART1_Initialize	;wreg free
  3830  000CD2  0012               	return		;funcret
  3831  000CD4                     __end_of_SYSTEM_Initialize:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           prodh	equ	0xFF4
  3838                           prodl	equ	0xFF3
  3839                           intcon	equ	0xFF2
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           postdec1	equ	0xFE5
  3843                           fsr1l	equ	0xFE1
  3844                           indf2	equ	0xFDF
  3845                           postinc2	equ	0xFDE
  3846                           postdec2	equ	0xFDD
  3847                           fsr2h	equ	0xFDA
  3848                           fsr2l	equ	0xFD9
  3849                           status	equ	0xFD8
  3850                           
  3851 ;; *************** function _TMR5_Initialize *****************
  3852 ;; Defined at:
  3853 ;;		line 62 in file "mcc_generated_files/tmr5.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;		None
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;		None
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, status,2, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3867 ;;      Params:         0       0       0       0
  3868 ;;      Locals:         0       0       0       0
  3869 ;;      Temps:          0       0       0       0
  3870 ;;      Totals:         0       0       0       0
  3871 ;;Total ram usage:        0 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    4
  3874 ;; This function calls:
  3875 ;;		_TMR5_StartTimer
  3876 ;; This function is called by:
  3877 ;;		_SYSTEM_Initialize
  3878 ;;		_main
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text18
  3883  000CD4                     __ptext18:
  3884                           	opt stack 0
  3885  000CD4                     _TMR5_Initialize:
  3886                           	opt stack 26
  3887                           
  3888                           ;tmr5.c: 67: T5CON = 0x30;
  3889                           
  3890                           ;incstack = 0
  3891  000CD4  0E30               	movlw	48
  3892  000CD6  010F               	movlb	15	; () banked
  3893  000CD8  6F4E               	movwf	78,b	;volatile
  3894                           
  3895                           ;tmr5.c: 70: T5GCON = 0x00;
  3896  000CDA  0E00               	movlw	0
  3897  000CDC  6F4D               	movwf	77,b	;volatile
  3898                           
  3899                           ;tmr5.c: 73: TMR5H = 0x3C;
  3900  000CDE  0E3C               	movlw	60
  3901  000CE0  6F50               	movwf	80,b	;volatile
  3902                           
  3903                           ;tmr5.c: 76: TMR5L = 0xB0;
  3904  000CE2  0EB0               	movlw	176
  3905  000CE4  6F4F               	movwf	79,b	;volatile
  3906                           
  3907                           ; BSR set to: 15
  3908                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
  3909  000CE6  CF4F F044          	movff	3919,_timer5ReloadVal	;volatile
  3910  000CEA  CF50 F045          	movff	3920,_timer5ReloadVal+1	;volatile
  3911                           
  3912                           ; BSR set to: 15
  3913                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
  3914  000CEE  927E               	bcf	3966,1,c	;volatile
  3915                           
  3916                           ; BSR set to: 15
  3917                           ;tmr5.c: 85: TMR5_StartTimer();
  3918  000CF0  ECE0  F006         	call	_TMR5_StartTimer	;wreg free
  3919  000CF4  0012               	return		;funcret
  3920  000CF6                     __end_of_TMR5_Initialize:
  3921                           	opt stack 0
  3922                           tblptru	equ	0xFF8
  3923                           tblptrh	equ	0xFF7
  3924                           tblptrl	equ	0xFF6
  3925                           tablat	equ	0xFF5
  3926                           prodh	equ	0xFF4
  3927                           prodl	equ	0xFF3
  3928                           intcon	equ	0xFF2
  3929                           postinc0	equ	0xFEE
  3930                           wreg	equ	0xFE8
  3931                           postdec1	equ	0xFE5
  3932                           fsr1l	equ	0xFE1
  3933                           indf2	equ	0xFDF
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _TMR5_StartTimer *****************
  3941 ;; Defined at:
  3942 ;;		line 88 in file "mcc_generated_files/tmr5.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		None
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3956 ;;      Params:         0       0       0       0
  3957 ;;      Locals:         0       0       0       0
  3958 ;;      Temps:          0       0       0       0
  3959 ;;      Totals:         0       0       0       0
  3960 ;;Total ram usage:        0 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    3
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_TMR5_Initialize
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text19
  3971  000DC0                     __ptext19:
  3972                           	opt stack 0
  3973  000DC0                     _TMR5_StartTimer:
  3974                           	opt stack 26
  3975                           
  3976                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
  3977                           
  3978                           ;incstack = 0
  3979  000DC0  010F               	movlb	15	; () banked
  3980  000DC2  814E               	bsf	78,0,b	;volatile
  3981                           
  3982                           ; BSR set to: 15
  3983  000DC4  0012               	return		;funcret
  3984  000DC6                     __end_of_TMR5_StartTimer:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           intcon	equ	0xFF2
  3993                           postinc0	equ	0xFEE
  3994                           wreg	equ	0xFE8
  3995                           postdec1	equ	0xFE5
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function _TMR0_Initialize *****************
  4005 ;; Defined at:
  4006 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4020 ;;      Params:         0       0       0       0
  4021 ;;      Locals:         0       0       0       0
  4022 ;;      Temps:          0       0       0       0
  4023 ;;      Totals:         0       0       0       0
  4024 ;;Total ram usage:        0 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    4
  4027 ;; This function calls:
  4028 ;;		_TMR0_StartTimer
  4029 ;; This function is called by:
  4030 ;;		_SYSTEM_Initialize
  4031 ;;		_main
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text20
  4036  000D32                     __ptext20:
  4037                           	opt stack 0
  4038  000D32                     _TMR0_Initialize:
  4039                           	opt stack 26
  4040                           
  4041                           ;tmr0.c: 70: T0CON = 0x7F;
  4042                           
  4043                           ; BSR set to: 15
  4044                           ;incstack = 0
  4045  000D32  0E7F               	movlw	127
  4046  000D34  6ED5               	movwf	4053,c	;volatile
  4047                           
  4048                           ;tmr0.c: 73: TMR0H = 0x00;
  4049  000D36  0E00               	movlw	0
  4050  000D38  6ED7               	movwf	4055,c	;volatile
  4051                           
  4052                           ;tmr0.c: 76: TMR0L = 0xFC;
  4053  000D3A  0EFC               	movlw	252
  4054  000D3C  6ED6               	movwf	4054,c	;volatile
  4055                           
  4056                           ;tmr0.c: 79: timer0ReloadVal = 252;
  4057  000D3E  0EFC               	movlw	252
  4058  000D40  6E46               	movwf	_timer0ReloadVal,c	;volatile
  4059                           
  4060                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
  4061  000D42  94F2               	bcf	intcon,2,c	;volatile
  4062                           
  4063                           ;tmr0.c: 86: TMR0_StartTimer();
  4064  000D44  ECEB  F006         	call	_TMR0_StartTimer	;wreg free
  4065  000D48  0012               	return		;funcret
  4066  000D4A                     __end_of_TMR0_Initialize:
  4067                           	opt stack 0
  4068                           tblptru	equ	0xFF8
  4069                           tblptrh	equ	0xFF7
  4070                           tblptrl	equ	0xFF6
  4071                           tablat	equ	0xFF5
  4072                           prodh	equ	0xFF4
  4073                           prodl	equ	0xFF3
  4074                           intcon	equ	0xFF2
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postdec1	equ	0xFE5
  4078                           fsr1l	equ	0xFE1
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           fsr2h	equ	0xFDA
  4083                           fsr2l	equ	0xFD9
  4084                           status	equ	0xFD8
  4085                           
  4086 ;; *************** function _TMR0_StartTimer *****************
  4087 ;; Defined at:
  4088 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		None
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4102 ;;      Params:         0       0       0       0
  4103 ;;      Locals:         0       0       0       0
  4104 ;;      Temps:          0       0       0       0
  4105 ;;      Totals:         0       0       0       0
  4106 ;;Total ram usage:        0 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    3
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_TMR0_Initialize
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text21
  4117  000DD6                     __ptext21:
  4118                           	opt stack 0
  4119  000DD6                     _TMR0_StartTimer:
  4120                           	opt stack 26
  4121                           
  4122                           ;tmr0.c: 92: T0CONbits.TMR0ON = 1;
  4123                           
  4124                           ;incstack = 0
  4125  000DD6  8ED5               	bsf	4053,7,c	;volatile
  4126  000DD8  0012               	return		;funcret
  4127  000DDA                     __end_of_TMR0_StartTimer:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           intcon	equ	0xFF2
  4136                           postinc0	equ	0xFEE
  4137                           wreg	equ	0xFE8
  4138                           postdec1	equ	0xFE5
  4139                           fsr1l	equ	0xFE1
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _PIN_MANAGER_Initialize *****************
  4148 ;; Defined at:
  4149 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;		None
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4163 ;;      Params:         0       0       0       0
  4164 ;;      Locals:         0       0       0       0
  4165 ;;      Temps:          0       0       0       0
  4166 ;;      Totals:         0       0       0       0
  4167 ;;Total ram usage:        0 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    3
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_SYSTEM_Initialize
  4174 ;;		_main
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text22
  4179  000BDE                     __ptext22:
  4180                           	opt stack 0
  4181  000BDE                     _PIN_MANAGER_Initialize:
  4182                           	opt stack 26
  4183                           
  4184                           ;pin_manager.c: 57: LATE = 0x00;
  4185                           
  4186                           ;incstack = 0
  4187  000BDE  0E00               	movlw	0
  4188  000BE0  6E8D               	movwf	3981,c	;volatile
  4189                           
  4190                           ;pin_manager.c: 58: LATD = 0x00;
  4191  000BE2  0E00               	movlw	0
  4192  000BE4  6E8C               	movwf	3980,c	;volatile
  4193                           
  4194                           ;pin_manager.c: 59: LATA = 0x00;
  4195  000BE6  0E00               	movlw	0
  4196  000BE8  6E89               	movwf	3977,c	;volatile
  4197                           
  4198                           ;pin_manager.c: 60: LATB = 0x00;
  4199  000BEA  0E00               	movlw	0
  4200  000BEC  6E8A               	movwf	3978,c	;volatile
  4201                           
  4202                           ;pin_manager.c: 61: LATC = 0x01;
  4203  000BEE  0E01               	movlw	1
  4204  000BF0  6E8B               	movwf	3979,c	;volatile
  4205                           
  4206                           ;pin_manager.c: 66: TRISE = 0x07;
  4207  000BF2  0E07               	movlw	7
  4208  000BF4  6E96               	movwf	3990,c	;volatile
  4209                           
  4210                           ;pin_manager.c: 67: TRISA = 0xFF;
  4211  000BF6  6892               	setf	3986,c	;volatile
  4212                           
  4213                           ;pin_manager.c: 68: TRISB = 0xFF;
  4214  000BF8  6893               	setf	3987,c	;volatile
  4215                           
  4216                           ;pin_manager.c: 69: TRISC = 0x88;
  4217  000BFA  0E88               	movlw	136
  4218  000BFC  6E94               	movwf	3988,c	;volatile
  4219                           
  4220                           ;pin_manager.c: 70: TRISD = 0xFB;
  4221  000BFE  0EFB               	movlw	251
  4222  000C00  6E95               	movwf	3989,c	;volatile
  4223                           
  4224                           ;pin_manager.c: 75: ANSELC = 0x08;
  4225  000C02  0E08               	movlw	8
  4226  000C04  010F               	movlb	15	; () banked
  4227  000C06  6F3A               	movwf	58,b	;volatile
  4228                           
  4229                           ;pin_manager.c: 76: ANSELB = 0x3F;
  4230  000C08  0E3F               	movlw	63
  4231  000C0A  6F39               	movwf	57,b	;volatile
  4232                           
  4233                           ;pin_manager.c: 77: ANSELD = 0xF0;
  4234  000C0C  0EF0               	movlw	240
  4235  000C0E  6F3B               	movwf	59,b	;volatile
  4236                           
  4237                           ;pin_manager.c: 78: ANSELE = 0x07;
  4238  000C10  0E07               	movlw	7
  4239  000C12  6F3C               	movwf	60,b	;volatile
  4240                           
  4241                           ;pin_manager.c: 79: ANSELA = 0x2F;
  4242  000C14  0E2F               	movlw	47
  4243  000C16  6F38               	movwf	56,b	;volatile
  4244                           
  4245                           ; BSR set to: 15
  4246                           ;pin_manager.c: 84: WPUB = 0xFF;
  4247  000C18  6861               	setf	3937,c	;volatile
  4248                           
  4249                           ; BSR set to: 15
  4250                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  4251  000C1A  9EF1               	bcf	intcon2,7,c	;volatile
  4252                           
  4253                           ; BSR set to: 15
  4254  000C1C  0012               	return		;funcret
  4255  000C1E                     __end_of_PIN_MANAGER_Initialize:
  4256                           	opt stack 0
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           intcon	equ	0xFF2
  4264                           intcon2	equ	0xFF1
  4265                           postinc0	equ	0xFEE
  4266                           wreg	equ	0xFE8
  4267                           postdec1	equ	0xFE5
  4268                           fsr1l	equ	0xFE1
  4269                           indf2	equ	0xFDF
  4270                           postinc2	equ	0xFDE
  4271                           postdec2	equ	0xFDD
  4272                           fsr2h	equ	0xFDA
  4273                           fsr2l	equ	0xFD9
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function _OSCILLATOR_Initialize *****************
  4277 ;; Defined at:
  4278 ;;		line 128 in file "mcc_generated_files/mcc.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4292 ;;      Params:         0       0       0       0
  4293 ;;      Locals:         0       0       0       0
  4294 ;;      Temps:          0       0       0       0
  4295 ;;      Totals:         0       0       0       0
  4296 ;;Total ram usage:        0 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    3
  4299 ;; This function calls:
  4300 ;;		Nothing
  4301 ;; This function is called by:
  4302 ;;		_SYSTEM_Initialize
  4303 ;;		_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text23
  4308  000D76                     __ptext23:
  4309                           	opt stack 0
  4310  000D76                     _OSCILLATOR_Initialize:
  4311                           	opt stack 26
  4312                           
  4313                           ;mcc.c: 131: OSCCON = 0x70;
  4314                           
  4315                           ; BSR set to: 15
  4316                           ;incstack = 0
  4317  000D76  0E70               	movlw	112
  4318  000D78  6ED3               	movwf	4051,c	;volatile
  4319                           
  4320                           ;mcc.c: 133: OSCCON2 = 0x04;
  4321  000D7A  0E04               	movlw	4
  4322  000D7C  6ED2               	movwf	4050,c	;volatile
  4323                           
  4324                           ;mcc.c: 135: OSCTUNE = 0x00;
  4325  000D7E  0E00               	movlw	0
  4326  000D80  6E9B               	movwf	3995,c	;volatile
  4327  000D82  0012               	return		;funcret
  4328  000D84                     __end_of_OSCILLATOR_Initialize:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           intcon2	equ	0xFF1
  4338                           postinc0	equ	0xFEE
  4339                           wreg	equ	0xFE8
  4340                           postdec1	equ	0xFE5
  4341                           fsr1l	equ	0xFE1
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function _INTERRUPT_Initialize *****************
  4350 ;; Defined at:
  4351 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;		None
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;		None
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		None
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4365 ;;      Params:         0       0       0       0
  4366 ;;      Locals:         0       0       0       0
  4367 ;;      Temps:          0       0       0       0
  4368 ;;      Totals:         0       0       0       0
  4369 ;;Total ram usage:        0 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    3
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_SYSTEM_Initialize
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text24
  4380  000DDA                     __ptext24:
  4381                           	opt stack 0
  4382  000DDA                     _INTERRUPT_Initialize:
  4383                           	opt stack 26
  4384                           
  4385                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  4386                           
  4387                           ;incstack = 0
  4388  000DDA  9ED0               	bcf	4048,7,c	;volatile
  4389  000DDC  0012               	return		;funcret
  4390  000DDE                     __end_of_INTERRUPT_Initialize:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           intcon2	equ	0xFF1
  4400                           postinc0	equ	0xFEE
  4401                           wreg	equ	0xFE8
  4402                           postdec1	equ	0xFE5
  4403                           fsr1l	equ	0xFE1
  4404                           indf2	equ	0xFDF
  4405                           postinc2	equ	0xFDE
  4406                           postdec2	equ	0xFDD
  4407                           fsr2h	equ	0xFDA
  4408                           fsr2l	equ	0xFD9
  4409                           status	equ	0xFD8
  4410                           
  4411 ;; *************** function _I2C2_Initialize *****************
  4412 ;; Defined at:
  4413 ;;		line 81 in file "mcc_generated_files/i2c2.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;		None
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		wreg, status,2
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4427 ;;      Params:         0       0       0       0
  4428 ;;      Locals:         0       0       0       0
  4429 ;;      Temps:          0       0       0       0
  4430 ;;      Totals:         0       0       0       0
  4431 ;;Total ram usage:        0 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    3
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_SYSTEM_Initialize
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           	psect	text25
  4442  000D14                     __ptext25:
  4443                           	opt stack 0
  4444  000D14                     _I2C2_Initialize:
  4445                           	opt stack 26
  4446                           
  4447                           ;i2c2.c: 85: SSP2STAT = 0x00;
  4448                           
  4449                           ;incstack = 0
  4450  000D14  0E00               	movlw	0
  4451  000D16  6E6D               	movwf	3949,c	;volatile
  4452                           
  4453                           ;i2c2.c: 87: SSP2CON1 = 0x26;
  4454  000D18  0E26               	movlw	38
  4455  000D1A  6E6C               	movwf	3948,c	;volatile
  4456                           
  4457                           ;i2c2.c: 89: SSP2CON2 = 0x01;
  4458  000D1C  0E01               	movlw	1
  4459  000D1E  6E6B               	movwf	3947,c	;volatile
  4460                           
  4461                           ;i2c2.c: 91: SSP2CON3 = 0x00;
  4462  000D20  0E00               	movlw	0
  4463  000D22  6E69               	movwf	3945,c	;volatile
  4464                           
  4465                           ;i2c2.c: 93: SSP2MSK = (0x7F << 1);
  4466  000D24  0EFE               	movlw	254
  4467  000D26  6E6A               	movwf	3946,c	;volatile
  4468                           
  4469                           ;i2c2.c: 95: SSP2ADD = (0x44 << 1);
  4470  000D28  0E88               	movlw	136
  4471  000D2A  6E6E               	movwf	3950,c	;volatile
  4472                           
  4473                           ;i2c2.c: 98: PIR3bits.SSP2IF = 0;
  4474  000D2C  9EA4               	bcf	4004,7,c	;volatile
  4475                           
  4476                           ;i2c2.c: 100: PIE3bits.SSP2IE = 1;
  4477  000D2E  8EA3               	bsf	4003,7,c	;volatile
  4478  000D30  0012               	return		;funcret
  4479  000D32                     __end_of_I2C2_Initialize:
  4480                           	opt stack 0
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           intcon2	equ	0xFF1
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           postdec1	equ	0xFE5
  4492                           fsr1l	equ	0xFE1
  4493                           indf2	equ	0xFDF
  4494                           postinc2	equ	0xFDE
  4495                           postdec2	equ	0xFDD
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function _EUSART1_Initialize *****************
  4501 ;; Defined at:
  4502 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;		None
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4516 ;;      Params:         0       0       0       0
  4517 ;;      Locals:         0       0       0       0
  4518 ;;      Temps:          0       0       0       0
  4519 ;;      Totals:         0       0       0       0
  4520 ;;Total ram usage:        0 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    3
  4523 ;; This function calls:
  4524 ;;		Nothing
  4525 ;; This function is called by:
  4526 ;;		_SYSTEM_Initialize
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text26
  4531  000D4A                     __ptext26:
  4532                           	opt stack 0
  4533  000D4A                     _EUSART1_Initialize:
  4534                           	opt stack 26
  4535                           
  4536                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  4537                           
  4538                           ;incstack = 0
  4539  000D4A  0E08               	movlw	8
  4540  000D4C  6EB8               	movwf	4024,c	;volatile
  4541                           
  4542                           ;eusart1.c: 63: RCSTA1 = 0x90;
  4543  000D4E  0E90               	movlw	144
  4544  000D50  6EAB               	movwf	4011,c	;volatile
  4545                           
  4546                           ;eusart1.c: 66: TXSTA1 = 0x24;
  4547  000D52  0E24               	movlw	36
  4548  000D54  6EAC               	movwf	4012,c	;volatile
  4549                           
  4550                           ;eusart1.c: 69: SPBRG1 = 0x44;
  4551  000D56  0E44               	movlw	68
  4552  000D58  6EAF               	movwf	4015,c	;volatile
  4553                           
  4554                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  4555  000D5A  0E00               	movlw	0
  4556  000D5C  6EB0               	movwf	4016,c	;volatile
  4557  000D5E  0012               	return		;funcret
  4558  000D60                     __end_of_EUSART1_Initialize:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           prodh	equ	0xFF4
  4565                           prodl	equ	0xFF3
  4566                           intcon	equ	0xFF2
  4567                           intcon2	equ	0xFF1
  4568                           postinc0	equ	0xFEE
  4569                           wreg	equ	0xFE8
  4570                           postdec1	equ	0xFE5
  4571                           fsr1l	equ	0xFE1
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           fsr2h	equ	0xFDA
  4576                           fsr2l	equ	0xFD9
  4577                           status	equ	0xFD8
  4578                           
  4579 ;; *************** function _ADC_Initialize *****************
  4580 ;; Defined at:
  4581 ;;		line 58 in file "mcc_generated_files/adc.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4595 ;;      Params:         0       0       0       0
  4596 ;;      Locals:         0       0       0       0
  4597 ;;      Temps:          0       0       0       0
  4598 ;;      Totals:         0       0       0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    3
  4602 ;; This function calls:
  4603 ;;		Nothing
  4604 ;; This function is called by:
  4605 ;;		_SYSTEM_Initialize
  4606 ;;		_main
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text27
  4611  000D60                     __ptext27:
  4612                           	opt stack 0
  4613  000D60                     _ADC_Initialize:
  4614                           	opt stack 26
  4615                           
  4616                           ;adc.c: 63: ADCON0 = 0x01;
  4617                           
  4618                           ;incstack = 0
  4619  000D60  0E01               	movlw	1
  4620  000D62  6EC2               	movwf	4034,c	;volatile
  4621                           
  4622                           ;adc.c: 66: ADCON1 = 0x00;
  4623  000D64  0E00               	movlw	0
  4624  000D66  6EC1               	movwf	4033,c	;volatile
  4625                           
  4626                           ;adc.c: 69: ADCON2 = 0x12;
  4627  000D68  0E12               	movlw	18
  4628  000D6A  6EC0               	movwf	4032,c	;volatile
  4629                           
  4630                           ;adc.c: 72: ADRESL = 0x00;
  4631  000D6C  0E00               	movlw	0
  4632  000D6E  6EC3               	movwf	4035,c	;volatile
  4633                           
  4634                           ;adc.c: 75: ADRESH = 0x00;
  4635  000D70  0E00               	movlw	0
  4636  000D72  6EC4               	movwf	4036,c	;volatile
  4637  000D74  0012               	return		;funcret
  4638  000D76                     __end_of_ADC_Initialize:
  4639                           	opt stack 0
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           intcon	equ	0xFF2
  4647                           intcon2	equ	0xFF1
  4648                           postinc0	equ	0xFEE
  4649                           wreg	equ	0xFE8
  4650                           postdec1	equ	0xFE5
  4651                           fsr1l	equ	0xFE1
  4652                           indf2	equ	0xFDF
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _OSCILLATOR_FastClock *****************
  4660 ;; Defined at:
  4661 ;;		line 118 in file "mcc_generated_files/mcc.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  1    wreg      void 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4675 ;;      Params:         0       0       0       0
  4676 ;;      Locals:         0       0       0       0
  4677 ;;      Temps:          0       0       0       0
  4678 ;;      Totals:         0       0       0       0
  4679 ;;Total ram usage:        0 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    3
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text28
  4690  000D84                     __ptext28:
  4691                           	opt stack 0
  4692  000D84                     _OSCILLATOR_FastClock:
  4693                           	opt stack 27
  4694                           
  4695                           ;mcc.c: 121: OSCCON = 0x70;
  4696                           
  4697                           ;incstack = 0
  4698  000D84  0E70               	movlw	112
  4699  000D86  6ED3               	movwf	4051,c	;volatile
  4700                           
  4701                           ;mcc.c: 123: OSCCON2 = 0x04;
  4702  000D88  0E04               	movlw	4
  4703  000D8A  6ED2               	movwf	4050,c	;volatile
  4704                           
  4705                           ;mcc.c: 125: OSCTUNE = 0x40;
  4706  000D8C  0E40               	movlw	64
  4707  000D8E  6E9B               	movwf	3995,c	;volatile
  4708  000D90  0012               	return		;funcret
  4709  000D92                     __end_of_OSCILLATOR_FastClock:
  4710                           	opt stack 0
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           prodh	equ	0xFF4
  4716                           prodl	equ	0xFF3
  4717                           intcon	equ	0xFF2
  4718                           intcon2	equ	0xFF1
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postdec1	equ	0xFE5
  4722                           fsr1l	equ	0xFE1
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           fsr2h	equ	0xFDA
  4727                           fsr2l	equ	0xFD9
  4728                           status	equ	0xFD8
  4729                           
  4730 ;; *************** function _ADC_GetConversion *****************
  4731 ;; Defined at:
  4732 ;;		line 106 in file "mcc_generated_files/adc.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;  channel         1    wreg     enum E6975
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  channel         1   24[COMRAM] enum E6975
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  2   20[COMRAM] unsigned int 
  4739 ;; Registers used:
  4740 ;;		wreg, status,2, status,0
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4746 ;;      Params:         2       0       0       0
  4747 ;;      Locals:         1       0       0       0
  4748 ;;      Temps:          2       0       0       0
  4749 ;;      Totals:         5       0       0       0
  4750 ;;Total ram usage:        5 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    3
  4753 ;; This function calls:
  4754 ;;		Nothing
  4755 ;; This function is called by:
  4756 ;;		_main
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text29
  4761  000C5C                     __ptext29:
  4762                           	opt stack 0
  4763  000C5C                     _ADC_GetConversion:
  4764                           	opt stack 27
  4765                           
  4766                           ;incstack = 0
  4767                           ;ADC_GetConversion@channel stored from wreg
  4768  000C5C  6E19               	movwf	ADC_GetConversion@channel,c
  4769                           
  4770                           ;adc.c: 109: ADCON0bits.CHS = channel;
  4771  000C5E  C019  F017         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  4772  000C62  4617               	rlncf	??_ADC_GetConversion,f,c
  4773  000C64  4617               	rlncf	??_ADC_GetConversion,f,c
  4774  000C66  50C2               	movf	4034,w,c	;volatile
  4775  000C68  1817               	xorwf	??_ADC_GetConversion,w,c
  4776  000C6A  0B83               	andlw	-125
  4777  000C6C  1817               	xorwf	??_ADC_GetConversion,w,c
  4778  000C6E  6EC2               	movwf	4034,c	;volatile
  4779                           
  4780                           ;adc.c: 112: ADCON0bits.ADON = 1;
  4781  000C70  80C2               	bsf	4034,0,c	;volatile
  4782                           
  4783                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  4784  000C72  82C2               	bsf	4034,1,c	;volatile
  4785  000C74                     
  4786                           ;adc.c: 119: {
  4787  000C74  B2C2               	btfsc	4034,1,c	;volatile
  4788  000C76  D7FE               	goto	l31
  4789                           
  4790                           ;adc.c: 120: }
  4791                           ;adc.c: 123: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4792  000C78  50C4               	movf	4036,w,c	;volatile
  4793  000C7A  6E18               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  4794  000C7C  6A17               	clrf	??_ADC_GetConversion& (0+255),c
  4795  000C7E  50C3               	movf	4035,w,c	;volatile
  4796  000C80  2417               	addwf	??_ADC_GetConversion,w,c
  4797  000C82  6E15               	movwf	?_ADC_GetConversion,c
  4798  000C84  0E00               	movlw	0
  4799  000C86  2018               	addwfc	??_ADC_GetConversion+1,w,c
  4800  000C88  6E16               	movwf	?_ADC_GetConversion+1,c
  4801  000C8A  0012               	return	
  4802  000C8C                     __end_of_ADC_GetConversion:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           intcon2	equ	0xFF1
  4812                           postinc0	equ	0xFEE
  4813                           wreg	equ	0xFE8
  4814                           postdec1	equ	0xFE5
  4815                           fsr1l	equ	0xFE1
  4816                           indf2	equ	0xFDF
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function _INTERRUPT_InterruptManager *****************
  4824 ;; Defined at:
  4825 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4839 ;;      Params:         0       0       0       0
  4840 ;;      Locals:         0       0       0       0
  4841 ;;      Temps:         18       0       0       0
  4842 ;;      Totals:        18       0       0       0
  4843 ;;Total ram usage:       18 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    2
  4846 ;; This function calls:
  4847 ;;		_I2C2_ISR
  4848 ;; This function is called by:
  4849 ;;		Interrupt level 2
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	intcode
  4854  000008                     __pintcode:
  4855                           	opt stack 0
  4856  000008                     _INTERRUPT_InterruptManager:
  4857                           	opt stack 25
  4858                           
  4859                           ;incstack = 0
  4860  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4861  00000A  CFFA F003          	movff	pclath,??_INTERRUPT_InterruptManager
  4862  00000E  CFFB F004          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4863  000012  CFE9 F005          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4864  000016  CFEA F006          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4865  00001A  CFE1 F007          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4866  00001E  CFE2 F008          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4867  000022  CFD9 F009          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4868  000026  CFDA F00A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4869  00002A  CFF3 F00B          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4870  00002E  CFF4 F00C          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4871  000032  CFF6 F00D          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4872  000036  CFF7 F00E          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4873  00003A  CFF8 F00F          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4874  00003E  CFF5 F010          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4875  000042  C04A  F011         	movff	btemp,??_INTERRUPT_InterruptManager+14
  4876  000046  C04B  F012         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  4877  00004A  C04C  F013         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  4878  00004E  C04D  F014         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  4879                           
  4880                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE3bits.SSP2IE == 1 && PIR3bits.SS
      +                          P2IF == 1)
  4881  000052  BCF2               	btfsc	intcon,6,c	;volatile
  4882  000054  AEA3               	btfss	4003,7,c	;volatile
  4883  000056  D003               	goto	i2l286
  4884  000058  BEA4               	btfsc	4004,7,c	;volatile
  4885                           
  4886                           ;interrupt_manager.c: 61: {
  4887                           ;interrupt_manager.c: 62: I2C2_ISR();
  4888  00005A  EC0F  F006         	call	_I2C2_ISR	;wreg free
  4889  00005E                     i2l286:
  4890                           
  4891                           ;interrupt_manager.c: 64: else
  4892                           ;interrupt_manager.c: 65: {
  4893  00005E  C014  F04D         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  4894  000062  C013  F04C         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  4895  000066  C012  F04B         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  4896  00006A  C011  F04A         	movff	??_INTERRUPT_InterruptManager+14,btemp
  4897  00006E  C010  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4898  000072  C00F  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4899  000076  C00E  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4900  00007A  C00D  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4901  00007E  C00C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4902  000082  C00B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4903  000086  C00A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4904  00008A  C009  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4905  00008E  C008  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4906  000092  C007  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4907  000096  C006  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4908  00009A  C005  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4909  00009E  C004  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4910  0000A2  C003  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4911  0000A6  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4912  0000A8  0011               	retfie		f
  4913  0000AA                     __end_of_INTERRUPT_InterruptManager:
  4914                           	opt stack 0
  4915                           pclatu	equ	0xFFB
  4916                           pclath	equ	0xFFA
  4917                           tblptru	equ	0xFF8
  4918                           tblptrh	equ	0xFF7
  4919                           tblptrl	equ	0xFF6
  4920                           tablat	equ	0xFF5
  4921                           prodh	equ	0xFF4
  4922                           prodl	equ	0xFF3
  4923                           intcon	equ	0xFF2
  4924                           intcon2	equ	0xFF1
  4925                           postinc0	equ	0xFEE
  4926                           fsr0h	equ	0xFEA
  4927                           fsr0l	equ	0xFE9
  4928                           wreg	equ	0xFE8
  4929                           postdec1	equ	0xFE5
  4930                           fsr1h	equ	0xFE2
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           postinc2	equ	0xFDE
  4934                           postdec2	equ	0xFDD
  4935                           fsr2h	equ	0xFDA
  4936                           fsr2l	equ	0xFD9
  4937                           status	equ	0xFD8
  4938                           
  4939 ;; *************** function _I2C2_ISR *****************
  4940 ;; Defined at:
  4941 ;;		line 104 in file "mcc_generated_files/i2c2.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  i2c_data        1    1[COMRAM] unsigned char 
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      void 
  4948 ;; Registers used:
  4949 ;;		wreg, status,2, status,0, cstack
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4955 ;;      Params:         0       0       0       0
  4956 ;;      Locals:         1       0       0       0
  4957 ;;      Temps:          0       0       0       0
  4958 ;;      Totals:         1       0       0       0
  4959 ;;Total ram usage:        1 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    1
  4962 ;; This function calls:
  4963 ;;		_I2C2_StatusCallback
  4964 ;; This function is called by:
  4965 ;;		_INTERRUPT_InterruptManager
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text31
  4970  000C1E                     __ptext31:
  4971                           	opt stack 0
  4972  000C1E                     _I2C2_ISR:
  4973                           	opt stack 25
  4974                           
  4975                           ;i2c2.c: 106: uint8_t i2c_data = 0x55;
  4976                           
  4977                           ;incstack = 0
  4978  000C1E  0E55               	movlw	85
  4979  000C20  6E02               	movwf	I2C2_ISR@i2c_data,c
  4980                           
  4981                           ;i2c2.c: 112: PIR3bits.SSP2IF = 0;
  4982  000C22  9EA4               	bcf	4004,7,c	;volatile
  4983                           
  4984                           ;i2c2.c: 113: i2c_data = SSP2BUF;
  4985  000C24  CF6F F002          	movff	3951,I2C2_ISR@i2c_data	;volatile
  4986                           
  4987                           ;i2c2.c: 114: if(1 == SSP2STATbits.R_nW)
  4988  000C28  A46D               	btfss	3949,2,c	;volatile
  4989  000C2A  D00B               	goto	i2l222
  4990                           
  4991                           ;i2c2.c: 115: {
  4992                           ;i2c2.c: 116: if((1 == SSP2STATbits.D_nA) && (1 == SSP2CON2bits.ACKSTAT))
  4993  000C2C  BA6D               	btfsc	3949,5,c	;volatile
  4994  000C2E  AC6B               	btfss	3947,6,c	;volatile
  4995  000C30  D004               	goto	i2l223
  4996                           
  4997                           ;i2c2.c: 117: {
  4998                           ;i2c2.c: 119: I2C2_StatusCallback(I2C2_SLAVE_READ_COMPLETED);
  4999  000C32  0E03               	movlw	3
  5000  000C34  ECA1  F004         	call	_I2C2_StatusCallback
  5001                           
  5002                           ;i2c2.c: 120: }
  5003  000C38  D00F               	goto	i2l227
  5004  000C3A                     i2l223:
  5005                           
  5006                           ;i2c2.c: 121: else
  5007                           ;i2c2.c: 122: {
  5008                           ;i2c2.c: 124: I2C2_StatusCallback(I2C2_SLAVE_READ_REQUEST);
  5009  000C3A  0E01               	movlw	1
  5010  000C3C  ECA1  F004         	call	_I2C2_StatusCallback
  5011                           
  5012                           ;i2c2.c: 125: }
  5013                           ;i2c2.c: 126: }
  5014  000C40  D00B               	goto	i2l227
  5015  000C42                     i2l222:
  5016                           
  5017                           ;i2c2.c: 127: else if(0 == SSP2STATbits.D_nA)
  5018  000C42  BA6D               	btfsc	3949,5,c	;volatile
  5019  000C44  D004               	goto	i2l226
  5020                           
  5021                           ;i2c2.c: 128: {
  5022                           ;i2c2.c: 132: I2C2_StatusCallback(I2C2_SLAVE_WRITE_REQUEST);
  5023  000C46  0E00               	movlw	0
  5024  000C48  ECA1  F004         	call	_I2C2_StatusCallback
  5025                           
  5026                           ;i2c2.c: 133: }
  5027  000C4C  D005               	goto	i2l227
  5028  000C4E                     i2l226:
  5029                           
  5030                           ;i2c2.c: 134: else
  5031                           ;i2c2.c: 135: {
  5032                           ;i2c2.c: 136: I2C2_slaveWriteData = i2c_data;
  5033  000C4E  C002  F049         	movff	I2C2_ISR@i2c_data,_I2C2_slaveWriteData	;volatile
  5034                           
  5035                           ;i2c2.c: 139: I2C2_StatusCallback(I2C2_SLAVE_WRITE_COMPLETED);
  5036  000C52  0E02               	movlw	2
  5037  000C54  ECA1  F004         	call	_I2C2_StatusCallback
  5038  000C58                     i2l227:
  5039                           
  5040                           ;i2c2.c: 140: }
  5041                           ;i2c2.c: 142: SSP2CON1bits.CKP = 1;
  5042  000C58  886C               	bsf	3948,4,c	;volatile
  5043  000C5A  0012               	return		;funcret
  5044  000C5C                     __end_of_I2C2_ISR:
  5045                           	opt stack 0
  5046                           pclatu	equ	0xFFB
  5047                           pclath	equ	0xFFA
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           intcon	equ	0xFF2
  5055                           intcon2	equ	0xFF1
  5056                           postinc0	equ	0xFEE
  5057                           fsr0h	equ	0xFEA
  5058                           fsr0l	equ	0xFE9
  5059                           wreg	equ	0xFE8
  5060                           postdec1	equ	0xFE5
  5061                           fsr1h	equ	0xFE2
  5062                           fsr1l	equ	0xFE1
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           fsr2h	equ	0xFDA
  5067                           fsr2l	equ	0xFD9
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _I2C2_StatusCallback *****************
  5071 ;; Defined at:
  5072 ;;		line 548 in file "main.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  i2c_bus_stat    1    wreg     enum E7163
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  i2c_bus_stat    1    0[COMRAM] enum E7163
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5086 ;;      Params:         0       0       0       0
  5087 ;;      Locals:         1       0       0       0
  5088 ;;      Temps:          0       0       0       0
  5089 ;;      Totals:         1       0       0       0
  5090 ;;Total ram usage:        1 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; This function calls:
  5093 ;;		Nothing
  5094 ;; This function is called by:
  5095 ;;		_I2C2_ISR
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           	psect	text32
  5100  000942                     __ptext32:
  5101                           	opt stack 0
  5102  000942                     _I2C2_StatusCallback:
  5103                           	opt stack 25
  5104                           
  5105                           ;incstack = 0
  5106                           ;I2C2_StatusCallback@i2c_bus_state stored from wreg
  5107  000942  6E01               	movwf	I2C2_StatusCallback@i2c_bus_state,c
  5108                           
  5109                           ;main.c: 550: static uint8_t RegAddress = 0;
  5110                           ;main.c: 551: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  5111                           ;main.c: 553: switch (i2c_bus_state)
  5112  000944  D02F               	goto	i2l443
  5113  000946                     
  5114                           ;main.c: 557: slaveWriteType = SLAVE_DATA_ADDRESS;
  5115  000946  0E01               	movlw	1
  5116  000948  6E47               	movwf	I2C2_StatusCallback@slaveWriteType,c
  5117                           
  5118                           ;main.c: 558: break;
  5119  00094A  0012               	return	
  5120  00094C                     i2l448:
  5121                           
  5122                           ;main.c: 565: RegAddress = I2C2_slaveWriteData;
  5123  00094C  C049  F048         	movff	_I2C2_slaveWriteData,I2C2_StatusCallback@RegAddress	;volatile
  5124                           
  5125                           ;main.c: 566: break;
  5126  000950  D00C               	goto	i2l449
  5127  000952                     
  5128                           ;main.c: 572: RegAddress += 1;
  5129                           
  5130                           ;main.c: 569: default:
  5131  000952  2A48               	incf	I2C2_StatusCallback@RegAddress,f,c
  5132                           
  5133                           ;main.c: 573: RegAddress &= 3;
  5134  000954  0E03               	movlw	3
  5135  000956  1648               	andwf	I2C2_StatusCallback@RegAddress,f,c
  5136                           
  5137                           ;main.c: 575: }
  5138                           
  5139                           ;main.c: 574: break;
  5140  000958  D008               	goto	i2l449
  5141  00095A  5047               	movf	I2C2_StatusCallback@slaveWriteType,w,c
  5142                           
  5143                           ; Switch size 1, requested type "space"
  5144                           ; Number of cases is 2, Range of values is 0 to 1
  5145                           ; switch strategies available:
  5146                           ; Name         Instructions Cycles
  5147                           ; simple_byte            7     4 (average)
  5148                           ;	Chosen strategy is simple_byte
  5149  00095C  0A00               	xorlw	0	; case 0
  5150  00095E  B4D8               	btfsc	status,2,c
  5151  000960  D7F8               	goto	i2l450
  5152  000962  0A01               	xorlw	1	; case 1
  5153  000964  B4D8               	btfsc	status,2,c
  5154  000966  D7F2               	goto	i2l448
  5155  000968  D7F4               	goto	i2l450
  5156  00096A                     i2l449:
  5157                           
  5158                           ;main.c: 577: slaveWriteType = SLAVE_NORMAL_DATA;
  5159  00096A  0E00               	movlw	0
  5160  00096C  6E47               	movwf	I2C2_StatusCallback@slaveWriteType,c
  5161                           
  5162                           ;main.c: 578: break;
  5163  00096E  0012               	return	
  5164  000970                     
  5165                           ;main.c: 583: if (RegAddress == 0)
  5166  000970  5048               	movf	I2C2_StatusCallback@RegAddress,w,c
  5167  000972  B4D8               	btfsc	status,2,c
  5168                           
  5169                           ;main.c: 584: {
  5170                           ;main.c: 585: SSP2BUF = reg_status;
  5171  000974  C0D8  FF6F         	movff	_reg_status,3951	;volatile
  5172                           
  5173                           ;main.c: 586: }
  5174                           ;main.c: 588: if (RegAddress == 1)
  5175  000978  0448               	decf	I2C2_StatusCallback@RegAddress,w,c
  5176  00097A  A4D8               	btfss	status,2,c
  5177  00097C  D003               	goto	i2l454
  5178                           
  5179                           ;main.c: 589: {
  5180                           ;main.c: 590: SSP2BUF = meas_tune;
  5181  00097E  C0D4  FF6F         	movff	_meas_tune,3951	;volatile
  5182                           
  5183                           ;main.c: 591: }
  5184  000982  D00C               	goto	i2l458
  5185  000984                     i2l454:
  5186                           
  5187                           ;main.c: 593: else if (RegAddress == 2)
  5188  000984  0E02               	movlw	2
  5189  000986  1848               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5190  000988  A4D8               	btfss	status,2,c
  5191  00098A  D003               	goto	i2l456
  5192                           
  5193                           ;main.c: 594: {
  5194                           ;main.c: 595: SSP2BUF = meas_band;
  5195  00098C  C0D2  FF6F         	movff	_meas_band,3951	;volatile
  5196                           
  5197                           ;main.c: 596: }
  5198  000990  D005               	goto	i2l458
  5199  000992                     i2l456:
  5200                           
  5201                           ;main.c: 598: else if (RegAddress == 3)
  5202  000992  0E03               	movlw	3
  5203  000994  1848               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5204  000996  B4D8               	btfsc	status,2,c
  5205                           
  5206                           ;main.c: 599: {
  5207                           ;main.c: 600: SSP2BUF = meas_vol;
  5208  000998  C0D0  FF6F         	movff	_meas_vol,3951	;volatile
  5209  00099C                     i2l458:
  5210                           
  5211                           ;main.c: 601: }
  5212                           ;main.c: 603: RegAddress += 1;
  5213  00099C  2A48               	incf	I2C2_StatusCallback@RegAddress,f,c
  5214                           
  5215                           ;main.c: 604: RegAddress &= 3;
  5216  00099E  0E03               	movlw	3
  5217  0009A0  1648               	andwf	I2C2_StatusCallback@RegAddress,f,c
  5218                           
  5219                           ;main.c: 610: }
  5220                           
  5221                           ;main.c: 608: default:;
  5222                           
  5223                           ;main.c: 607: case I2C2_SLAVE_READ_COMPLETED:
  5224                           
  5225                           ;main.c: 605: break;
  5226  0009A2  0012               	return	
  5227  0009A4                     i2l443:
  5228  0009A4  5001               	movf	I2C2_StatusCallback@i2c_bus_state,w,c
  5229                           
  5230                           ; Switch size 1, requested type "space"
  5231                           ; Number of cases is 4, Range of values is 0 to 3
  5232                           ; switch strategies available:
  5233                           ; Name         Instructions Cycles
  5234                           ; simple_byte           13     7 (average)
  5235                           ;	Chosen strategy is simple_byte
  5236  0009A6  0A00               	xorlw	0	; case 0
  5237  0009A8  B4D8               	btfsc	status,2,c
  5238  0009AA  D7CD               	goto	i2l444
  5239  0009AC  0A01               	xorlw	1	; case 1
  5240  0009AE  B4D8               	btfsc	status,2,c
  5241  0009B0  D7DF               	goto	i2l452
  5242  0009B2  0A03               	xorlw	3	; case 2
  5243  0009B4  B4D8               	btfsc	status,2,c
  5244  0009B6  D7D1               	goto	i2l447
  5245  0009B8  0A01               	xorlw	1	; case 3
  5246  0009BA  0012               	return	
  5247  0009BC                     __end_of_I2C2_StatusCallback:
  5248                           	opt stack 0
  5249                           pclatu	equ	0xFFB
  5250                           pclath	equ	0xFFA
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           intcon	equ	0xFF2
  5258                           intcon2	equ	0xFF1
  5259                           postinc0	equ	0xFEE
  5260                           fsr0h	equ	0xFEA
  5261                           fsr0l	equ	0xFE9
  5262                           wreg	equ	0xFE8
  5263                           postdec1	equ	0xFE5
  5264                           fsr1h	equ	0xFE2
  5265                           fsr1l	equ	0xFE1
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           pclatu	equ	0xFFB
  5273                           pclath	equ	0xFFA
  5274                           tblptru	equ	0xFF8
  5275                           tblptrh	equ	0xFF7
  5276                           tblptrl	equ	0xFF6
  5277                           tablat	equ	0xFF5
  5278                           prodh	equ	0xFF4
  5279                           prodl	equ	0xFF3
  5280                           intcon	equ	0xFF2
  5281                           intcon2	equ	0xFF1
  5282                           postinc0	equ	0xFEE
  5283                           fsr0h	equ	0xFEA
  5284                           fsr0l	equ	0xFE9
  5285                           wreg	equ	0xFE8
  5286                           postdec1	equ	0xFE5
  5287                           fsr1h	equ	0xFE2
  5288                           fsr1l	equ	0xFE1
  5289                           indf2	equ	0xFDF
  5290                           postinc2	equ	0xFDE
  5291                           postdec2	equ	0xFDD
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296                           	psect	rparam
  5297  0000                     pclatu	equ	0xFFB
  5298                           pclath	equ	0xFFA
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           intcon2	equ	0xFF1
  5307                           postinc0	equ	0xFEE
  5308                           fsr0h	equ	0xFEA
  5309                           fsr0l	equ	0xFE9
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           fsr1h	equ	0xFE2
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           fsr2h	equ	0xFDA
  5318                           fsr2l	equ	0xFD9
  5319                           status	equ	0xFD8
  5320                           
  5321                           	psect	temp
  5322  00004A                     btemp:
  5323                           	opt stack 0
  5324  00004A                     	ds	1
  5325  0000                     int$flags	set	btemp
  5326  0000                     wtemp6	set	btemp+1
  5327                           pclatu	equ	0xFFB
  5328                           pclath	equ	0xFFA
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           prodh	equ	0xFF4
  5334                           prodl	equ	0xFF3
  5335                           intcon	equ	0xFF2
  5336                           intcon2	equ	0xFF1
  5337                           postinc0	equ	0xFEE
  5338                           fsr0h	equ	0xFEA
  5339                           fsr0l	equ	0xFE9
  5340                           wreg	equ	0xFE8
  5341                           postdec1	equ	0xFE5
  5342                           fsr1h	equ	0xFE2
  5343                           fsr1l	equ	0xFE1
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8


Data Sizes:
    Strings     201
    Constant    72
    Data        101
    BSS         23
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     67      73
    BANK0           160      8     129
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[16]), STR_12(CODE[17]), STR_11(CODE[13]), STR_10(CODE[13]), 
		 -> STR_9(CODE[13]), STR_8(CODE[13]), STR_7(CODE[13]), STR_6(CODE[13]), 
		 -> STR_5(CODE[13]), STR_4(CODE[13]), STR_3(CODE[15]), STR_2(CODE[15]), 
		 -> STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_EUSART1_Write
    ___llmod->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_StatusCallback

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3857
                                             65 COMRAM     2     2      0
                                              0 BANK0      8     8      0
                  _ADC_GetConversion
                     _ADC_Initialize
               _OSCILLATOR_FastClock
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
            _TMR0_HasOverflowOccured
                    _TMR0_Initialize
            _TMR5_HasOverflowOccured
                    _TMR5_Initialize
                             ___lmul
                      _pi_supply_off
                       _pi_supply_on
                             _printf
                     _request_pi_run
                    _request_pi_stop
                  _update_status_reg
                        _ws2812_send
 ---------------------------------------------------------------------------------
 (1) _ws2812_send                                          9     5      4     167
                                             20 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _update_status_reg                                    6     6      0       0
                                             20 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _request_pi_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _request_pi_run                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    26      6    3052
                                             42 COMRAM    23    17      6
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             33 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pi_supply_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pi_supply_off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     522
                                             20 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _TMR5_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                    _I2C2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (1) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_FastClock                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             20 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0      46
                                              2 COMRAM    18    18      0
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C2_ISR                                             1     1      0      46
                                              1 COMRAM     1     1      0
                _I2C2_StatusCallback
 ---------------------------------------------------------------------------------
 (6) _I2C2_StatusCallback                                  1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _OSCILLATOR_FastClock
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _I2C2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_HasOverflowOccured
   _TMR0_Initialize
     _TMR0_StartTimer
   _TMR5_HasOverflowOccured
   _TMR5_Initialize
     _TMR5_StartTimer
   ___lmul
   _pi_supply_off
   _pi_supply_on
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART1_Write
   _request_pi_run
   _request_pi_stop
   _update_status_reg
   _ws2812_send

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_ISR
     _I2C2_StatusCallback

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      8      81       4       80.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     43      49       1       77.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CA       8        0.0%
DATA                 0      0      CA      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Dec 12 10:41:15 2017

       __end_of_OSCILLATOR_FastClock 0D92      __end_of_TMR0_HasOverflowOccured 0DB6  
                                 l31 0C74                  ___wmul@multiplicand 0017  
                    _timer0ReloadVal 0046                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                                  l400 0508  
                                l410 0558                                  l402 050C  
                                l404 0528                                  l501 0620  
                                l405 0556                                  l510 06A8  
                                l502 0624                                  l520 075C  
                                l504 0662                                  l521 0776  
                                l361 00CE                                  l514 0730  
                                l506 0628                                  l362 00EE  
                                l531 0880                                  l515 06E4  
                                l507 0682                                  l371 01AA  
                                l363 0114                                  l532 079E  
                                l372 017C                                  l533 0890  
                                l509 0720                                  l381 023E  
                                l373 01A0                                  l365 011C  
                                l550 0B08                                  l534 0816  
                                l390 02F8                                  l382 0216  
                                l366 0160                                  l519 0754  
                                l367 013C                                  l376 01FA  
                                l529 0896                                  l385 029E  
                                l377 01C6                                  l490 058E  
                                l466 0A92                                  l386 025A  
                                l378 01F0                                  l387 0286  
                                l468 0AA2                                  l549 0AF4  
                                l469 0AAC                                  l486 0570  
                                l903 09DA                                  l495 05C2  
                                l487 0580                                  l904 09CE  
                                l489 0594                                  l498 062E  
                                l907 0A02                                  l908 0A10  
                                l867 0D0C                                  l893 08EE  
                                l894 08E2                                  l897 0922  
                                l898 0930                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                                  u950 08F2  
                                u980 09DE          __end_of_I2C2_StatusCallback 09BC  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                   __end_of_I2C2_ISR 0C5C                                 l2040 06E8  
                               l2026 06AC                                 PORTC 000F82  
                               l2236 0286                                 l2086 0880  
                               l2096 0A8A                                 l1786 0D94  
                               STR_1 3F57                                 STR_2 3F87  
                               STR_3 3F78                                 STR_4 3FF1  
                               STR_5 3FE4                                 STR_6 3FB0  
                               STR_7 3FBD                                 STR_8 3FD7  
                               STR_9 3FA3                                 u1010 0DB2  
                               u1020 0DA6                                 u1210 077E  
                               u1220 0792                                 u1230 08A6  
                               u1310 0B6C                                 u1400 00F8  
                               u1305 0B5A                                 u1325 0B6E  
                               _LATA 000F89                                 u1270 0ADA  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u1280 0B4C                                 _LATD 000F8C  
                               _LATE 000F8D                                 u1610 0292  
                               u1390 00F6                                 u1295 0B4E  
                               u1640 0364                                 u1650 03AC  
                               u1707 0ADC                                 u1660 04D8  
                               u1645 035A                                 u1655 03A2  
                               _TMR5 000F4F                                 _WPUB 000F61  
                      _EUSART1_Write 0D92                      _led_pattern_idx 00D6  
                    _led_pattern_tbl 0060                                 _main 00AE  
                    _TMR0_StartTimer 0DD6                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 004A                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00AA                      _timer5ReloadVal 0044  
                      __CFG_IESO$OFF 000000                         ___param_bank 000000  
            __end_of_TMR0_Initialize 0D4A                __end_of_pi_supply_off 0DD6  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 0D84  
                              ?_main 0001                                STR_10 3F96  
                              STR_11 3FCA                                STR_12 3F46  
                              STR_13 3F68                                STR_14 3F35  
                    __end_of___lldiv 0942                                _T0CON 000FD5  
                    __end_of___llmod 0A22                                _T5CON 000F4E  
                     __CFG_DEBUG$OFF 000000                                i2l222 0C42  
                              i2l223 0C3A                                i2l226 0C4E  
                              i2l227 0C58                                i2l450 0952  
                              i2l443 09A4                                i2l452 0970  
                              i2l444 0946                                i2l454 0984  
                              i2l286 005E                                i2l447 095A  
                              i2l456 0992                                i2l448 094C  
                              i2l449 096A                                i2l458 099C  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _TMR5H 000F50                                _TMR5L 000F4F  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                  ___lmul@multiplicand 0019  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                      __end_of_dpowers 3F15  
                    __end_of_isdigit 0D14                   __CFG_MCLRE$EXTMCLR 000000  
                              _putch 0DB6                       ?_EUSART1_Write 0001  
                              pclath 000FFA                                tablat 000FF5  
                              status 000FD8                                wtemp6 004B  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    _TMR5_Initialize 0CD4                    ??_I2C2_Initialize 0015  
                    __initialization 0B8E           __end_of_EUSART1_Initialize 0D60  
                       __end_of_main 0566                 __size_of_ws2812_send 005E  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0042  
                      __activetblptr 000002              __end_of_TMR0_StartTimer 0DDA  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                     ___llmod@dividend 0022  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
               _OSCILLATOR_FastClock 0D84                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                        main@meas_pi3v 00DF  
                      main@meas_pi5v 00DD                               _T5GCON 000F4D  
                     __CFG_WDTEN$OFF 000000                               _RCREG1 000FAE  
                             _RCSTA1 000FAB                               _OSCCON 000FD3  
   __size_of_TMR0_HasOverflowOccured 000C                               _SPBRG1 000FAF  
                             _TXREG1 000FAD                               _TXSTA1 000FAC  
                     ws2812_send@led 0015                       __CFG_XINST$OFF 000000  
                             ___lmul 0AE4                               ___wmul 0C8C  
                     __CFG_STVREN$ON 000000                            ??___lldiv 001D  
                          ??___llmod 002A                     ?_TMR0_Initialize 0001  
                          ?_I2C2_ISR 0001                               clear_0 0BC6  
  I2C2_StatusCallback@slaveWriteType 0047                               _printf 0566  
                    _TMR5_StartTimer 0DC0             ?_TMR5_HasOverflowOccured 0001  
                       __pdataCOMRAM 0049                            ??_isdigit 0015  
                    _request_pi_stop 0DC6                         __mediumconst 3EEC  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8             ADC_GetConversion@channel 0019  
                    ??_EUSART1_Write 0015                ?_OSCILLATOR_FastClock 0001  
      __size_of_INTERRUPT_Initialize 0004              __end_of_TMR5_Initialize 0CF6  
                  _SYSTEM_Initialize 0CB2                           __accesstop 0060  
            __end_of__initialization 0BD0                   ?_SYSTEM_Initialize 0001  
                      ___rparam_used 000001                       __pcstackCOMRAM 0001  
                       __pidataBANK0 0A22                  ??_SYSTEM_Initialize 0015  
                  _update_status_reg 0B3A                        __end_of_putch 0DC0  
                         ??_I2C2_ISR 0002                   ?_update_status_reg 0001  
                _I2C2_slaveWriteData 0049                  ??_update_status_reg 0015  
                   ?_TMR0_StartTimer 0001            __end_of_SYSTEM_Initialize 0CD4  
                      ?_pi_supply_on 0001                              ??_putch 0016  
                         __pbssBANK0 00C4                      __CFG_PLLCFG$OFF 000000  
                         __pnvCOMRAM 0044                   __CFG_CCP2MX$PORTC1 000000  
          __end_of_update_status_reg 0B8E                              ?___lmul 0015  
                            ?___wmul 0015              __end_of_TMR5_StartTimer 0DC6  
                 __CFG_CCP3MX$PORTB5 000000      __end_of_TMR5_HasOverflowOccured 0DAA  
            __end_of_request_pi_stop 0DCA                       ___lmul@product 001D  
                            ?_printf 002B              __size_of_ADC_Initialize 0016  
                            _OSCCON2 000FD2               ??_OSCILLATOR_FastClock 0015  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                            _SSP2ADD 000F6E                       ??_pi_supply_on 0015  
                            _SSP2BUF 000F6F                              _SSP2MSK 000F6A  
       __size_of_I2C2_StatusCallback 007A                      _I2C2_Initialize 0D14  
            _TMR0_HasOverflowOccured 0DAA                     ?_TMR5_Initialize 0001  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                      __size_of___lmul 0056  
                            ___lldiv 08C0                      __size_of___wmul 0026  
                            ___llmod 09BC                              __pcinit 0B8E  
                            __ramtop 0300              __size_of_request_pi_run 0004  
                            __ptext0 00AE                              __ptext1 0A86  
                            __ptext2 0B3A                              __ptext3 0DC6  
                            __ptext4 0DCA                              __ptext5 0566  
                            __ptext6 0DB6                              __ptext7 0D92  
                            __ptext8 0CF6                              __ptext9 0C8C  
                    __size_of_printf 035A                            _T0CONbits 000FD5  
                  __end_of_hexpowers 3F35                              _dpowers 3EED  
              _OSCILLATOR_Initialize 0D76                              _isdigit 0CF6  
                 _EUSART1_Initialize 0D4A             ??_PIN_MANAGER_Initialize 0015  
                          _T5CONbits 000F4E                           _reg_status 00D8  
         __size_of_SYSTEM_Initialize 0022                 end_of_initialization 0BD0  
                ?_EUSART1_Initialize 0001               __size_of_pi_supply_off 0004  
                      __Lmediumconst 3EEC                      ___lldiv@divisor 0019  
                    ___lldiv@counter 0021                        ??_ws2812_send 0019  
         __size_of_update_status_reg 0054                              printf@c 0041  
                            printf@f 002B                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                     ?_TMR5_StartTimer 0001  
               ??_EUSART1_Initialize 0015                     ?_request_pi_stop 0001  
                         _prev_color 00C0                            _PORTCbits 000F82  
                          _PORTDbits 000F83                    __size_of_I2C2_ISR 003E  
            __end_of_I2C2_Initialize 0D32            ??_TMR0_HasOverflowOccured 0015  
                EUSART1_Write@txData 0015     __size_of_TMR5_HasOverflowOccured 000C  
                        printf@width 003F                 __end_of_pi_supply_on 0DD2  
       __end_of_INTERRUPT_Initialize 0DDE                       __end_of___lmul 0B3A  
                     __end_of___wmul 0CB2                        __pidataCOMRAM 0DDE  
                __end_of_ws2812_send 0AE4                       _ADC_Initialize 0D60  
                      _pi_supply_off 0DD2               ?_OSCILLATOR_Initialize 0001  
                     __end_of_printf 08C0     I2C2_StatusCallback@i2c_bus_state 0001  
                start_initialization 0B8E             __size_of_TMR0_Initialize 0018  
    __size_of_PIN_MANAGER_Initialize 0040                          putch@txData 0016  
              __end_of_EUSART1_Write 0D9E                      ___llmod@divisor 0026  
                    ___llmod@counter 002A                             ??___lmul 001D  
                           ??___wmul 0019               __end_of_ADC_Initialize 0D76  
                        __pdataBANK0 0060                  _I2C2_StatusCallback 0942  
                     ?_pi_supply_off 0001                       _request_pi_run 0DCA  
                           ??_printf 0031                          __pbssCOMRAM 0047  
                   ?_I2C2_Initialize 0001                        __pcstackBANK0 00D9  
                       _isdigit$1995 0016                 ?_I2C2_StatusCallback 0001  
           __size_of_TMR0_StartTimer 0004               _PIN_MANAGER_Initialize 0BDE  
                        _ws2812_send 0A86                            __pintcode 0008  
                      __pmediumconst 3EEC               __end_of_request_pi_run 0DCE  
                           ?___lldiv 0015                             ?___llmod 0022  
                    ?_ADC_Initialize 0001                             _I2C2_ISR 0C1E  
       ??_INTERRUPT_InterruptManager 0003                     __CFG_PRICLKEN$ON 000000  
                          _led_color 00CC                             _BAUDCON1 000FB8  
                           ?_isdigit 0001                            _meas_band 00D2  
                          _meas_tune 00D4                            _hexpowers 3F15  
              ??_I2C2_StatusCallback 0001        __size_of_OSCILLATOR_FastClock 000E  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 0DDA  
            _TMR5_HasOverflowOccured 0D9E                    ??_TMR0_Initialize 0015  
                     ___wmul@product 0019                             _LATCbits 000F8B  
                           _LATDbits 000F8C                             _PIE3bits 000FA3  
              __size_of_pi_supply_on 0004  __size_of_INTERRUPT_InterruptManager 00A2  
                           _PIR1bits 000F9E                             _PIR3bits 000FA4  
                           _PIR5bits 000F7E             __size_of_TMR5_Initialize 0022  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                    ??_pi_supply_off 0015                             _SSP2CON1 000F6C  
                           _SSP2CON2 000F6B                             _SSP2CON3 000F69  
                   I2C2_ISR@i2c_data 0002                      ?_request_pi_run 0001  
                           _SSP2STAT 000F6D                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0015                           printf@flag 003E  
                         printf@prec 0038                    ___lmul@multiplier 0015  
                        _INTCON2bits 000FF1                            copy_data0 0BA2  
                       _pi_supply_on 0DCE                ?_INTERRUPT_Initialize 0001  
                           __Hrparam 0000                         ws2812_send@j 001D  
                           __Lrparam 0000                    _ADC_GetConversion 0C5C  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0015                   ?_ADC_GetConversion 0015  
                  ??_TMR0_StartTimer 0015                     __size_of___lldiv 0082  
                   __size_of___llmod 0066          __size_of_EUSART1_Initialize 0016  
                ??_ADC_GetConversion 0017             __size_of_TMR5_StartTimer 0006  
                   __size_of_isdigit 001E             __size_of_request_pi_stop 0004  
          ??_TMR5_HasOverflowOccured 0015                             __ptext10 09BC  
                           __ptext11 08C0                             __ptext20 0D32  
                           __ptext12 0DCE                             __ptext21 0DD6  
                           __ptext13 0DD2                             __ptext22 0BDE  
                           __ptext14 0AE4                             __ptext31 0C1E  
                           __ptext23 0D76                             __ptext15 0D9E  
                           __ptext32 0942                             __ptext24 0DDA  
                           __ptext16 0DAA                             __ptext25 0D14  
                           __ptext17 0CB2                             __ptext26 0D4A  
                           __ptext18 0CD4                             __ptext27 0D60  
                           __ptext19 0DC0                             __ptext28 0D84  
                           __ptext29 0C5C                         _SSP2CON1bits 000F6C  
                       _SSP2CON2bits 000F6B                             _meas_vol 00D0  
                      __size_of_main 04B8                           _T5GCONbits 000F4D  
                           _pi_power 00C4            __end_of_ADC_GetConversion 0C8C  
                        _reg_control 00D7                             int$flags 004A  
 __end_of_INTERRUPT_InterruptManager 00AA           _INTERRUPT_InterruptManager 0008  
                          printf@idx 0035                             main@pi3v 00D9  
                           main@pi5v 00DB                            printf@val 003A  
                       _SSP2STATbits 000F6D                    ??_TMR5_Initialize 0015  
           ?_TMR0_HasOverflowOccured 0001                           _INTCONbits 000FF2  
      I2C2_StatusCallback@RegAddress 0048                             isdigit@c 0017  
             ??_INTERRUPT_Initialize 0015                             intlevel2 0000  
                   ___lldiv@dividend 0015              ?_PIN_MANAGER_Initialize 0001  
                         _RCSTA1bits 000FAB                     ??_ADC_Initialize 0015  
                       ?_ws2812_send 0015                             printf@ap 0036  
             __size_of_EUSART1_Write 000C                     ___lldiv@quotient 001D  
                    _TMR0_Initialize 0D32                    __CFG_T3CMX$PORTC0 000000  
                  ??_TMR5_StartTimer 0015       __end_of_PIN_MANAGER_Initialize 0C1E  
           __size_of_I2C2_Initialize 001E                    ??_request_pi_stop 0015  
                  __CFG_FOSC$INTIO67 000000                     ??_request_pi_run 0015  
         __size_of_ADC_GetConversion 0030  
