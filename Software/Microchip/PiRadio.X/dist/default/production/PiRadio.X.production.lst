

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 12 21:58:38 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F44K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.44
    54                           ; Generated 14/09/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F44K22 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  000E38                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _I2C2_slaveWriteData
    93  000E38  55                 	db	85
    94                           
    95                           	psect	idataBANK0
    96  000A0A                     __pidataBANK0:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _led_pattern_tbl
   100  000A0A  FF                 	db	255
   101  000A0B  FF                 	db	255
   102  000A0C  FF                 	db	255
   103  000A0D  FF                 	db	255
   104  000A0E  FF                 	db	255
   105  000A0F  FF                 	db	255
   106  000A10  FF                 	db	255
   107  000A11  FF                 	db	255
   108  000A12  FF                 	db	255
   109  000A13  FF                 	db	255
   110  000A14  FF                 	db	255
   111  000A15  FF                 	db	255
   112  000A16  FF                 	db	255
   113  000A17  00                 	db	0
   114  000A18  00                 	db	0
   115  000A19  00                 	db	0
   116  000A1A  00                 	db	0
   117  000A1B  00                 	db	0
   118  000A1C  00                 	db	0
   119  000A1D  00                 	db	0
   120  000A1E  00                 	db	0
   121  000A1F  00                 	db	0
   122  000A20  00                 	db	0
   123  000A21  00                 	db	0
   124  000A22  FF                 	db	255
   125  000A23  FF                 	db	255
   126  000A24  FF                 	db	255
   127  000A25  00                 	db	0
   128  000A26  00                 	db	0
   129  000A27  00                 	db	0
   130  000A28  FF                 	db	255
   131  000A29  FF                 	db	255
   132  000A2A  FF                 	db	255
   133  000A2B  00                 	db	0
   134  000A2C  00                 	db	0
   135  000A2D  00                 	db	0
   136  000A2E  FF                 	db	255
   137  000A2F  FF                 	db	255
   138  000A30  FF                 	db	255
   139  000A31  FF                 	db	255
   140  000A32  FF                 	db	255
   141  000A33  FF                 	db	255
   142  000A34  FF                 	db	255
   143  000A35  FF                 	db	255
   144  000A36  FF                 	db	255
   145  000A37  FF                 	db	255
   146  000A38  FF                 	db	255
   147  000A39  FF                 	db	255
   148  000A3A  00                 	db	0
   149  000A3B  FF                 	db	255
   150  000A3C  FF                 	db	255
   151  000A3D  FF                 	db	255
   152  000A3E  FF                 	db	255
   153  000A3F  FF                 	db	255
   154  000A40  00                 	db	0
   155  000A41  FF                 	db	255
   156  000A42  FF                 	db	255
   157  000A43  FF                 	db	255
   158  000A44  FF                 	db	255
   159  000A45  FF                 	db	255
   160  000A46  FF                 	db	255
   161  000A47  FF                 	db	255
   162  000A48  FF                 	db	255
   163  000A49  FF                 	db	255
   164  000A4A  FF                 	db	255
   165  000A4B  FF                 	db	255
   166  000A4C  FF                 	db	255
   167  000A4D  FF                 	db	255
   168  000A4E  FF                 	db	255
   169  000A4F  FF                 	db	255
   170  000A50  FF                 	db	255
   171  000A51  FF                 	db	255
   172                           
   173                           ;initializer for _color_test_table
   174  000A52  00FC               	dw	252
   175  000A54  0000               	dw	0
   176  000A56  C8E4               	dw	51428
   177  000A58  0000               	dw	0
   178  000A5A  E8E8               	dw	59624
   179  000A5C  0000               	dw	0
   180  000A5E  F800               	dw	63488
   181  000A60  0000               	dw	0
   182  000A62  0000               	dw	0
   183  000A64  00F8               	dw	248
   184  000A66  00F0               	dw	240
   185  000A68  00F8               	dw	248
   186  000A6A  F8E0               	dw	63712
   187  000A6C  00F8               	dw	248
   188  000A6E  F8F8               	dw	63736
   189  000A70  00F8               	dw	248
   190                           
   191                           ;initializer for _prev_color
   192  000A72  0001               	dw	1
   193  000A74  0000               	dw	0
   194                           
   195                           	psect	mediumconst
   196  003EDE                     __pmediumconst:
   197                           	opt stack 0
   198  003EDE  00                 	db	0
   199  003EDF                     _dpowers:
   200                           	opt stack 0
   201  003EDF  0001               	dw	1
   202  003EE1  0000               	dw	0
   203  003EE3  000A               	dw	10
   204  003EE5  0000               	dw	0
   205  003EE7  0064               	dw	100
   206  003EE9  0000               	dw	0
   207  003EEB  03E8               	dw	1000
   208  003EED  0000               	dw	0
   209  003EEF  2710               	dw	10000
   210  003EF1  0000               	dw	0
   211  003EF3  86A0               	dw	34464
   212  003EF5  0001               	dw	1
   213  003EF7  4240               	dw	16960
   214  003EF9  000F               	dw	15
   215  003EFB  9680               	dw	38528
   216  003EFD  0098               	dw	152
   217  003EFF  E100               	dw	57600
   218  003F01  05F5               	dw	1525
   219  003F03  CA00               	dw	51712
   220  003F05  3B9A               	dw	15258
   221  003F07                     __end_of_dpowers:
   222                           	opt stack 0
   223  003F07                     _hexpowers:
   224                           	opt stack 0
   225  003F07  0001               	dw	1
   226  003F09  0000               	dw	0
   227  003F0B  0010               	dw	16
   228  003F0D  0000               	dw	0
   229  003F0F  0100               	dw	256
   230  003F11  0000               	dw	0
   231  003F13  1000               	dw	4096
   232  003F15  0000               	dw	0
   233  003F17  0000               	dw	0
   234  003F19  0001               	dw	1
   235  003F1B  0000               	dw	0
   236  003F1D  0010               	dw	16
   237  003F1F  0000               	dw	0
   238  003F21  0100               	dw	256
   239  003F23  0000               	dw	0
   240  003F25  1000               	dw	4096
   241  003F27                     __end_of_hexpowers:
   242                           	opt stack 0
   243  003F27                     STR_15:
   244  003F27  30                 	db	48	;'0'
   245  003F28  31                 	db	49	;'1'
   246  003F29  32                 	db	50	;'2'
   247  003F2A  33                 	db	51	;'3'
   248  003F2B  34                 	db	52	;'4'
   249  003F2C  35                 	db	53	;'5'
   250  003F2D  36                 	db	54	;'6'
   251  003F2E  37                 	db	55	;'7'
   252  003F2F  38                 	db	56	;'8'
   253  003F30  39                 	db	57	;'9'
   254  003F31  41                 	db	65	;'A'
   255  003F32  42                 	db	66	;'B'
   256  003F33  43                 	db	67	;'C'
   257  003F34  44                 	db	68	;'D'
   258  003F35  45                 	db	69	;'E'
   259  003F36  46                 	db	70	;'F'
   260  003F37  00                 	db	0
   261  003F38                     STR_13:
   262  003F38  0A                 	db	10
   263  003F39  0A                 	db	10
   264  003F3A  0D                 	db	13
   265  003F3B  50                 	db	80	;'P'
   266  003F3C  69                 	db	105	;'i'
   267  003F3D  33                 	db	51	;'3'
   268  003F3E  56                 	db	86	;'V'
   269  003F3F  20                 	db	32
   270  003F40  20                 	db	32
   271  003F41  20                 	db	32
   272  003F42  20                 	db	32
   273  003F43  25                 	db	37
   274  003F44  75                 	db	117	;'u'
   275  003F45  20                 	db	32
   276  003F46  6D                 	db	109	;'m'
   277  003F47  56                 	db	86	;'V'
   278  003F48  00                 	db	0
   279  003F49                     STR_2:
   280  003F49  0A                 	db	10
   281  003F4A  0A                 	db	10
   282  003F4B  0D                 	db	13
   283  003F4C  4C                 	db	76	;'L'
   284  003F4D  45                 	db	69	;'E'
   285  003F4E  44                 	db	68	;'D'
   286  003F4F  20                 	db	32
   287  003F50  20                 	db	32
   288  003F51  20                 	db	32
   289  003F52  30                 	db	48	;'0'
   290  003F53  78                 	db	120	;'x'
   291  003F54  25                 	db	37
   292  003F55  30                 	db	48	;'0'
   293  003F56  38                 	db	56	;'8'
   294  003F57  6C                 	db	108	;'l'
   295  003F58  58                 	db	88	;'X'
   296  003F59  00                 	db	0
   297  003F5A                     STR_14:
   298  003F5A  0A                 	db	10
   299  003F5B  0D                 	db	13
   300  003F5C  50                 	db	80	;'P'
   301  003F5D  69                 	db	105	;'i'
   302  003F5E  35                 	db	53	;'5'
   303  003F5F  56                 	db	86	;'V'
   304  003F60  20                 	db	32
   305  003F61  20                 	db	32
   306  003F62  20                 	db	32
   307  003F63  20                 	db	32
   308  003F64  25                 	db	37
   309  003F65  75                 	db	117	;'u'
   310  003F66  20                 	db	32
   311  003F67  6D                 	db	109	;'m'
   312  003F68  56                 	db	86	;'V'
   313  003F69  00                 	db	0
   314  003F6A                     STR_4:
   315  003F6A  0A                 	db	10
   316  003F6B  0D                 	db	13
   317  003F6C  43                 	db	67	;'C'
   318  003F6D  54                 	db	84	;'T'
   319  003F6E  52                 	db	82	;'R'
   320  003F6F  4C                 	db	76	;'L'
   321  003F70  20                 	db	32
   322  003F71  20                 	db	32
   323  003F72  30                 	db	48	;'0'
   324  003F73  78                 	db	120	;'x'
   325  003F74  25                 	db	37
   326  003F75  30                 	db	48	;'0'
   327  003F76  32                 	db	50	;'2'
   328  003F77  58                 	db	88	;'X'
   329  003F78  00                 	db	0
   330  003F79                     STR_3:
   331  003F79  0A                 	db	10
   332  003F7A  0D                 	db	13
   333  003F7B  53                 	db	83	;'S'
   334  003F7C  54                 	db	84	;'T'
   335  003F7D  41                 	db	65	;'A'
   336  003F7E  54                 	db	84	;'T'
   337  003F7F  20                 	db	32
   338  003F80  20                 	db	32
   339  003F81  30                 	db	48	;'0'
   340  003F82  78                 	db	120	;'x'
   341  003F83  25                 	db	37
   342  003F84  30                 	db	48	;'0'
   343  003F85  32                 	db	50	;'2'
   344  003F86  58                 	db	88	;'X'
   345  003F87  00                 	db	0
   346  003F88                     STR_1:
   347  003F88  0A                 	db	10
   348  003F89  0A                 	db	10
   349  003F8A  0D                 	db	13
   350  003F8B  21                 	db	33
   351  003F8C  52                 	db	82	;'R'
   352  003F8D  45                 	db	69	;'E'
   353  003F8E  53                 	db	83	;'S'
   354  003F8F  45                 	db	69	;'E'
   355  003F90  54                 	db	84	;'T'
   356  003F91  21                 	db	33
   357  003F92  0A                 	db	10
   358  003F93  0A                 	db	10
   359  003F94  0D                 	db	13
   360  003F95  00                 	db	0
   361  003F96                     STR_11:
   362  003F96  0A                 	db	10
   363  003F97  0D                 	db	13
   364  003F98  42                 	db	66	;'B'
   365  003F99  41                 	db	65	;'A'
   366  003F9A  4E                 	db	78	;'N'
   367  003F9B  44                 	db	68	;'D'
   368  003F9C  20                 	db	32
   369  003F9D  20                 	db	32
   370  003F9E  20                 	db	32
   371  003F9F  20                 	db	32
   372  003FA0  25                 	db	37
   373  003FA1  75                 	db	117	;'u'
   374  003FA2  00                 	db	0
   375  003FA3                     STR_10:
   376  003FA3  0A                 	db	10
   377  003FA4  0D                 	db	13
   378  003FA5  54                 	db	84	;'T'
   379  003FA6  55                 	db	85	;'U'
   380  003FA7  4E                 	db	78	;'N'
   381  003FA8  45                 	db	69	;'E'
   382  003FA9  20                 	db	32
   383  003FAA  20                 	db	32
   384  003FAB  20                 	db	32
   385  003FAC  20                 	db	32
   386  003FAD  25                 	db	37
   387  003FAE  75                 	db	117	;'u'
   388  003FAF  00                 	db	0
   389  003FB0                     STR_7:
   390  003FB0  0A                 	db	10
   391  003FB1  0D                 	db	13
   392  003FB2  53                 	db	83	;'S'
   393  003FB3  54                 	db	84	;'T'
   394  003FB4  41                 	db	65	;'A'
   395  003FB5  54                 	db	84	;'T'
   396  003FB6  45                 	db	69	;'E'
   397  003FB7  20                 	db	32
   398  003FB8  20                 	db	32
   399  003FB9  20                 	db	32
   400  003FBA  25                 	db	37
   401  003FBB  75                 	db	117	;'u'
   402  003FBC  00                 	db	0
   403  003FBD                     STR_8:
   404  003FBD  0A                 	db	10
   405  003FBE  0D                 	db	13
   406  003FBF  41                 	db	65	;'A'
   407  003FC0  43                 	db	67	;'C'
   408  003FC1  5F                 	db	95	;'_'
   409  003FC2  4F                 	db	79	;'O'
   410  003FC3  4E                 	db	78	;'N'
   411  003FC4  20                 	db	32
   412  003FC5  20                 	db	32
   413  003FC6  20                 	db	32
   414  003FC7  25                 	db	37
   415  003FC8  75                 	db	117	;'u'
   416  003FC9  00                 	db	0
   417  003FCA                     STR_12:
   418  003FCA  0A                 	db	10
   419  003FCB  0D                 	db	13
   420  003FCC  56                 	db	86	;'V'
   421  003FCD  4F                 	db	79	;'O'
   422  003FCE  4C                 	db	76	;'L'
   423  003FCF  55                 	db	85	;'U'
   424  003FD0  4D                 	db	77	;'M'
   425  003FD1  45                 	db	69	;'E'
   426  003FD2  20                 	db	32
   427  003FD3  20                 	db	32
   428  003FD4  25                 	db	37
   429  003FD5  75                 	db	117	;'u'
   430  003FD6  00                 	db	0
   431  003FD7                     STR_9:
   432  003FD7  0A                 	db	10
   433  003FD8  0D                 	db	13
   434  003FD9  50                 	db	80	;'P'
   435  003FDA  49                 	db	73	;'I'
   436  003FDB  5F                 	db	95	;'_'
   437  003FDC  52                 	db	82	;'R'
   438  003FDD  55                 	db	85	;'U'
   439  003FDE  4E                 	db	78	;'N'
   440  003FDF  20                 	db	32
   441  003FE0  20                 	db	32
   442  003FE1  25                 	db	37
   443  003FE2  75                 	db	117	;'u'
   444  003FE3  00                 	db	0
   445  003FE4                     STR_6:
   446  003FE4  0A                 	db	10
   447  003FE5  0D                 	db	13
   448  003FE6  53                 	db	83	;'S'
   449  003FE7  50                 	db	80	;'P'
   450  003FE8  5F                 	db	95	;'_'
   451  003FE9  43                 	db	67	;'C'
   452  003FEA  4E                 	db	78	;'N'
   453  003FEB  54                 	db	84	;'T'
   454  003FEC  20                 	db	32
   455  003FED  20                 	db	32
   456  003FEE  25                 	db	37
   457  003FEF  75                 	db	117	;'u'
   458  003FF0  00                 	db	0
   459  003FF1                     STR_5:
   460  003FF1  0A                 	db	10
   461  003FF2  0D                 	db	13
   462  003FF3  53                 	db	83	;'S'
   463  003FF4  54                 	db	84	;'T'
   464  003FF5  5F                 	db	95	;'_'
   465  003FF6  43                 	db	67	;'C'
   466  003FF7  4E                 	db	78	;'N'
   467  003FF8  54                 	db	84	;'T'
   468  003FF9  20                 	db	32
   469  003FFA  20                 	db	32
   470  003FFB  25                 	db	37
   471  003FFC  75                 	db	117	;'u'
   472  003FFD  00                 	db	0
   473                           
   474                           ; #config settings
   475  003FFE  00                 	db	0	; dummy byte at the end
   476  0000                     
   477                           	psect	nvCOMRAM
   478  000042                     __pnvCOMRAM:
   479                           	opt stack 0
   480  000042                     _timer5ReloadVal:
   481                           	opt stack 0
   482  000042                     	ds	2
   483  000044                     _timer0ReloadVal:
   484                           	opt stack 0
   485  000044                     	ds	1
   486  0000                     _TMR5	set	3919
   487  0000                     _T5GCONbits	set	3917
   488  0000                     _T5CONbits	set	3918
   489  0000                     _TMR5L	set	3919
   490  0000                     _TMR5H	set	3920
   491  0000                     _T5GCON	set	3917
   492  0000                     _T5CON	set	3918
   493  0000                     _ANSELA	set	3896
   494  0000                     _ANSELE	set	3900
   495  0000                     _ANSELD	set	3899
   496  0000                     _ANSELB	set	3897
   497  0000                     _ANSELC	set	3898
   498  0000                     _LATDbits	set	3980
   499  0000                     _PORTCbits	set	3970
   500  0000                     _LATCbits	set	3979
   501  0000                     _PORTDbits	set	3971
   502  0000                     _RCONbits	set	4048
   503  0000                     _TXREG1	set	4013
   504  0000                     _RCREG1	set	4014
   505  0000                     _RCSTA1bits	set	4011
   506  0000                     _PIR1bits	set	3998
   507  0000                     _SPBRGH1	set	4016
   508  0000                     _SPBRG1	set	4015
   509  0000                     _TXSTA1	set	4012
   510  0000                     _RCSTA1	set	4011
   511  0000                     _BAUDCON1	set	4024
   512  0000                     _SSP2CON1bits	set	3948
   513  0000                     _SSP2CON2bits	set	3947
   514  0000                     _SSP2STATbits	set	3949
   515  0000                     _SSP2BUF	set	3951
   516  0000                     _PIE3bits	set	4003
   517  0000                     _PIR3bits	set	4004
   518  0000                     _SSP2ADD	set	3950
   519  0000                     _SSP2MSK	set	3946
   520  0000                     _SSP2CON3	set	3945
   521  0000                     _SSP2CON2	set	3947
   522  0000                     _SSP2CON1	set	3948
   523  0000                     _SSP2STAT	set	3949
   524  0000                     _PIR5bits	set	3966
   525  0000                     _T0CONbits	set	4053
   526  0000                     _INTCONbits	set	4082
   527  0000                     _TMR0L	set	4054
   528  0000                     _TMR0H	set	4055
   529  0000                     _T0CON	set	4053
   530  0000                     _INTCON2bits	set	4081
   531  0000                     _WPUB	set	3937
   532  0000                     _TRISD	set	3989
   533  0000                     _TRISC	set	3988
   534  0000                     _TRISB	set	3987
   535  0000                     _TRISA	set	3986
   536  0000                     _TRISE	set	3990
   537  0000                     _LATC	set	3979
   538  0000                     _LATB	set	3978
   539  0000                     _LATA	set	3977
   540  0000                     _LATD	set	3980
   541  0000                     _LATE	set	3981
   542  0000                     _OSCTUNE	set	3995
   543  0000                     _OSCCON2	set	4050
   544  0000                     _OSCCON	set	4051
   545  0000                     _ADCON0bits	set	4034
   546  0000                     _ADRESH	set	4036
   547  0000                     _ADRESL	set	4035
   548  0000                     _ADCON2	set	4032
   549  0000                     _ADCON1	set	4033
   550  0000                     _ADCON0	set	4034
   551                           
   552                           	psect	cinit
   553  000BE8                     __pcinit:
   554                           	opt stack 0
   555  000BE8                     start_initialization:
   556                           	opt stack 0
   557  000BE8                     __initialization:
   558                           	opt stack 0
   559                           
   560                           ; Initialize objects allocated to BANK0 (108 bytes)
   561                           ; load TBLPTR registers with __pidataBANK0
   562  000BE8  0E0A               	movlw	low __pidataBANK0
   563  000BEA  6EF6               	movwf	tblptrl,c
   564  000BEC  0E0A               	movlw	high __pidataBANK0
   565  000BEE  6EF7               	movwf	tblptrh,c
   566  000BF0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   567  000BF2  6EF8               	movwf	tblptru,c
   568  000BF4  EE00  F060         	lfsr	0,__pdataBANK0
   569  000BF8  EE10 F06C          	lfsr	1,108
   570  000BFC                     copy_data0:
   571  000BFC  0009               	tblrd		*+
   572  000BFE  CFF5 FFEE          	movff	tablat,postinc0
   573  000C02  50E5               	movf	postdec1,w,c
   574  000C04  50E1               	movf	fsr1l,w,c
   575  000C06  E1FA               	bnz	copy_data0
   576                           
   577                           ; Initialize objects allocated to COMRAM (1 bytes)
   578                           ; load TBLPTR registers with __pidataCOMRAM
   579  000C08  0E38               	movlw	low __pidataCOMRAM
   580  000C0A  6EF6               	movwf	tblptrl,c
   581  000C0C  0E0E               	movlw	high __pidataCOMRAM
   582  000C0E  6EF7               	movwf	tblptrh,c
   583  000C10  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   584  000C12  6EF8               	movwf	tblptru,c
   585  000C14  0009               	tblrd		*+	;fetch initializer
   586  000C16  CFF5 F047          	movff	tablat,__pdataCOMRAM
   587                           
   588                           ; Clear objects allocated to BANK0 (21 bytes)
   589  000C1A  EE00  F0CC         	lfsr	0,__pbssBANK0
   590  000C1E  0E15               	movlw	21
   591  000C20                     clear_0:
   592  000C20  6AEE               	clrf	postinc0,c
   593  000C22  06E8               	decf	wreg,f,c
   594  000C24  E1FD               	bnz	clear_0
   595                           
   596                           ; Clear objects allocated to COMRAM (2 bytes)
   597  000C26  6A46               	clrf	(__pbssCOMRAM+1)& (0+255),c
   598  000C28  6A45               	clrf	__pbssCOMRAM& (0+255),c
   599  000C2A                     end_of_initialization:
   600                           	opt stack 0
   601  000C2A                     __end_of__initialization:
   602                           	opt stack 0
   603  000C2A  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   604  000C2C  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   605  000C2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   606  000C30  6EF8               	movwf	tblptru,c
   607  000C32  0100               	movlb	0
   608  000C34  EF57  F000         	goto	_main	;jump to C main() function
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1l	equ	0xFE1
   617                           
   618                           	psect	bssCOMRAM
   619  000045                     __pbssCOMRAM:
   620                           	opt stack 0
   621  000045                     I2C2_StatusCallback@slaveWriteType:
   622                           	opt stack 0
   623  000045                     	ds	1
   624  000046                     I2C2_StatusCallback@RegAddress:
   625                           	opt stack 0
   626  000046                     	ds	1
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	dataCOMRAM
   637  000047                     __pdataCOMRAM:
   638                           	opt stack 0
   639  000047                     _I2C2_slaveWriteData:
   640                           	opt stack 0
   641  000047                     	ds	1
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           tblptrl	equ	0xFF6
   645                           tablat	equ	0xFF5
   646                           postinc0	equ	0xFEE
   647                           wreg	equ	0xFE8
   648                           postdec1	equ	0xFE5
   649                           fsr1l	equ	0xFE1
   650                           
   651                           	psect	bssBANK0
   652  0000CC                     __pbssBANK0:
   653                           	opt stack 0
   654  0000CC                     _pi_power:
   655                           	opt stack 0
   656  0000CC                     	ds	8
   657  0000D4                     _led_color:
   658                           	opt stack 0
   659  0000D4                     	ds	4
   660  0000D8                     _meas_vol:
   661                           	opt stack 0
   662  0000D8                     	ds	2
   663  0000DA                     _meas_band:
   664                           	opt stack 0
   665  0000DA                     	ds	2
   666  0000DC                     _meas_tune:
   667                           	opt stack 0
   668  0000DC                     	ds	2
   669  0000DE                     _led_pattern_idx:
   670                           	opt stack 0
   671  0000DE                     	ds	1
   672  0000DF                     _reg_control:
   673                           	opt stack 0
   674  0000DF                     	ds	1
   675  0000E0                     _reg_status:
   676                           	opt stack 0
   677  0000E0                     	ds	1
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           postdec1	equ	0xFE5
   685                           fsr1l	equ	0xFE1
   686                           
   687                           	psect	dataBANK0
   688  000060                     __pdataBANK0:
   689                           	opt stack 0
   690  000060                     _led_pattern_tbl:
   691                           	opt stack 0
   692  000060                     	ds	72
   693  0000A8                     _color_test_table:
   694                           	opt stack 0
   695  0000A8                     	ds	32
   696  0000C8                     _prev_color:
   697                           	opt stack 0
   698  0000C8                     	ds	4
   699                           tblptru	equ	0xFF8
   700                           tblptrh	equ	0xFF7
   701                           tblptrl	equ	0xFF6
   702                           tablat	equ	0xFF5
   703                           postinc0	equ	0xFEE
   704                           wreg	equ	0xFE8
   705                           postdec1	equ	0xFE5
   706                           fsr1l	equ	0xFE1
   707                           
   708                           	psect	cstackBANK0
   709  0000E1                     __pcstackBANK0:
   710                           	opt stack 0
   711  0000E1                     ??_main:
   712                           
   713                           ; 1 bytes @ 0x0
   714  0000E1                     	ds	4
   715  0000E5                     main@pi3v:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x4
   719  0000E5                     	ds	2
   720  0000E7                     main@pi5v:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x6
   724  0000E7                     	ds	2
   725  0000E9                     main@meas_pi5v:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x8
   729  0000E9                     	ds	2
   730  0000EB                     main@meas_pi3v:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0xA
   734  0000EB                     	ds	2
   735                           tblptru	equ	0xFF8
   736                           tblptrh	equ	0xFF7
   737                           tblptrl	equ	0xFF6
   738                           tablat	equ	0xFF5
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           postdec1	equ	0xFE5
   742                           fsr1l	equ	0xFE1
   743                           
   744                           	psect	cstackCOMRAM
   745  000001                     __pcstackCOMRAM:
   746                           	opt stack 0
   747  000001                     I2C2_StatusCallback@i2c_bus_state:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x0
   751  000001                     	ds	1
   752  000002                     I2C2_ISR@i2c_data:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x1
   756  000002                     	ds	1
   757  000003                     ??_INTERRUPT_InterruptManager:
   758                           
   759                           ; 1 bytes @ 0x2
   760  000003                     	ds	18
   761  000015                     ??_update_status_reg:
   762  000015                     ??_isdigit:
   763  000015                     ?_ADC_GetConversion:
   764                           	opt stack 0
   765  000015                     ?___wmul:
   766                           	opt stack 0
   767  000015                     ?___lmul:
   768                           	opt stack 0
   769  000015                     ?___lldiv:
   770                           	opt stack 0
   771  000015                     EUSART1_Write@txData:
   772                           	opt stack 0
   773  000015                     ___wmul@multiplier:
   774                           	opt stack 0
   775  000015                     ws2812_send@led:
   776                           	opt stack 0
   777  000015                     ___lmul@multiplier:
   778                           	opt stack 0
   779  000015                     ___lldiv@dividend:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x14
   783  000015                     	ds	1
   784  000016                     putch@txData:
   785                           	opt stack 0
   786  000016                     _isdigit$1997:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x15
   790  000016                     	ds	1
   791  000017                     ??_ADC_GetConversion:
   792  000017                     isdigit@c:
   793                           	opt stack 0
   794  000017                     ___wmul@multiplicand:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x16
   798  000017                     	ds	2
   799  000019                     ??_ws2812_send:
   800  000019                     ADC_GetConversion@channel:
   801                           	opt stack 0
   802  000019                     ___wmul@product:
   803                           	opt stack 0
   804  000019                     ___lmul@multiplicand:
   805                           	opt stack 0
   806  000019                     ___lldiv@divisor:
   807                           	opt stack 0
   808                           
   809                           ; 4 bytes @ 0x18
   810  000019                     	ds	4
   811  00001D                     ws2812_send@j:
   812                           	opt stack 0
   813  00001D                     ___lmul@product:
   814                           	opt stack 0
   815  00001D                     ___lldiv@quotient:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x1C
   819  00001D                     	ds	4
   820  000021                     ___lldiv@counter:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x20
   824  000021                     	ds	1
   825  000022                     ?___llmod:
   826                           	opt stack 0
   827  000022                     ___llmod@dividend:
   828                           	opt stack 0
   829                           
   830                           ; 4 bytes @ 0x21
   831  000022                     	ds	4
   832  000026                     ___llmod@divisor:
   833                           	opt stack 0
   834                           
   835                           ; 4 bytes @ 0x25
   836  000026                     	ds	4
   837  00002A                     ___llmod@counter:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x29
   841  00002A                     	ds	1
   842  00002B                     ?_printf:
   843                           	opt stack 0
   844  00002B                     printf@f:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x2A
   848  00002B                     	ds	6
   849  000031                     ??_printf:
   850                           
   851                           ; 1 bytes @ 0x30
   852  000031                     	ds	4
   853  000035                     printf@idx:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x34
   857  000035                     	ds	1
   858  000036                     printf@ap:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x35
   862  000036                     	ds	2
   863  000038                     printf@prec:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x37
   867  000038                     	ds	2
   868  00003A                     printf@val:
   869                           	opt stack 0
   870                           
   871                           ; 4 bytes @ 0x39
   872  00003A                     	ds	4
   873  00003E                     printf@flag:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x3D
   877  00003E                     	ds	1
   878  00003F                     printf@width:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x3E
   882  00003F                     	ds	2
   883  000041                     printf@c:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x40
   887  000041                     	ds	1
   888                           tblptru	equ	0xFF8
   889                           tblptrh	equ	0xFF7
   890                           tblptrl	equ	0xFF6
   891                           tablat	equ	0xFF5
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           postdec1	equ	0xFE5
   895                           fsr1l	equ	0xFE1
   896                           
   897 ;;
   898 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   899 ;;
   900 ;; *************** function _main *****************
   901 ;; Defined at:
   902 ;;		line 83 in file "main.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  meas_pi3v       2   10[BANK0 ] unsigned int 
   907 ;;  meas_pi5v       2    8[BANK0 ] unsigned int 
   908 ;;  pi5v            2    6[BANK0 ] unsigned int 
   909 ;;  pi3v            2    4[BANK0 ] unsigned int 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   919 ;;      Params:         0       0       0       0
   920 ;;      Locals:         0       8       0       0
   921 ;;      Temps:          0       4       0       0
   922 ;;      Totals:         0      12       0       0
   923 ;;Total ram usage:       12 bytes
   924 ;; Hardware stack levels required when called:    6
   925 ;; This function calls:
   926 ;;		_ADC_GetConversion
   927 ;;		_ADC_Initialize
   928 ;;		_OSCILLATOR_FastClock
   929 ;;		_OSCILLATOR_Initialize
   930 ;;		_PIN_MANAGER_Initialize
   931 ;;		_SYSTEM_Initialize
   932 ;;		_TMR0_HasOverflowOccured
   933 ;;		_TMR0_Initialize
   934 ;;		_TMR5_HasOverflowOccured
   935 ;;		_TMR5_Initialize
   936 ;;		___lmul
   937 ;;		_pi_supply_off
   938 ;;		_pi_supply_on
   939 ;;		_printf
   940 ;;		_request_pi_run
   941 ;;		_request_pi_stop
   942 ;;		_update_status_reg
   943 ;;		_ws2812_send
   944 ;; This function is called by:
   945 ;;		Startup code after reset
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text0
   950  0000AE                     __ptext0:
   951                           	opt stack 0
   952  0000AE                     _main:
   953                           	opt stack 25
   954                           
   955                           ;main.c: 85: uint16_t meas_pi5v = 0;
   956                           
   957                           ;incstack = 0
   958  0000AE  0E00               	movlw	0
   959  0000B0  0100               	movlb	0	; () banked
   960  0000B2  6FEA               	movwf	(main@meas_pi5v+1)& (0+255),b
   961  0000B4  0E00               	movlw	0
   962  0000B6  6FE9               	movwf	main@meas_pi5v& (0+255),b
   963                           
   964                           ;main.c: 86: uint16_t meas_pi3v = 0;
   965  0000B8  0E00               	movlw	0
   966  0000BA  6FEC               	movwf	(main@meas_pi3v+1)& (0+255),b
   967  0000BC  0E00               	movlw	0
   968  0000BE  6FEB               	movwf	main@meas_pi3v& (0+255),b
   969                           
   970                           ; BSR set to: 0
   971                           ;main.c: 87: uint16_t pi3v;
   972                           ;main.c: 88: uint16_t pi5v;
   973                           ;main.c: 91: SYSTEM_Initialize();
   974  0000C0  EC86  F006         	call	_SYSTEM_Initialize	;wreg free
   975                           
   976                           ;main.c: 94: pi_power.state = RESET;
   977  0000C4  0E00               	movlw	0
   978  0000C6  0100               	movlb	0	; () banked
   979  0000C8  6FCC               	movwf	_pi_power& (0+255),b
   980                           
   981                           ; BSR set to: 0
   982                           ;main.c: 97: led_pattern_idx = 0;
   983  0000CA  0E00               	movlw	0
   984  0000CC  6FDE               	movwf	_led_pattern_idx& (0+255),b
   985  0000CE                     
   986                           ;main.c: 101: {
   987                           ;main.c: 103: OSCILLATOR_Initialize();
   988                           
   989                           ; BSR set to: 0
   990  0000CE  ECE8  F006         	call	_OSCILLATOR_Initialize	;wreg free
   991                           
   992                           ;main.c: 106: TMR5_Initialize();
   993  0000D2  EC97  F006         	call	_TMR5_Initialize	;wreg free
   994                           
   995                           ;main.c: 113: TMR0_Initialize();
   996  0000D6  ECC6  F006         	call	_TMR0_Initialize	;wreg free
   997                           
   998                           ;main.c: 116: pi_power.count += 1;
   999  0000DA  0100               	movlb	0	; () banked
  1000  0000DC  4BCE               	infsnz	(_pi_power+2)& (0+255),f,b
  1001  0000DE  2BCF               	incf	(_pi_power+3)& (0+255),f,b
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;main.c: 117: if (pi_power.count == 0)
  1005  0000E0  51CE               	movf	(_pi_power+2)& (0+255),w,b
  1006  0000E2  11CF               	iorwf	(_pi_power+3)& (0+255),w,b
  1007  0000E4  A4D8               	btfss	status,2,c
  1008  0000E6  D003               	goto	l363
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;main.c: 118: pi_power.count -= 1;
  1012  0000E8  07CE               	decf	(_pi_power+2)& (0+255),f,b
  1013  0000EA  A0D8               	btfss	status,0,c
  1014  0000EC  07CF               	decf	(_pi_power+3)& (0+255),f,b
  1015  0000EE                     l363:
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;main.c: 121: pi_power.running = (PORTDbits.RD3 == 0);
  1019                           
  1020                           ; BSR set to: 0
  1021  0000EE  B683               	btfsc	3971,3,c	;volatile
  1022  0000F0  D002               	goto	u1730
  1023  0000F2  0E01               	movlw	1
  1024  0000F4  D001               	goto	u1740
  1025  0000F6                     u1730:
  1026  0000F6  0E00               	movlw	0
  1027  0000F8                     u1740:
  1028  0000F8  6FD2               	movwf	(_pi_power+6)& (0+255),b
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;main.c: 124: if (pi_power.running == (0))
  1032  0000FA  51D2               	movf	(_pi_power+6)& (0+255),w,b
  1033  0000FC  A4D8               	btfss	status,2,c
  1034  0000FE  D00A               	goto	l364
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;main.c: 125: {
  1038                           ;main.c: 126: pi_power.stopped_count += 1;
  1039  000100  4BD0               	infsnz	(_pi_power+4)& (0+255),f,b
  1040  000102  2BD1               	incf	(_pi_power+5)& (0+255),f,b
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;main.c: 127: if (pi_power.stopped_count == 0)
  1044  000104  51D0               	movf	(_pi_power+4)& (0+255),w,b
  1045  000106  11D1               	iorwf	(_pi_power+5)& (0+255),w,b
  1046  000108  A4D8               	btfss	status,2,c
  1047  00010A  D008               	goto	l366
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;main.c: 128: pi_power.stopped_count -= 1;
  1051  00010C  07D0               	decf	(_pi_power+4)& (0+255),f,b
  1052  00010E  A0D8               	btfss	status,0,c
  1053  000110  07D1               	decf	(_pi_power+5)& (0+255),f,b
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main.c: 129: }
  1057  000112  D004               	goto	l366
  1058  000114                     l364:
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;main.c: 130: else
  1062                           ;main.c: 131: pi_power.stopped_count = 0;
  1063                           
  1064                           ; BSR set to: 0
  1065  000114  0E00               	movlw	0
  1066  000116  6FD1               	movwf	(_pi_power+5)& (0+255),b
  1067  000118  0E00               	movlw	0
  1068  00011A  6FD0               	movwf	(_pi_power+4)& (0+255),b
  1069  00011C                     l366:
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;main.c: 144: if (STANDBY == pi_power.state)
  1073                           
  1074                           ; BSR set to: 0
  1075  00011C  05CC               	decf	_pi_power& (0+255),w,b
  1076  00011E  A4D8               	btfss	status,2,c
  1077  000120  D01F               	goto	l367
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;main.c: 145: {
  1081                           ;main.c: 147: if (pi_power.prev != STANDBY)
  1082  000122  05CD               	decf	(_pi_power+1)& (0+255),w,b
  1083  000124  B4D8               	btfsc	status,2,c
  1084  000126  D00A               	goto	l368
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 148: {
  1088                           ;main.c: 149: pi_power.count = 0;
  1089  000128  0E00               	movlw	0
  1090  00012A  6FCF               	movwf	(_pi_power+3)& (0+255),b
  1091  00012C  0E00               	movlw	0
  1092  00012E  6FCE               	movwf	(_pi_power+2)& (0+255),b
  1093                           
  1094                           ;main.c: 150: pi_power.stopped_count = 0;
  1095  000130  0E00               	movlw	0
  1096  000132  6FD1               	movwf	(_pi_power+5)& (0+255),b
  1097  000134  0E00               	movlw	0
  1098  000136  6FD0               	movwf	(_pi_power+4)& (0+255),b
  1099                           
  1100                           ;main.c: 151: pi_power.prev = STANDBY;
  1101  000138  0E01               	movlw	1
  1102  00013A  6FCD               	movwf	(_pi_power+1)& (0+255),b
  1103  00013C                     l368:
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;main.c: 152: }
  1107                           ;main.c: 155: pi_supply_off();
  1108                           
  1109                           ; BSR set to: 0
  1110  00013C  EC16  F007         	call	_pi_supply_off	;wreg free
  1111                           
  1112                           ;main.c: 158: request_pi_stop();
  1113  000140  EC10  F007         	call	_request_pi_stop	;wreg free
  1114                           
  1115                           ;main.c: 161: led_color = (0);
  1116  000144  0E00               	movlw	0
  1117  000146  0100               	movlb	0	; () banked
  1118  000148  6FD4               	movwf	_led_color& (0+255),b
  1119  00014A  0E00               	movlw	0
  1120  00014C  6FD5               	movwf	(_led_color+1)& (0+255),b
  1121  00014E  0E00               	movlw	0
  1122  000150  6FD6               	movwf	(_led_color+2)& (0+255),b
  1123  000152  0E00               	movlw	0
  1124  000154  6FD7               	movwf	(_led_color+3)& (0+255),b
  1125                           
  1126                           ;main.c: 168: if (pi_power.power_switch)
  1127  000156  51D3               	movf	(_pi_power+7)& (0+255),w,b
  1128  000158  B4D8               	btfsc	status,2,c
  1129  00015A  D09E               	goto	L8
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;main.c: 169: pi_power.state = BOOTING;
  1133  00015C  0E02               	movlw	2
  1134  00015E  D09D               	goto	L6
  1135  000160                     l367:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 181: else if (BOOTING == pi_power.state)
  1139                           
  1140                           ; BSR set to: 0
  1141  000160  0E02               	movlw	2
  1142  000162  19CC               	xorwf	_pi_power& (0+255),w,b
  1143  000164  A4D8               	btfss	status,2,c
  1144  000166  D021               	goto	l372
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;main.c: 182: {
  1148                           ;main.c: 184: if (pi_power.prev != BOOTING)
  1149  000168  0E02               	movlw	2
  1150  00016A  19CD               	xorwf	(_pi_power+1)& (0+255),w,b
  1151  00016C  B4D8               	btfsc	status,2,c
  1152  00016E  D006               	goto	l373
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 185: {
  1156                           ;main.c: 186: pi_power.count = 0;
  1157  000170  0E00               	movlw	0
  1158  000172  6FCF               	movwf	(_pi_power+3)& (0+255),b
  1159  000174  0E00               	movlw	0
  1160  000176  6FCE               	movwf	(_pi_power+2)& (0+255),b
  1161                           
  1162                           ;main.c: 187: pi_power.prev = BOOTING;
  1163  000178  0E02               	movlw	2
  1164  00017A  6FCD               	movwf	(_pi_power+1)& (0+255),b
  1165  00017C                     l373:
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;main.c: 188: }
  1169                           ;main.c: 191: led_color = (0x0000c8e4);
  1170  00017C  0EE4               	movlw	228
  1171  00017E  6FD4               	movwf	_led_color& (0+255),b
  1172  000180  0EC8               	movlw	200
  1173  000182  6FD5               	movwf	(_led_color+1)& (0+255),b
  1174  000184  0E00               	movlw	0
  1175  000186  6FD6               	movwf	(_led_color+2)& (0+255),b
  1176  000188  0E00               	movlw	0
  1177  00018A  6FD7               	movwf	(_led_color+3)& (0+255),b
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;main.c: 194: pi_supply_on();
  1181  00018C  EC14  F007         	call	_pi_supply_on	;wreg free
  1182                           
  1183                           ;main.c: 197: request_pi_run();
  1184  000190  EC12  F007         	call	_request_pi_run	;wreg free
  1185                           
  1186                           ;main.c: 201: if (pi_power.power_switch == (0))
  1187  000194  0100               	movlb	0	; () banked
  1188  000196  51D3               	movf	(_pi_power+7)& (0+255),w,b
  1189  000198  A4D8               	btfss	status,2,c
  1190  00019A  D002               	goto	l374
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;main.c: 202: pi_power.state = STANDBY;
  1194  00019C  0E01               	movlw	1
  1195  00019E  6FCC               	movwf	_pi_power& (0+255),b
  1196  0001A0                     l374:
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;main.c: 206: if (pi_power.running == (1))
  1200                           
  1201                           ; BSR set to: 0
  1202  0001A0  05D2               	decf	(_pi_power+6)& (0+255),w,b
  1203  0001A2  A4D8               	btfss	status,2,c
  1204  0001A4  D0AF               	goto	l391
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;main.c: 207: pi_power.state = OPERATE;
  1208  0001A6  0E03               	movlw	3
  1209  0001A8  D078               	goto	L6
  1210  0001AA                     l372:
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;main.c: 220: else if (OPERATE == pi_power.state)
  1214                           
  1215                           ; BSR set to: 0
  1216  0001AA  0E03               	movlw	3
  1217  0001AC  19CC               	xorwf	_pi_power& (0+255),w,b
  1218  0001AE  A4D8               	btfss	status,2,c
  1219  0001B0  D024               	goto	l377
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 221: {
  1223                           ;main.c: 223: if (pi_power.prev != OPERATE)
  1224  0001B2  0E03               	movlw	3
  1225  0001B4  19CD               	xorwf	(_pi_power+1)& (0+255),w,b
  1226  0001B6  B4D8               	btfsc	status,2,c
  1227  0001B8  D006               	goto	l378
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 224: {
  1231                           ;main.c: 225: pi_power.count = 0;
  1232  0001BA  0E00               	movlw	0
  1233  0001BC  6FCF               	movwf	(_pi_power+3)& (0+255),b
  1234  0001BE  0E00               	movlw	0
  1235  0001C0  6FCE               	movwf	(_pi_power+2)& (0+255),b
  1236                           
  1237                           ;main.c: 226: pi_power.prev = OPERATE;
  1238  0001C2  0E03               	movlw	3
  1239  0001C4  6FCD               	movwf	(_pi_power+1)& (0+255),b
  1240  0001C6                     l378:
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 227: }
  1244                           ;main.c: 230: led_color = (0x00f8f8f8);
  1245  0001C6  0EF8               	movlw	248
  1246  0001C8  6FD4               	movwf	_led_color& (0+255),b
  1247  0001CA  0EF8               	movlw	248
  1248  0001CC  6FD5               	movwf	(_led_color+1)& (0+255),b
  1249  0001CE  0EF8               	movlw	248
  1250  0001D0  6FD6               	movwf	(_led_color+2)& (0+255),b
  1251  0001D2  0E00               	movlw	0
  1252  0001D4  6FD7               	movwf	(_led_color+3)& (0+255),b
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;main.c: 233: pi_supply_on();
  1256  0001D6  EC14  F007         	call	_pi_supply_on	;wreg free
  1257                           
  1258                           ;main.c: 236: request_pi_run();
  1259  0001DA  EC12  F007         	call	_request_pi_run	;wreg free
  1260                           
  1261                           ;main.c: 241: if (pi_power.power_switch == 0)
  1262  0001DE  0100               	movlb	0	; () banked
  1263  0001E0  51D3               	movf	(_pi_power+7)& (0+255),w,b
  1264  0001E2  A4D8               	btfss	status,2,c
  1265  0001E4  D005               	goto	l379
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;main.c: 242: {
  1269                           ;main.c: 243: request_pi_stop();
  1270  0001E6  EC10  F007         	call	_request_pi_stop	;wreg free
  1271                           
  1272                           ;main.c: 244: pi_power.state = SHUTDOWN;
  1273  0001EA  0E04               	movlw	4
  1274  0001EC  0100               	movlb	0	; () banked
  1275  0001EE  6FCC               	movwf	_pi_power& (0+255),b
  1276  0001F0                     l379:
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;main.c: 245: }
  1280                           ;main.c: 250: if (pi_power.running == (0))
  1281                           
  1282                           ; BSR set to: 0
  1283  0001F0  51D2               	movf	(_pi_power+6)& (0+255),w,b
  1284  0001F2  A4D8               	btfss	status,2,c
  1285  0001F4  D087               	goto	l391
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 251: {
  1289                           ;main.c: 252: pi_power.state = PI_CONTROL;
  1290  0001F6  0E05               	movlw	5
  1291  0001F8  D050               	goto	L6
  1292  0001FA                     l377:
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;main.c: 264: else if (SHUTDOWN == pi_power.state)
  1296                           
  1297                           ; BSR set to: 0
  1298  0001FA  0E04               	movlw	4
  1299  0001FC  19CC               	xorwf	_pi_power& (0+255),w,b
  1300  0001FE  A4D8               	btfss	status,2,c
  1301  000200  D01E               	goto	l382
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;main.c: 265: {
  1305                           ;main.c: 267: if (pi_power.prev != SHUTDOWN)
  1306  000202  0E04               	movlw	4
  1307  000204  19CD               	xorwf	(_pi_power+1)& (0+255),w,b
  1308  000206  B4D8               	btfsc	status,2,c
  1309  000208  D006               	goto	l383
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;main.c: 268: {
  1313                           ;main.c: 269: pi_power.count = 0;
  1314  00020A  0E00               	movlw	0
  1315  00020C  6FCF               	movwf	(_pi_power+3)& (0+255),b
  1316  00020E  0E00               	movlw	0
  1317  000210  6FCE               	movwf	(_pi_power+2)& (0+255),b
  1318                           
  1319                           ;main.c: 270: pi_power.prev = SHUTDOWN;
  1320  000212  0E04               	movlw	4
  1321  000214  6FCD               	movwf	(_pi_power+1)& (0+255),b
  1322  000216                     l383:
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;main.c: 271: }
  1326                           ;main.c: 274: led_color = (0x000000fc);
  1327  000216  0EFC               	movlw	252
  1328  000218  6FD4               	movwf	_led_color& (0+255),b
  1329  00021A  0E00               	movlw	0
  1330  00021C  6FD5               	movwf	(_led_color+1)& (0+255),b
  1331  00021E  0E00               	movlw	0
  1332  000220  6FD6               	movwf	(_led_color+2)& (0+255),b
  1333  000222  0E00               	movlw	0
  1334  000224  6FD7               	movwf	(_led_color+3)& (0+255),b
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;main.c: 277: pi_supply_on();
  1338  000226  EC14  F007         	call	_pi_supply_on	;wreg free
  1339                           
  1340                           ;main.c: 280: request_pi_stop();
  1341  00022A  EC10  F007         	call	_request_pi_stop	;wreg free
  1342                           
  1343                           ;main.c: 284: if (pi_power.stopped_count > (100u))
  1344  00022E  0100               	movlb	0	; () banked
  1345  000230  51D1               	movf	(_pi_power+5)& (0+255),w,b
  1346  000232  E132               	bnz	L8
  1347  000234  0E65               	movlw	101
  1348  000236  5DD0               	subwf	(_pi_power+4)& (0+255),w,b
  1349  000238  A0D8               	btfss	status,0,c
  1350  00023A  D064               	goto	l391
  1351  00023C  D02D               	goto	L8
  1352  00023E                     l382:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 294: else if (PI_CONTROL == pi_power.state)
  1356                           
  1357                           ; BSR set to: 0
  1358  00023E  0E05               	movlw	5
  1359  000240  19CC               	xorwf	_pi_power& (0+255),w,b
  1360  000242  A4D8               	btfss	status,2,c
  1361  000244  D02C               	goto	l386
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 295: {
  1365                           ;main.c: 297: if (pi_power.prev != PI_CONTROL)
  1366  000246  0E05               	movlw	5
  1367  000248  19CD               	xorwf	(_pi_power+1)& (0+255),w,b
  1368  00024A  B4D8               	btfsc	status,2,c
  1369  00024C  D006               	goto	l387
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 298: {
  1373                           ;main.c: 299: pi_power.count = 0;
  1374  00024E  0E00               	movlw	0
  1375  000250  6FCF               	movwf	(_pi_power+3)& (0+255),b
  1376  000252  0E00               	movlw	0
  1377  000254  6FCE               	movwf	(_pi_power+2)& (0+255),b
  1378                           
  1379                           ;main.c: 300: pi_power.prev = PI_CONTROL;
  1380  000256  0E05               	movlw	5
  1381  000258  6FCD               	movwf	(_pi_power+1)& (0+255),b
  1382  00025A                     l387:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 301: }
  1386                           ;main.c: 304: led_color = (0x00f800f0);
  1387  00025A  0EF0               	movlw	240
  1388  00025C  6FD4               	movwf	_led_color& (0+255),b
  1389  00025E  0E00               	movlw	0
  1390  000260  6FD5               	movwf	(_led_color+1)& (0+255),b
  1391  000262  0EF8               	movlw	248
  1392  000264  6FD6               	movwf	(_led_color+2)& (0+255),b
  1393  000266  0E00               	movlw	0
  1394  000268  6FD7               	movwf	(_led_color+3)& (0+255),b
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;main.c: 307: pi_supply_on();
  1398  00026A  EC14  F007         	call	_pi_supply_on	;wreg free
  1399                           
  1400                           ;main.c: 309: if ((pi_power.count < (200u)) && (pi_power.running))
  1401  00026E  0100               	movlb	0	; () banked
  1402  000270  51CF               	movf	(_pi_power+3)& (0+255),w,b
  1403  000272  E109               	bnz	l2456
  1404  000274  0EC8               	movlw	200
  1405  000276  5DCE               	subwf	(_pi_power+2)& (0+255),w,b
  1406  000278  B0D8               	btfsc	status,0,c
  1407  00027A  D005               	goto	l388
  1408                           
  1409                           ; BSR set to: 0
  1410  00027C  51D2               	movf	(_pi_power+6)& (0+255),w,b
  1411  00027E  B4D8               	btfsc	status,2,c
  1412  000280  D002               	goto	l388
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;main.c: 310: pi_power.state = OPERATE;
  1416  000282  0E03               	movlw	3
  1417  000284  6FCC               	movwf	_pi_power& (0+255),b
  1418  000286                     l388:
  1419  000286                     l2456:
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;main.c: 312: if ((pi_power.count > (200u)) && (pi_power.running == (0)))
  1423  000286  51CF               	movf	(_pi_power+3)& (0+255),w,b
  1424  000288  E104               	bnz	u1950
  1425  00028A  0EC9               	movlw	201
  1426  00028C  5DCE               	subwf	(_pi_power+2)& (0+255),w,b
  1427  00028E  A0D8               	btfss	status,0,c
  1428  000290  D039               	goto	l391
  1429  000292                     u1950:
  1430                           
  1431                           ; BSR set to: 0
  1432  000292  51D2               	movf	(_pi_power+6)& (0+255),w,b
  1433  000294  A4D8               	btfss	status,2,c
  1434  000296  D036               	goto	l391
  1435  000298                     L8:
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 313: pi_power.state = STANDBY;
  1439  000298  0E01               	movlw	1
  1440  00029A                     L6:
  1441  00029A  6FCC               	movwf	_pi_power& (0+255),b
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;main.c: 315: }
  1445  00029C  D033               	goto	l391
  1446  00029E                     l386:
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;main.c: 322: else if (RESET == pi_power.state)
  1450                           
  1451                           ; BSR set to: 0
  1452  00029E  51CC               	movf	_pi_power& (0+255),w,b
  1453  0002A0  A4D8               	btfss	status,2,c
  1454  0002A2  D030               	goto	l391
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;main.c: 323: {
  1458                           ;main.c: 324: pi_power.state = STANDBY;
  1459  0002A4  0E01               	movlw	1
  1460  0002A6  6FCC               	movwf	_pi_power& (0+255),b
  1461                           
  1462                           ;main.c: 325: pi_power.prev = RESET;
  1463  0002A8  0E00               	movlw	0
  1464  0002AA  6FCD               	movwf	(_pi_power+1)& (0+255),b
  1465                           
  1466                           ;main.c: 326: pi_power.count = 0;
  1467  0002AC  0E00               	movlw	0
  1468  0002AE  6FCF               	movwf	(_pi_power+3)& (0+255),b
  1469  0002B0  0E00               	movlw	0
  1470  0002B2  6FCE               	movwf	(_pi_power+2)& (0+255),b
  1471                           
  1472                           ;main.c: 327: pi_power.stopped_count = 0;
  1473  0002B4  0E00               	movlw	0
  1474  0002B6  6FD1               	movwf	(_pi_power+5)& (0+255),b
  1475  0002B8  0E00               	movlw	0
  1476  0002BA  6FD0               	movwf	(_pi_power+4)& (0+255),b
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;main.c: 330: PIN_MANAGER_Initialize();
  1480  0002BC  EC1C  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  1481                           
  1482                           ;main.c: 332: led_color = (0x00f80000);
  1483  0002C0  0E00               	movlw	0
  1484  0002C2  0100               	movlb	0	; () banked
  1485  0002C4  6FD4               	movwf	_led_color& (0+255),b
  1486  0002C6  0E00               	movlw	0
  1487  0002C8  6FD5               	movwf	(_led_color+1)& (0+255),b
  1488  0002CA  0EF8               	movlw	248
  1489  0002CC  6FD6               	movwf	(_led_color+2)& (0+255),b
  1490  0002CE  0E00               	movlw	0
  1491  0002D0  6FD7               	movwf	(_led_color+3)& (0+255),b
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 333: prev_color = (0);
  1495  0002D2  0E00               	movlw	0
  1496  0002D4  6FC8               	movwf	_prev_color& (0+255),b
  1497  0002D6  0E00               	movlw	0
  1498  0002D8  6FC9               	movwf	(_prev_color+1)& (0+255),b
  1499  0002DA  0E00               	movlw	0
  1500  0002DC  6FCA               	movwf	(_prev_color+2)& (0+255),b
  1501  0002DE  0E00               	movlw	0
  1502  0002E0  6FCB               	movwf	(_prev_color+3)& (0+255),b
  1503                           
  1504                           ;main.c: 336: pi_supply_off();
  1505  0002E2  EC16  F007         	call	_pi_supply_off	;wreg free
  1506                           
  1507                           ;main.c: 339: request_pi_run();
  1508  0002E6  EC12  F007         	call	_request_pi_run	;wreg free
  1509                           
  1510                           ;main.c: 342: do { LATCbits.LATC2 = 0; } while(0);
  1511  0002EA  948B               	bcf	3979,2,c	;volatile
  1512                           
  1513                           ;main.c: 345: do { LATCbits.LATC0 = 0; } while(0);
  1514  0002EC  908B               	bcf	3979,0,c	;volatile
  1515                           
  1516                           ;main.c: 348: reg_status = 0;
  1517  0002EE  0E00               	movlw	0
  1518  0002F0  0100               	movlb	0	; () banked
  1519  0002F2  6FE0               	movwf	_reg_status& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 349: reg_control = 0;
  1523  0002F4  0E00               	movlw	0
  1524  0002F6  6FDF               	movwf	_reg_control& (0+255),b
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;main.c: 351: printf("\n\n\r!RESET!\n\n\r");
  1528  0002F8  0E88               	movlw	low STR_1
  1529  0002FA  6E2B               	movwf	printf@f,c
  1530  0002FC  0E3F               	movlw	high STR_1
  1531  0002FE  6E2C               	movwf	printf@f+1,c
  1532  000300  ECDA  F002         	call	_printf	;wreg free
  1533  000304                     l391:
  1534                           
  1535                           ;main.c: 353: }
  1536                           ;main.c: 364: do { LATCbits.LATC5 = 1; } while(0);
  1537  000304  8A8B               	bsf	3979,5,c	;volatile
  1538                           
  1539                           ;main.c: 367: ADC_Initialize();
  1540  000306  ECDD  F006         	call	_ADC_Initialize	;wreg free
  1541                           
  1542                           ;main.c: 370: meas_tune = ADC_GetConversion(channel_TUNE);
  1543  00030A  0E00               	movlw	0
  1544  00030C  EC5B  F006         	call	_ADC_GetConversion
  1545  000310  C015  F0DC         	movff	?_ADC_GetConversion,_meas_tune
  1546  000314  C016  F0DD         	movff	?_ADC_GetConversion+1,_meas_tune+1
  1547                           
  1548                           ;main.c: 371: meas_band = ADC_GetConversion(channel_BAND);
  1549  000318  0E01               	movlw	1
  1550  00031A  EC5B  F006         	call	_ADC_GetConversion
  1551  00031E  C015  F0DA         	movff	?_ADC_GetConversion,_meas_band
  1552  000322  C016  F0DB         	movff	?_ADC_GetConversion+1,_meas_band+1
  1553                           
  1554                           ;main.c: 372: meas_vol = ADC_GetConversion(channel_VOL);
  1555  000326  0E02               	movlw	2
  1556  000328  EC5B  F006         	call	_ADC_GetConversion
  1557  00032C  C015  F0D8         	movff	?_ADC_GetConversion,_meas_vol
  1558  000330  C016  F0D9         	movff	?_ADC_GetConversion+1,_meas_vol+1
  1559                           
  1560                           ;main.c: 375: meas_pi3v = ADC_GetConversion(channel_PI3V);
  1561  000334  0E19               	movlw	25
  1562  000336  EC5B  F006         	call	_ADC_GetConversion
  1563  00033A  C015  F0EB         	movff	?_ADC_GetConversion,main@meas_pi3v
  1564  00033E  C016  F0EC         	movff	?_ADC_GetConversion+1,main@meas_pi3v+1
  1565                           
  1566                           ;main.c: 376: pi3v = ((uint32_t)meas_pi3v * (uint32_t)5000 / (uint32_t)1024);
  1567  000342  C0EB  F015         	movff	main@meas_pi3v,___lmul@multiplier
  1568  000346  C0EC  F016         	movff	main@meas_pi3v+1,___lmul@multiplier+1
  1569  00034A  6A17               	clrf	___lmul@multiplier+2,c
  1570  00034C  6A18               	clrf	___lmul@multiplier+3,c
  1571  00034E  0E88               	movlw	136
  1572  000350  6E19               	movwf	___lmul@multiplicand,c
  1573  000352  0E13               	movlw	19
  1574  000354  6E1A               	movwf	___lmul@multiplicand+1,c
  1575  000356  0E00               	movlw	0
  1576  000358  6E1B               	movwf	___lmul@multiplicand+2,c
  1577  00035A  0E00               	movlw	0
  1578  00035C  6E1C               	movwf	___lmul@multiplicand+3,c
  1579  00035E  EC9F  F005         	call	___lmul	;wreg free
  1580  000362  0E0B               	movlw	11
  1581  000364  D005               	goto	u1980
  1582  000366                     u1985:
  1583  000366  90D8               	bcf	status,0,c
  1584  000368  3218               	rrcf	?___lmul+3,f,c
  1585  00036A  3217               	rrcf	?___lmul+2,f,c
  1586  00036C  3216               	rrcf	?___lmul+1,f,c
  1587  00036E  3215               	rrcf	?___lmul,f,c
  1588  000370                     u1980:
  1589  000370  2EE8               	decfsz	wreg,f,c
  1590  000372  D7F9               	goto	u1985
  1591  000374  C015  F0E5         	movff	?___lmul,main@pi3v
  1592  000378  C016  F0E6         	movff	?___lmul+1,main@pi3v+1
  1593                           
  1594                           ;main.c: 378: meas_pi5v = ADC_GetConversion(channel_PI5V);
  1595  00037C  0E0F               	movlw	15
  1596  00037E  EC5B  F006         	call	_ADC_GetConversion
  1597  000382  C015  F0E9         	movff	?_ADC_GetConversion,main@meas_pi5v
  1598  000386  C016  F0EA         	movff	?_ADC_GetConversion+1,main@meas_pi5v+1
  1599                           
  1600                           ;main.c: 379: pi5v = ((uint32_t)meas_pi5v * (uint32_t)5000 / (uint32_t)512);
  1601  00038A  C0E9  F015         	movff	main@meas_pi5v,___lmul@multiplier
  1602  00038E  C0EA  F016         	movff	main@meas_pi5v+1,___lmul@multiplier+1
  1603  000392  6A17               	clrf	___lmul@multiplier+2,c
  1604  000394  6A18               	clrf	___lmul@multiplier+3,c
  1605  000396  0E88               	movlw	136
  1606  000398  6E19               	movwf	___lmul@multiplicand,c
  1607  00039A  0E13               	movlw	19
  1608  00039C  6E1A               	movwf	___lmul@multiplicand+1,c
  1609  00039E  0E00               	movlw	0
  1610  0003A0  6E1B               	movwf	___lmul@multiplicand+2,c
  1611  0003A2  0E00               	movlw	0
  1612  0003A4  6E1C               	movwf	___lmul@multiplicand+3,c
  1613  0003A6  EC9F  F005         	call	___lmul	;wreg free
  1614  0003AA  0E0A               	movlw	10
  1615  0003AC  D005               	goto	u1990
  1616  0003AE                     u1995:
  1617  0003AE  90D8               	bcf	status,0,c
  1618  0003B0  3218               	rrcf	?___lmul+3,f,c
  1619  0003B2  3217               	rrcf	?___lmul+2,f,c
  1620  0003B4  3216               	rrcf	?___lmul+1,f,c
  1621  0003B6  3215               	rrcf	?___lmul,f,c
  1622  0003B8                     u1990:
  1623  0003B8  2EE8               	decfsz	wreg,f,c
  1624  0003BA  D7F9               	goto	u1995
  1625  0003BC  C015  F0E7         	movff	?___lmul,main@pi5v
  1626  0003C0  C016  F0E8         	movff	?___lmul+1,main@pi5v+1
  1627                           
  1628                           ;main.c: 382: do { LATCbits.LATC5 = 0; } while(0);
  1629  0003C4  9A8B               	bcf	3979,5,c	;volatile
  1630                           
  1631                           ;main.c: 390: {
  1632                           ;main.c: 391: led_color = (uint32_t)meas_tune << 4;
  1633                           
  1634                           ;main.c: 389: if (((1)))
  1635  0003C6  0100               	movlb	0	; () banked
  1636  0003C8  51DC               	movf	_meas_tune& (0+255),w,b
  1637  0003CA  6FE1               	movwf	??_main& (0+255),b
  1638  0003CC  51DD               	movf	(_meas_tune+1)& (0+255),w,b
  1639  0003CE  6FE2               	movwf	(??_main+1)& (0+255),b
  1640  0003D0  6BE3               	clrf	(??_main+2)& (0+255),b
  1641  0003D2  6BE4               	clrf	(??_main+3)& (0+255),b
  1642  0003D4  0E04               	movlw	4
  1643  0003D6                     u2005:
  1644  0003D6  90D8               	bcf	status,0,c
  1645  0003D8  37E1               	rlcf	??_main& (0+255),f,b
  1646  0003DA  37E2               	rlcf	(??_main+1)& (0+255),f,b
  1647  0003DC  37E3               	rlcf	(??_main+2)& (0+255),f,b
  1648  0003DE  37E4               	rlcf	(??_main+3)& (0+255),f,b
  1649  0003E0  2EE8               	decfsz	wreg,f,c
  1650  0003E2  D7F9               	goto	u2005
  1651  0003E4  C0E1  F0D4         	movff	??_main,_led_color
  1652  0003E8  C0E2  F0D5         	movff	??_main+1,_led_color+1
  1653  0003EC  C0E3  F0D6         	movff	??_main+2,_led_color+2
  1654  0003F0  C0E4  F0D7         	movff	??_main+3,_led_color+3
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 392: prev_color = led_color + 1u;
  1658  0003F4  0E01               	movlw	1
  1659  0003F6  25D4               	addwf	_led_color& (0+255),w,b
  1660  0003F8  6FC8               	movwf	_prev_color& (0+255),b
  1661  0003FA  0E00               	movlw	0
  1662  0003FC  21D5               	addwfc	(_led_color+1)& (0+255),w,b
  1663  0003FE  6FC9               	movwf	(_prev_color+1)& (0+255),b
  1664  000400  0E00               	movlw	0
  1665  000402  21D6               	addwfc	(_led_color+2)& (0+255),w,b
  1666  000404  6FCA               	movwf	(_prev_color+2)& (0+255),b
  1667  000406  0E00               	movlw	0
  1668  000408  21D7               	addwfc	(_led_color+3)& (0+255),w,b
  1669  00040A  6FCB               	movwf	(_prev_color+3)& (0+255),b
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 397: {
  1673                           ;main.c: 398: printf("\n\n\rLED   0x%08lX",led_color);
  1674                           
  1675                           ; BSR set to: 0
  1676                           
  1677                           ;main.c: 393: }
  1678                           ;main.c: 396: if ( ((1)) )
  1679  00040C  0E49               	movlw	low STR_2
  1680  00040E  6E2B               	movwf	printf@f,c
  1681  000410  0E3F               	movlw	high STR_2
  1682  000412  6E2C               	movwf	printf@f+1,c
  1683  000414  C0D4  F02D         	movff	_led_color,?_printf+2
  1684  000418  C0D5  F02E         	movff	_led_color+1,?_printf+3
  1685  00041C  C0D6  F02F         	movff	_led_color+2,?_printf+4
  1686  000420  C0D7  F030         	movff	_led_color+3,?_printf+5
  1687  000424  ECDA  F002         	call	_printf	;wreg free
  1688                           
  1689                           ;main.c: 399: printf("\n\rSTAT  0x%02X",reg_status);
  1690  000428  0E79               	movlw	low STR_3
  1691  00042A  6E2B               	movwf	printf@f,c
  1692  00042C  0E3F               	movlw	high STR_3
  1693  00042E  6E2C               	movwf	printf@f+1,c
  1694  000430  C0E0  F02D         	movff	_reg_status,?_printf+2
  1695  000434  6A2E               	clrf	?_printf+3,c
  1696  000436  ECDA  F002         	call	_printf	;wreg free
  1697                           
  1698                           ;main.c: 400: printf("\n\rCTRL  0x%02X",reg_control);
  1699  00043A  0E6A               	movlw	low STR_4
  1700  00043C  6E2B               	movwf	printf@f,c
  1701  00043E  0E3F               	movlw	high STR_4
  1702  000440  6E2C               	movwf	printf@f+1,c
  1703  000442  C0DF  F02D         	movff	_reg_control,?_printf+2
  1704  000446  6A2E               	clrf	?_printf+3,c
  1705  000448  ECDA  F002         	call	_printf	;wreg free
  1706                           
  1707                           ;main.c: 401: printf("\n\rST_CNT  %u",pi_power.count);
  1708  00044C  0EF1               	movlw	low STR_5
  1709  00044E  6E2B               	movwf	printf@f,c
  1710  000450  0E3F               	movlw	high STR_5
  1711  000452  6E2C               	movwf	printf@f+1,c
  1712  000454  C0CE  F02D         	movff	_pi_power+2,?_printf+2
  1713  000458  C0CF  F02E         	movff	_pi_power+3,?_printf+3
  1714  00045C  ECDA  F002         	call	_printf	;wreg free
  1715                           
  1716                           ;main.c: 402: printf("\n\rSP_CNT  %u",pi_power.stopped_count);
  1717  000460  0EE4               	movlw	low STR_6
  1718  000462  6E2B               	movwf	printf@f,c
  1719  000464  0E3F               	movlw	high STR_6
  1720  000466  6E2C               	movwf	printf@f+1,c
  1721  000468  C0D0  F02D         	movff	_pi_power+4,?_printf+2
  1722  00046C  C0D1  F02E         	movff	_pi_power+5,?_printf+3
  1723  000470  ECDA  F002         	call	_printf	;wreg free
  1724                           
  1725                           ;main.c: 403: printf("\n\rSTATE   %u",pi_power.state);
  1726  000474  0EB0               	movlw	low STR_7
  1727  000476  6E2B               	movwf	printf@f,c
  1728  000478  0E3F               	movlw	high STR_7
  1729  00047A  6E2C               	movwf	printf@f+1,c
  1730  00047C  C0CC  F02D         	movff	_pi_power,?_printf+2
  1731  000480  6A2E               	clrf	?_printf+3,c
  1732  000482  ECDA  F002         	call	_printf	;wreg free
  1733                           
  1734                           ;main.c: 404: printf("\n\rAC_ON   %u",pi_power.power_switch);
  1735  000486  0EBD               	movlw	low STR_8
  1736  000488  6E2B               	movwf	printf@f,c
  1737  00048A  0E3F               	movlw	high STR_8
  1738  00048C  6E2C               	movwf	printf@f+1,c
  1739  00048E  C0D3  F02D         	movff	_pi_power+7,?_printf+2
  1740  000492  6A2E               	clrf	?_printf+3,c
  1741  000494  ECDA  F002         	call	_printf	;wreg free
  1742                           
  1743                           ;main.c: 405: printf("\n\rPI_RUN  %u",pi_power.running);
  1744  000498  0ED7               	movlw	low STR_9
  1745  00049A  6E2B               	movwf	printf@f,c
  1746  00049C  0E3F               	movlw	high STR_9
  1747  00049E  6E2C               	movwf	printf@f+1,c
  1748  0004A0  C0D2  F02D         	movff	_pi_power+6,?_printf+2
  1749  0004A4  6A2E               	clrf	?_printf+3,c
  1750  0004A6  ECDA  F002         	call	_printf	;wreg free
  1751                           
  1752                           ;main.c: 406: printf("\n\rTUNE    %u",meas_tune);
  1753  0004AA  0EA3               	movlw	low STR_10
  1754  0004AC  6E2B               	movwf	printf@f,c
  1755  0004AE  0E3F               	movlw	high STR_10
  1756  0004B0  6E2C               	movwf	printf@f+1,c
  1757  0004B2  C0DC  F02D         	movff	_meas_tune,?_printf+2
  1758  0004B6  C0DD  F02E         	movff	_meas_tune+1,?_printf+3
  1759  0004BA  ECDA  F002         	call	_printf	;wreg free
  1760                           
  1761                           ;main.c: 407: printf("\n\rBAND    %u",meas_band);
  1762  0004BE  0E96               	movlw	low STR_11
  1763  0004C0  6E2B               	movwf	printf@f,c
  1764  0004C2  0E3F               	movlw	high STR_11
  1765  0004C4  6E2C               	movwf	printf@f+1,c
  1766  0004C6  C0DA  F02D         	movff	_meas_band,?_printf+2
  1767  0004CA  C0DB  F02E         	movff	_meas_band+1,?_printf+3
  1768  0004CE  ECDA  F002         	call	_printf	;wreg free
  1769                           
  1770                           ;main.c: 408: printf("\n\rVOLUME  %u",meas_vol);
  1771  0004D2  0ECA               	movlw	low STR_12
  1772  0004D4  6E2B               	movwf	printf@f,c
  1773  0004D6  0E3F               	movlw	high STR_12
  1774  0004D8  6E2C               	movwf	printf@f+1,c
  1775  0004DA  C0D8  F02D         	movff	_meas_vol,?_printf+2
  1776  0004DE  C0D9  F02E         	movff	_meas_vol+1,?_printf+3
  1777  0004E2  ECDA  F002         	call	_printf	;wreg free
  1778                           
  1779                           ;main.c: 409: printf("\n\n\rPi3V    %u mV",pi3v);
  1780  0004E6  0E38               	movlw	low STR_13
  1781  0004E8  6E2B               	movwf	printf@f,c
  1782  0004EA  0E3F               	movlw	high STR_13
  1783  0004EC  6E2C               	movwf	printf@f+1,c
  1784  0004EE  C0E5  F02D         	movff	main@pi3v,?_printf+2
  1785  0004F2  C0E6  F02E         	movff	main@pi3v+1,?_printf+3
  1786  0004F6  ECDA  F002         	call	_printf	;wreg free
  1787                           
  1788                           ;main.c: 410: printf("\n\rPi5V    %u mV",pi5v);
  1789  0004FA  0E5A               	movlw	low STR_14
  1790  0004FC  6E2B               	movwf	printf@f,c
  1791  0004FE  0E3F               	movlw	high STR_14
  1792  000500  6E2C               	movwf	printf@f+1,c
  1793  000502  C0E7  F02D         	movff	main@pi5v,?_printf+2
  1794  000506  C0E8  F02E         	movff	main@pi5v+1,?_printf+3
  1795  00050A  ECDA  F002         	call	_printf	;wreg free
  1796                           
  1797                           ;main.c: 411: }
  1798                           ;main.c: 416: if (prev_color != led_color)
  1799  00050E  0100               	movlb	0	; () banked
  1800  000510  51D4               	movf	_led_color& (0+255),w,b
  1801  000512  19C8               	xorwf	_prev_color& (0+255),w,b
  1802  000514  E10A               	bnz	u2010
  1803  000516  51D5               	movf	(_led_color+1)& (0+255),w,b
  1804  000518  19C9               	xorwf	(_prev_color+1)& (0+255),w,b
  1805  00051A  E107               	bnz	u2010
  1806  00051C  51D6               	movf	(_led_color+2)& (0+255),w,b
  1807  00051E  19CA               	xorwf	(_prev_color+2)& (0+255),w,b
  1808  000520  E104               	bnz	u2010
  1809  000522  51D7               	movf	(_led_color+3)& (0+255),w,b
  1810  000524  19CB               	xorwf	(_prev_color+3)& (0+255),w,b
  1811  000526  B4D8               	btfsc	status,2,c
  1812  000528  D018               	goto	l402
  1813  00052A                     u2010:
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 417: {
  1817                           ;main.c: 420: (INTCONbits.GIE = 0);
  1818  00052A  9EF2               	bcf	intcon,7,c	;volatile
  1819                           
  1820                           ;main.c: 422: (INTCONbits.PEIE = 0);
  1821  00052C  9CF2               	bcf	intcon,6,c	;volatile
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 425: OSCILLATOR_FastClock();
  1825  00052E  ECEF  F006         	call	_OSCILLATOR_FastClock	;wreg free
  1826                           
  1827                           ;main.c: 426: ws2812_send(led_color);
  1828  000532  C0D4  F015         	movff	_led_color,ws2812_send@led
  1829  000536  C0D5  F016         	movff	_led_color+1,ws2812_send@led+1
  1830  00053A  C0D6  F017         	movff	_led_color+2,ws2812_send@led+2
  1831  00053E  C0D7  F018         	movff	_led_color+3,ws2812_send@led+3
  1832  000542  EC6E  F005         	call	_ws2812_send	;wreg free
  1833                           
  1834                           ;main.c: 429: OSCILLATOR_Initialize();
  1835  000546  ECE8  F006         	call	_OSCILLATOR_Initialize	;wreg free
  1836                           
  1837                           ;main.c: 431: prev_color = led_color;
  1838  00054A  C0D4  F0C8         	movff	_led_color,_prev_color
  1839  00054E  C0D5  F0C9         	movff	_led_color+1,_prev_color+1
  1840  000552  C0D6  F0CA         	movff	_led_color+2,_prev_color+2
  1841  000556  C0D7  F0CB         	movff	_led_color+3,_prev_color+3
  1842  00055A                     l402:
  1843                           
  1844                           ;main.c: 432: }
  1845                           ;main.c: 435: (INTCONbits.GIE = 1);
  1846  00055A  8EF2               	bsf	intcon,7,c	;volatile
  1847                           
  1848                           ;main.c: 437: (INTCONbits.PEIE = 1);
  1849  00055C  8CF2               	bsf	intcon,6,c	;volatile
  1850  00055E  ECFC  F006         	call	_TMR5_HasOverflowOccured	;wreg free
  1851  000562  0900               	iorlw	0
  1852  000564  B4D8               	btfsc	status,2,c
  1853  000566  D7FB               	goto	l404
  1854                           
  1855                           ;main.c: 447: if (++led_pattern_idx >= (12))
  1856  000568  0100               	movlb	0	; () banked
  1857  00056A  2BDE               	incf	_led_pattern_idx& (0+255),f,b
  1858  00056C  0E0B               	movlw	11
  1859  00056E  65DE               	cpfsgt	_led_pattern_idx& (0+255),b
  1860  000570  D002               	goto	l406
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;main.c: 448: {
  1864                           ;main.c: 449: led_pattern_idx = 0;
  1865  000572  0E00               	movlw	0
  1866  000574  6FDE               	movwf	_led_pattern_idx& (0+255),b
  1867  000576                     l406:
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 450: }
  1871                           ;main.c: 452: if (led_pattern_tbl[pi_power.state][led_pattern_idx] == 0)
  1872                           
  1873                           ; BSR set to: 0
  1874  000576  51CC               	movf	_pi_power& (0+255),w,b
  1875  000578  0D0C               	mullw	12
  1876  00057A  0E60               	movlw	low _led_pattern_tbl
  1877  00057C  6FE1               	movwf	??_main& (0+255),b
  1878  00057E  0E00               	movlw	high _led_pattern_tbl
  1879  000580  6FE2               	movwf	(??_main+1)& (0+255),b
  1880  000582  50F3               	movf	prodl,w,c
  1881  000584  27E1               	addwf	??_main& (0+255),f,b
  1882  000586  50F4               	movf	prodh,w,c
  1883  000588  23E2               	addwfc	(??_main+1)& (0+255),f,b
  1884  00058A  51DE               	movf	_led_pattern_idx& (0+255),w,b
  1885  00058C  0D01               	mullw	1
  1886  00058E  50F3               	movf	prodl,w,c
  1887  000590  25E1               	addwf	??_main& (0+255),w,b
  1888  000592  6ED9               	movwf	fsr2l,c
  1889  000594  50F4               	movf	prodh,w,c
  1890  000596  21E2               	addwfc	(??_main+1)& (0+255),w,b
  1891  000598  6EDA               	movwf	fsr2h,c
  1892  00059A  50DF               	movf	indf2,w,c
  1893  00059C  A4D8               	btfss	status,2,c
  1894  00059E  D002               	goto	l407
  1895                           
  1896                           ; BSR set to: 0
  1897                           
  1898                           ;main.c: 453: {
  1899                           ;main.c: 454: do { LATCbits.LATC0 = 0; } while(0);
  1900  0005A0  908B               	bcf	3979,0,c	;volatile
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;main.c: 455: }
  1904  0005A2  D001               	goto	l412
  1905  0005A4                     l407:
  1906                           
  1907                           ; BSR set to: 0
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 456: else
  1911                           ;main.c: 457: {
  1912                           ;main.c: 458: do { LATCbits.LATC0 = 1; } while(0);
  1913  0005A4  808B               	bsf	3979,0,c	;volatile
  1914  0005A6                     l412:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 459: }
  1918                           ;main.c: 463: pi_power.power_switch = TMR0_HasOverflowOccured();
  1919                           
  1920                           ; BSR set to: 0
  1921                           
  1922                           ; BSR set to: 0
  1923  0005A6  EC02  F007         	call	_TMR0_HasOverflowOccured	;wreg free
  1924  0005AA  0100               	movlb	0	; () banked
  1925  0005AC  6FD3               	movwf	(_pi_power+7)& (0+255),b
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;main.c: 466: update_status_reg();
  1929  0005AE  ECCA  F005         	call	_update_status_reg	;wreg free
  1930  0005B2  D58D               	goto	l362
  1931  0005B4                     __end_of_main:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           prodh	equ	0xFF4
  1938                           prodl	equ	0xFF3
  1939                           intcon	equ	0xFF2
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           indf2	equ	0xFDF
  1945                           fsr2h	equ	0xFDA
  1946                           fsr2l	equ	0xFD9
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function _ws2812_send *****************
  1950 ;; Defined at:
  1951 ;;		line 7 in file "ws2812.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  led             4   20[COMRAM] unsigned long 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  j               1   28[COMRAM] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1965 ;;      Params:         4       0       0       0
  1966 ;;      Locals:         1       0       0       0
  1967 ;;      Temps:          4       0       0       0
  1968 ;;      Totals:         9       0       0       0
  1969 ;;Total ram usage:        9 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    3
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		_main
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text1
  1980  000ADC                     __ptext1:
  1981                           	opt stack 0
  1982  000ADC                     _ws2812_send:
  1983                           	opt stack 27
  1984                           
  1985                           ;ws2812.c: 9: unsigned char j;
  1986                           ;ws2812.c: 20: for(j = 0; j < 24; j++) {
  1987                           
  1988                           ;incstack = 0
  1989  000ADC  0E00               	movlw	0
  1990  000ADE  6E1D               	movwf	ws2812_send@j,c
  1991  000AE0                     l2104:
  1992  000AE0  0E17               	movlw	23
  1993  000AE2  641D               	cpfsgt	ws2812_send@j,c
  1994  000AE4  D001               	goto	l468
  1995  000AE6  D024               	goto	u1280
  1996  000AE8                     l468:
  1997                           
  1998                           ;ws2812.c: 24: if (led & 1) {
  1999  000AE8  A015               	btfss	ws2812_send@led,0,c
  2000  000AEA  D006               	goto	l470
  2001  000AEC  8282               	bsf	3970,1,c	;# 
  2002  000AEE  F000               	nop		;# 
  2003  000AF0  F000               	nop		;# 
  2004  000AF2  F000               	nop		;# 
  2005  000AF4  9282               	bcf	3970,1,c	;# 
  2006                           
  2007                           ;ws2812.c: 33: } else {
  2008  000AF6  D005               	goto	l471
  2009  000AF8                     l470:
  2010  000AF8  8282               	bsf	3970,1,c	;# 
  2011  000AFA  9282               	bcf	3970,1,c	;# 
  2012  000AFC  F000               	nop		;# 
  2013  000AFE  F000               	nop		;# 
  2014  000B00  F000               	nop		;# 
  2015  000B02                     l471:
  2016                           
  2017                           ;ws2812.c: 42: }
  2018                           ;ws2812.c: 45: led = led >> 1L;
  2019  000B02  C015  F019         	movff	ws2812_send@led,??_ws2812_send
  2020  000B06  C016  F01A         	movff	ws2812_send@led+1,??_ws2812_send+1
  2021  000B0A  C017  F01B         	movff	ws2812_send@led+2,??_ws2812_send+2
  2022  000B0E  C018  F01C         	movff	ws2812_send@led+3,??_ws2812_send+3
  2023  000B12  90D8               	bcf	status,0,c
  2024  000B14  321C               	rrcf	??_ws2812_send+3,f,c
  2025  000B16  321B               	rrcf	??_ws2812_send+2,f,c
  2026  000B18  321A               	rrcf	??_ws2812_send+1,f,c
  2027  000B1A  3219               	rrcf	??_ws2812_send,f,c
  2028  000B1C  C019  F015         	movff	??_ws2812_send,ws2812_send@led
  2029  000B20  C01A  F016         	movff	??_ws2812_send+1,ws2812_send@led+1
  2030  000B24  C01B  F017         	movff	??_ws2812_send+2,ws2812_send@led+2
  2031  000B28  C01C  F018         	movff	??_ws2812_send+3,ws2812_send@led+3
  2032  000B2C  2A1D               	incf	ws2812_send@j,f,c
  2033  000B2E  D7D8               	goto	l2104
  2034  000B30                     u1280:
  2035                           
  2036                           ;ws2812.c: 46: }
  2037                           ;ws2812.c: 48: _delay((unsigned long)((50)*(64000000/4000000.0)));
  2038  000B30  0EA0               	movlw	160
  2039  000B32                     u2057:
  2040  000B32  D000               	nop2	
  2041  000B34  2EE8               	decfsz	wreg,f,c
  2042  000B36  D7FD               	bra	u2057
  2043  000B38  8282               	bsf	3970,1,c	;# 
  2044  000B3A  9282               	bcf	3970,1,c	;# 
  2045  000B3C  0012               	return		;funcret
  2046  000B3E                     __end_of_ws2812_send:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           tblptrh	equ	0xFF7
  2050                           tblptrl	equ	0xFF6
  2051                           tablat	equ	0xFF5
  2052                           prodh	equ	0xFF4
  2053                           prodl	equ	0xFF3
  2054                           intcon	equ	0xFF2
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           postdec1	equ	0xFE5
  2058                           fsr1l	equ	0xFE1
  2059                           indf2	equ	0xFDF
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function _update_status_reg *****************
  2065 ;; Defined at:
  2066 ;;		line 471 in file "main.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      void 
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2080 ;;      Params:         0       0       0       0
  2081 ;;      Locals:         0       0       0       0
  2082 ;;      Temps:          6       0       0       0
  2083 ;;      Totals:         6       0       0       0
  2084 ;;Total ram usage:        6 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    3
  2087 ;; This function calls:
  2088 ;;		Nothing
  2089 ;; This function is called by:
  2090 ;;		_main
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text2
  2095  000B94                     __ptext2:
  2096                           	opt stack 0
  2097  000B94                     _update_status_reg:
  2098                           	opt stack 27
  2099                           
  2100                           ;main.c: 487: reg_status = ((pi_power.power_switch & 1) << 7) |
  2101                           ;main.c: 488: ((PORTDbits.RD2 & 1) << 6) |
  2102                           ;main.c: 489: ((pi_power.running & 1) << 5 ) |
  2103                           ;main.c: 490: ((PORTCbits.RC4 & 1) << 4) |
  2104                           ;main.c: 491: (pi_power.state & 7);
  2105                           
  2106                           ;incstack = 0
  2107  000B94  C0CC  F015         	movff	_pi_power,??_update_status_reg
  2108  000B98  0E07               	movlw	7
  2109  000B9A  1615               	andwf	??_update_status_reg,f,c
  2110  000B9C  A882               	btfss	3970,4,c	;volatile
  2111  000B9E  D003               	goto	u1290
  2112  000BA0  0E10               	movlw	16
  2113  000BA2  6E16               	movwf	(??_update_status_reg+1)& (0+255),c
  2114  000BA4  D001               	goto	u1305
  2115  000BA6                     u1290:
  2116  000BA6  6A16               	clrf	(??_update_status_reg+1)& (0+255),c
  2117  000BA8                     u1305:
  2118  000BA8  C0D2  F017         	movff	_pi_power+6,??_update_status_reg+2
  2119  000BAC  0E01               	movlw	1
  2120  000BAE  1617               	andwf	??_update_status_reg+2,f,c
  2121  000BB0  0E05               	movlw	5
  2122  000BB2  6E18               	movwf	(??_update_status_reg+3)& (0+255),c
  2123  000BB4                     u1315:
  2124  000BB4  90D8               	bcf	status,0,c
  2125  000BB6  3617               	rlcf	??_update_status_reg+2,f,c
  2126  000BB8  2E18               	decfsz	(??_update_status_reg+3)& (0+255),f,c
  2127  000BBA  D7FC               	goto	u1315
  2128  000BBC  A483               	btfss	3971,2,c	;volatile
  2129  000BBE  D003               	goto	u1320
  2130  000BC0  0E40               	movlw	64
  2131  000BC2  6E19               	movwf	(??_update_status_reg+4)& (0+255),c
  2132  000BC4  D001               	goto	u1335
  2133  000BC6                     u1320:
  2134  000BC6  6A19               	clrf	(??_update_status_reg+4)& (0+255),c
  2135  000BC8                     u1335:
  2136  000BC8  C0D3  F01A         	movff	_pi_power+7,??_update_status_reg+5
  2137  000BCC  0E01               	movlw	1
  2138  000BCE  161A               	andwf	??_update_status_reg+5,f,c
  2139  000BD0  0E00               	movlw	0
  2140  000BD2  B01A               	btfsc	??_update_status_reg+5,0,c
  2141  000BD4  0E80               	movlw	128
  2142  000BD6  6E1A               	movwf	??_update_status_reg+5,c
  2143  000BD8  501A               	movf	??_update_status_reg+5,w,c
  2144  000BDA  1019               	iorwf	??_update_status_reg+4,w,c
  2145  000BDC  1017               	iorwf	??_update_status_reg+2,w,c
  2146  000BDE  1016               	iorwf	??_update_status_reg+1,w,c
  2147  000BE0  1015               	iorwf	??_update_status_reg,w,c
  2148  000BE2  0100               	movlb	0	; () banked
  2149  000BE4  6FE0               	movwf	_reg_status& (0+255),b
  2150                           
  2151                           ; BSR set to: 0
  2152  000BE6  0012               	return		;funcret
  2153  000BE8                     __end_of_update_status_reg:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           prodh	equ	0xFF4
  2160                           prodl	equ	0xFF3
  2161                           intcon	equ	0xFF2
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postdec1	equ	0xFE5
  2165                           fsr1l	equ	0xFE1
  2166                           indf2	equ	0xFDF
  2167                           fsr2h	equ	0xFDA
  2168                           fsr2l	equ	0xFD9
  2169                           status	equ	0xFD8
  2170                           
  2171 ;; *************** function _request_pi_stop *****************
  2172 ;; Defined at:
  2173 ;;		line 512 in file "main.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		None
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2187 ;;      Params:         0       0       0       0
  2188 ;;      Locals:         0       0       0       0
  2189 ;;      Temps:          0       0       0       0
  2190 ;;      Totals:         0       0       0       0
  2191 ;;Total ram usage:        0 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    3
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text3
  2202  000E20                     __ptext3:
  2203                           	opt stack 0
  2204  000E20                     _request_pi_stop:
  2205                           	opt stack 27
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;incstack = 0
  2209                           ;main.c: 515: do { LATCbits.LATC4 = 0; } while(0);
  2210  000E20  988B               	bcf	3979,4,c	;volatile
  2211  000E22  0012               	return	
  2212  000E24                     __end_of_request_pi_stop:
  2213                           	opt stack 0
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           prodh	equ	0xFF4
  2219                           prodl	equ	0xFF3
  2220                           intcon	equ	0xFF2
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _request_pi_run *****************
  2231 ;; Defined at:
  2232 ;;		line 506 in file "main.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		None
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2246 ;;      Params:         0       0       0       0
  2247 ;;      Locals:         0       0       0       0
  2248 ;;      Temps:          0       0       0       0
  2249 ;;      Totals:         0       0       0       0
  2250 ;;Total ram usage:        0 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    3
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text4
  2261  000E24                     __ptext4:
  2262                           	opt stack 0
  2263  000E24                     _request_pi_run:
  2264                           	opt stack 27
  2265                           
  2266                           ;incstack = 0
  2267                           ;main.c: 509: do { LATCbits.LATC4 = 1; } while(0);
  2268  000E24  888B               	bsf	3979,4,c	;volatile
  2269  000E26  0012               	return	
  2270  000E28                     __end_of_request_pi_run:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           intcon	equ	0xFF2
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           postdec1	equ	0xFE5
  2282                           fsr1l	equ	0xFE1
  2283                           indf2	equ	0xFDF
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _printf *****************
  2289 ;; Defined at:
  2290 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  f               2   42[COMRAM] PTR const unsigned char 
  2293 ;;		 -> STR_14(16), STR_13(17), STR_12(13), STR_11(13), 
  2294 ;;		 -> STR_10(13), STR_9(13), STR_8(13), STR_7(13), 
  2295 ;;		 -> STR_6(13), STR_5(13), STR_4(15), STR_3(15), 
  2296 ;;		 -> STR_2(17), STR_1(14), 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  idx             1   52[COMRAM] unsigned char 
  2299 ;;  val             4   57[COMRAM] unsigned long 
  2300 ;;  tmpval          4    0        struct .
  2301 ;;  cp              3    0        PTR const unsigned char 
  2302 ;;  width           2   62[COMRAM] int 
  2303 ;;  prec            2   55[COMRAM] int 
  2304 ;;  ap              2   53[COMRAM] PTR void [1]
  2305 ;;		 -> ?_printf(2), 
  2306 ;;  len             2    0        unsigned int 
  2307 ;;  c               1   64[COMRAM] char 
  2308 ;;  flag            1   61[COMRAM] unsigned char 
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  2   42[COMRAM] int 
  2311 ;; Registers used:
  2312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2318 ;;      Params:         6       0       0       0
  2319 ;;      Locals:        13       0       0       0
  2320 ;;      Temps:          4       0       0       0
  2321 ;;      Totals:        23       0       0       0
  2322 ;;Total ram usage:       23 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    5
  2325 ;; This function calls:
  2326 ;;		___lldiv
  2327 ;;		___llmod
  2328 ;;		___wmul
  2329 ;;		_isdigit
  2330 ;;		_putch
  2331 ;; This function is called by:
  2332 ;;		_main
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text5
  2337  0005B4                     __ptext5:
  2338                           	opt stack 0
  2339  0005B4                     _printf:
  2340                           	opt stack 25
  2341                           
  2342                           ;doprnt.c: 466: va_list ap;
  2343                           ;doprnt.c: 499: signed char c;
  2344                           ;doprnt.c: 501: int width;
  2345                           ;doprnt.c: 504: int prec;
  2346                           ;doprnt.c: 508: unsigned char flag;
  2347                           ;doprnt.c: 523: union {
  2348                           ;doprnt.c: 524: unsigned long vd;
  2349                           ;doprnt.c: 525: double integ;
  2350                           ;doprnt.c: 526: } tmpval;
  2351                           ;doprnt.c: 528: unsigned long val;
  2352                           ;doprnt.c: 529: unsigned len;
  2353                           ;doprnt.c: 530: const char * cp;
  2354                           ;doprnt.c: 533: *ap = __va_start();
  2355                           
  2356                           ;incstack = 0
  2357  0005B4  0E2D               	movlw	low (?_printf+2)
  2358  0005B6  6E36               	movwf	printf@ap,c
  2359  0005B8  0E00               	movlw	high (?_printf+2)
  2360  0005BA  6E37               	movwf	printf@ap+1,c
  2361                           
  2362                           ;doprnt.c: 536: while(c = *f++) {
  2363  0005BC  D19B               	goto	u1240
  2364  0005BE                     
  2365                           ;doprnt.c: 538: if(c != '%')
  2366  0005BE  0E25               	movlw	37
  2367  0005C0  1841               	xorwf	printf@c,w,c
  2368  0005C2  B4D8               	btfsc	status,2,c
  2369  0005C4  D004               	goto	l489
  2370                           
  2371                           ;doprnt.c: 540: {
  2372                           ;doprnt.c: 541: (putch(c) );
  2373  0005C6  5041               	movf	printf@c,w,c
  2374  0005C8  EC08  F007         	call	_putch
  2375                           
  2376                           ;doprnt.c: 542: continue;
  2377  0005CC  D193               	goto	u1240
  2378  0005CE                     l489:
  2379                           
  2380                           ;doprnt.c: 543: }
  2381                           ;doprnt.c: 546: width = 0;
  2382  0005CE  0E00               	movlw	0
  2383  0005D0  6E40               	movwf	printf@width+1,c
  2384  0005D2  0E00               	movlw	0
  2385  0005D4  6E3F               	movwf	printf@width,c
  2386                           
  2387                           ;doprnt.c: 548: flag = 0;
  2388  0005D6  0E00               	movlw	0
  2389  0005D8  6E3E               	movwf	printf@flag,c
  2390                           
  2391                           ;doprnt.c: 551: switch(*f) {
  2392                           
  2393                           ;doprnt.c: 550: for(;;) {
  2394  0005DA  D003               	goto	l491
  2395  0005DC                     
  2396                           ;doprnt.c: 580: flag |= 0x04;
  2397  0005DC  843E               	bsf	printf@flag,2,c
  2398                           
  2399                           ;doprnt.c: 581: f++;
  2400  0005DE  4A2B               	infsnz	printf@f,f,c
  2401  0005E0  2A2C               	incf	printf@f+1,f,c
  2402  0005E2                     l491:
  2403  0005E2  C02B  FFF6         	movff	printf@f,tblptrl
  2404  0005E6  C02C  FFF7         	movff	printf@f+1,tblptrh
  2405  0005EA                     	if	0	;tblptru may be non-zero
  2406  0005EA                     	endif
  2407  0005EA                     	if	0	;tblptru may be non-zero
  2408  0005EA                     	endif
  2409  0005EA  0008               	tblrd		*
  2410  0005EC  50F5               	movf	tablat,w,c
  2411                           
  2412                           ; Switch size 1, requested type "space"
  2413                           ; Number of cases is 1, Range of values is 48 to 48
  2414                           ; switch strategies available:
  2415                           ; Name         Instructions Cycles
  2416                           ; simple_byte            4     3 (average)
  2417                           ;	Chosen strategy is simple_byte
  2418  0005EE  0A30               	xorlw	48	; case 48
  2419  0005F0  B4D8               	btfsc	status,2,c
  2420  0005F2  D7F4               	goto	l492
  2421                           
  2422                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2423                           
  2424                           ;doprnt.c: 586: }
  2425                           
  2426                           ;doprnt.c: 585: break;
  2427  0005F4  C02B  FFF6         	movff	printf@f,tblptrl
  2428  0005F8  C02C  FFF7         	movff	printf@f+1,tblptrh
  2429  0005FC                     	if	0	;tblptru may be non-zero
  2430  0005FC                     	endif
  2431  0005FC                     	if	0	;tblptru may be non-zero
  2432  0005FC                     	endif
  2433  0005FC  0008               	tblrd		*
  2434  0005FE  50F5               	movf	tablat,w,c
  2435  000600  ECA8  F006         	call	_isdigit
  2436  000604  A0D8               	btfss	status,0,c
  2437  000606  D03A               	goto	l500
  2438                           
  2439                           ;doprnt.c: 598: width = 0;
  2440  000608  0E00               	movlw	0
  2441  00060A  6E40               	movwf	printf@width+1,c
  2442  00060C  0E00               	movlw	0
  2443  00060E  6E3F               	movwf	printf@width,c
  2444  000610                     
  2445                           ;doprnt.c: 600: width *= 10;
  2446  000610  C03F  F015         	movff	printf@width,___wmul@multiplier
  2447  000614  C040  F016         	movff	printf@width+1,___wmul@multiplier+1
  2448  000618  0E00               	movlw	0
  2449  00061A  6E18               	movwf	___wmul@multiplicand+1,c
  2450  00061C  0E0A               	movlw	10
  2451  00061E  6E17               	movwf	___wmul@multiplicand,c
  2452  000620  EC73  F006         	call	___wmul	;wreg free
  2453  000624  C015  F03F         	movff	?___wmul,printf@width
  2454  000628  C016  F040         	movff	?___wmul+1,printf@width+1
  2455                           
  2456                           ;doprnt.c: 601: width += *f++ - '0';
  2457  00062C  0ED0               	movlw	208
  2458  00062E  6E31               	movwf	??_printf& (0+255),c
  2459  000630  0EFF               	movlw	255
  2460  000632  6E32               	movwf	(??_printf+1)& (0+255),c
  2461  000634  C02B  FFF6         	movff	printf@f,tblptrl
  2462  000638  C02C  FFF7         	movff	printf@f+1,tblptrh
  2463  00063C                     	if	0	;tblptru may be non-zero
  2464  00063C                     	endif
  2465  00063C                     	if	0	;tblptru may be non-zero
  2466  00063C                     	endif
  2467  00063C  0008               	tblrd		*
  2468  00063E  50F5               	movf	tablat,w,c
  2469  000640  6E33               	movwf	(??_printf+2)& (0+255),c
  2470  000642  6A34               	clrf	(??_printf+3)& (0+255),c
  2471  000644  5031               	movf	??_printf,w,c
  2472  000646  2633               	addwf	??_printf+2,f,c
  2473  000648  5032               	movf	??_printf+1,w,c
  2474  00064A  2234               	addwfc	??_printf+3,f,c
  2475  00064C  5033               	movf	??_printf+2,w,c
  2476  00064E  263F               	addwf	printf@width,f,c
  2477  000650  5034               	movf	??_printf+3,w,c
  2478  000652  2240               	addwfc	printf@width+1,f,c
  2479  000654  4A2B               	infsnz	printf@f,f,c
  2480  000656  2A2C               	incf	printf@f+1,f,c
  2481                           
  2482                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2483  000658  C02B  FFF6         	movff	printf@f,tblptrl
  2484  00065C  C02C  FFF7         	movff	printf@f+1,tblptrh
  2485  000660                     	if	0	;tblptru may be non-zero
  2486  000660                     	endif
  2487  000660                     	if	0	;tblptru may be non-zero
  2488  000660                     	endif
  2489  000660  0008               	tblrd		*
  2490  000662  50F5               	movf	tablat,w,c
  2491  000664  ECA8  F006         	call	_isdigit
  2492  000668  A0D8               	btfss	status,0,c
  2493  00066A  D008               	goto	l500
  2494  00066C  D7D1               	goto	l497
  2495  00066E                     
  2496                           ;doprnt.c: 643: flag |= 0x10;
  2497  00066E  883E               	bsf	printf@flag,4,c
  2498                           
  2499                           ;doprnt.c: 644: goto loop;
  2500  000670  D005               	goto	l500
  2501  000672                     
  2502                           ;doprnt.c: 718: case 'x':
  2503                           ;doprnt.c: 721: flag |= 0x80;
  2504  000672  8E3E               	bsf	printf@flag,7,c
  2505                           
  2506                           ;doprnt.c: 723: break;
  2507  000674  D01D               	goto	l506
  2508  000676                     
  2509                           ;doprnt.c: 818: flag |= 0xC0;
  2510  000676  0EC0               	movlw	192
  2511  000678  123E               	iorwf	printf@flag,f,c
  2512                           
  2513                           ;doprnt.c: 822: }
  2514                           
  2515                           ;doprnt.c: 819: break;
  2516  00067A  D01A               	goto	l506
  2517  00067C                     l500:
  2518  00067C  C02B  FFF6         	movff	printf@f,tblptrl
  2519  000680  C02C  FFF7         	movff	printf@f+1,tblptrh
  2520  000684  4A2B               	infsnz	printf@f,f,c
  2521  000686  2A2C               	incf	printf@f+1,f,c
  2522  000688                     	if	0	;tblptru may be non-zero
  2523  000688                     	endif
  2524  000688                     	if	0	;tblptru may be non-zero
  2525  000688                     	endif
  2526  000688  0008               	tblrd		*
  2527  00068A  CFF5 F041          	movff	tablat,printf@c
  2528  00068E  5041               	movf	printf@c,w,c
  2529                           
  2530                           ; Switch size 1, requested type "space"
  2531                           ; Number of cases is 5, Range of values is 0 to 120
  2532                           ; switch strategies available:
  2533                           ; Name         Instructions Cycles
  2534                           ; simple_byte           16     9 (average)
  2535                           ;	Chosen strategy is simple_byte
  2536  000690  0A00               	xorlw	0	; case 0
  2537  000692  B4D8               	btfsc	status,2,c
  2538  000694  0012               	return	
  2539  000696  0A58               	xorlw	88	; case 88
  2540  000698  B4D8               	btfsc	status,2,c
  2541  00069A  D7EB               	goto	l504
  2542  00069C  0A34               	xorlw	52	; case 108
  2543  00069E  B4D8               	btfsc	status,2,c
  2544  0006A0  D7E6               	goto	l503
  2545  0006A2  0A19               	xorlw	25	; case 117
  2546  0006A4  B4D8               	btfsc	status,2,c
  2547  0006A6  D7E7               	goto	l508
  2548  0006A8  0A0D               	xorlw	13	; case 120
  2549  0006AA  B4D8               	btfsc	status,2,c
  2550  0006AC  D7E2               	goto	l504
  2551  0006AE  D122               	goto	u1240
  2552  0006B0                     l506:
  2553                           
  2554                           ;doprnt.c: 1273: {
  2555                           ;doprnt.c: 1281: if(flag & 0x10)
  2556  0006B0  A83E               	btfss	printf@flag,4,c
  2557  0006B2  D00E               	goto	l509
  2558                           
  2559                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2560  0006B4  C036  FFD9         	movff	printf@ap,fsr2l
  2561  0006B8  C037  FFDA         	movff	printf@ap+1,fsr2h
  2562  0006BC  CFDE F03A          	movff	postinc2,printf@val
  2563  0006C0  CFDE F03B          	movff	postinc2,printf@val+1
  2564  0006C4  CFDE F03C          	movff	postinc2,printf@val+2
  2565  0006C8  CFDE F03D          	movff	postinc2,printf@val+3
  2566  0006CC  0E04               	movlw	4
  2567  0006CE  D00F               	goto	L5
  2568  0006D0                     l509:
  2569                           
  2570                           ;doprnt.c: 1283: else
  2571                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2572  0006D0  C036  FFD9         	movff	printf@ap,fsr2l
  2573  0006D4  C037  FFDA         	movff	printf@ap+1,fsr2h
  2574  0006D8  CFDE F031          	movff	postinc2,??_printf
  2575  0006DC  CFDD F032          	movff	postdec2,??_printf+1
  2576  0006E0  C031  F03A         	movff	??_printf,printf@val
  2577  0006E4  C032  F03B         	movff	??_printf+1,printf@val+1
  2578  0006E8  6A3C               	clrf	printf@val+2,c
  2579  0006EA  6A3D               	clrf	printf@val+3,c
  2580  0006EC  0E02               	movlw	2
  2581  0006EE                     L5:
  2582  0006EE  2636               	addwf	printf@ap,f,c
  2583  0006F0  0E00               	movlw	0
  2584  0006F2  2237               	addwfc	printf@ap+1,f,c
  2585                           
  2586                           ;doprnt.c: 1287: }
  2587                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2588  0006F4  D03C               	goto	l511
  2589  0006F6                     
  2590                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2591  0006F6  0E01               	movlw	1
  2592  0006F8  6E41               	movwf	printf@c,c
  2593  0006FA                     l2034:
  2594  0006FA  0E0A               	movlw	10
  2595  0006FC  1841               	xorwf	printf@c,w,c
  2596  0006FE  B4D8               	btfsc	status,2,c
  2597  000700  D03E               	goto	l516
  2598                           
  2599                           ;doprnt.c: 1306: if(val < dpowers[c])
  2600  000702  5041               	movf	printf@c,w,c
  2601  000704  0D04               	mullw	4
  2602  000706  0EDF               	movlw	low _dpowers
  2603  000708  24F3               	addwf	prodl,w,c
  2604  00070A  6EF6               	movwf	tblptrl,c
  2605  00070C  0E3E               	movlw	high _dpowers
  2606  00070E  20F4               	addwfc	prodh,w,c
  2607  000710  6EF7               	movwf	tblptrh,c
  2608  000712                     	if	0	;There are less than 3 active tblptr bytes
  2609  000712                     	endif
  2610  000712  0009               	tblrd		*+
  2611  000714  50F5               	movf	tablat,w,c
  2612  000716  5C3A               	subwf	printf@val,w,c
  2613  000718  0009               	tblrd		*+
  2614  00071A  50F5               	movf	tablat,w,c
  2615  00071C  583B               	subwfb	printf@val+1,w,c
  2616  00071E  0009               	tblrd		*+
  2617  000720  50F5               	movf	tablat,w,c
  2618  000722  583C               	subwfb	printf@val+2,w,c
  2619  000724  0009               	tblrd		*+
  2620  000726  50F5               	movf	tablat,w,c
  2621  000728  583D               	subwfb	printf@val+3,w,c
  2622  00072A  A0D8               	btfss	status,0,c
  2623  00072C  D028               	goto	l516
  2624                           
  2625                           ;doprnt.c: 1307: break;
  2626  00072E  2A41               	incf	printf@c,f,c
  2627  000730  D7E4               	goto	l2034
  2628  000732                     
  2629                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2630  000732  0E01               	movlw	1
  2631  000734  6E41               	movwf	printf@c,c
  2632  000736                     l2048:
  2633  000736  0E08               	movlw	8
  2634  000738  1841               	xorwf	printf@c,w,c
  2635  00073A  B4D8               	btfsc	status,2,c
  2636  00073C  D020               	goto	l516
  2637                           
  2638                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2639  00073E  5041               	movf	printf@c,w,c
  2640  000740  0D04               	mullw	4
  2641  000742  0E07               	movlw	low _hexpowers
  2642  000744  24F3               	addwf	prodl,w,c
  2643  000746  6EF6               	movwf	tblptrl,c
  2644  000748  0E3F               	movlw	high _hexpowers
  2645  00074A  20F4               	addwfc	prodh,w,c
  2646  00074C  6EF7               	movwf	tblptrh,c
  2647  00074E                     	if	0	;There are less than 3 active tblptr bytes
  2648  00074E                     	endif
  2649  00074E  0009               	tblrd		*+
  2650  000750  50F5               	movf	tablat,w,c
  2651  000752  5C3A               	subwf	printf@val,w,c
  2652  000754  0009               	tblrd		*+
  2653  000756  50F5               	movf	tablat,w,c
  2654  000758  583B               	subwfb	printf@val+1,w,c
  2655  00075A  0009               	tblrd		*+
  2656  00075C  50F5               	movf	tablat,w,c
  2657  00075E  583C               	subwfb	printf@val+2,w,c
  2658  000760  0009               	tblrd		*+
  2659  000762  50F5               	movf	tablat,w,c
  2660  000764  583D               	subwfb	printf@val+3,w,c
  2661  000766  A0D8               	btfss	status,0,c
  2662  000768  D00A               	goto	l516
  2663                           
  2664                           ;doprnt.c: 1318: break;
  2665  00076A  2A41               	incf	printf@c,f,c
  2666  00076C  D7E4               	goto	l2048
  2667  00076E                     l511:
  2668  00076E  503E               	movf	printf@flag,w,c
  2669  000770  0BC0               	andlw	192
  2670                           
  2671                           ; Switch size 1, requested type "space"
  2672                           ; Number of cases is 2, Range of values is 128 to 192
  2673                           ; switch strategies available:
  2674                           ; Name         Instructions Cycles
  2675                           ; simple_byte            7     4 (average)
  2676                           ;	Chosen strategy is simple_byte
  2677  000772  0A80               	xorlw	128	; case 128
  2678  000774  B4D8               	btfsc	status,2,c
  2679  000776  D7DD               	goto	l517
  2680  000778  0A40               	xorlw	64	; case 192
  2681  00077A  B4D8               	btfsc	status,2,c
  2682  00077C  D7BC               	goto	l512
  2683  00077E                     l516:
  2684                           
  2685                           ;doprnt.c: 1381: if(width > c)
  2686  00077E  0E80               	movlw	128
  2687  000780  BE41               	btfsc	printf@c,7,c
  2688  000782  0E7F               	movlw	127
  2689  000784  6E31               	movwf	??_printf& (0+255),c
  2690  000786  503F               	movf	printf@width,w,c
  2691  000788  5C41               	subwf	printf@c,w,c
  2692  00078A  5040               	movf	printf@width+1,w,c
  2693  00078C  0A80               	xorlw	128
  2694  00078E  5831               	subwfb	??_printf& (0+255),w,c
  2695  000790  B0D8               	btfsc	status,0,c
  2696  000792  D007               	goto	l521
  2697                           
  2698                           ;doprnt.c: 1382: width -= c;
  2699  000794  5041               	movf	printf@c,w,c
  2700  000796  5E3F               	subwf	printf@width,f,c
  2701  000798  0E00               	movlw	0
  2702  00079A  BE41               	btfsc	printf@c,7,c
  2703  00079C  0EFF               	movlw	255
  2704  00079E  5A40               	subwfb	printf@width+1,f,c
  2705  0007A0  D004               	goto	l522
  2706  0007A2                     l521:
  2707                           
  2708                           ;doprnt.c: 1383: else
  2709                           ;doprnt.c: 1384: width = 0;
  2710  0007A2  0E00               	movlw	0
  2711  0007A4  6E40               	movwf	printf@width+1,c
  2712  0007A6  0E00               	movlw	0
  2713  0007A8  6E3F               	movwf	printf@width,c
  2714  0007AA                     l522:
  2715                           
  2716                           ;doprnt.c: 1387: if(flag & 0x04) {
  2717  0007AA  A43E               	btfss	printf@flag,2,c
  2718  0007AC  D00B               	goto	l523
  2719  0007AE                     
  2720                           ;doprnt.c: 1415: if(width)
  2721  0007AE  503F               	movf	printf@width,w,c
  2722  0007B0  1040               	iorwf	printf@width+1,w,c
  2723  0007B2  B4D8               	btfsc	status,2,c
  2724  0007B4  D015               	goto	u1230
  2725                           
  2726                           ;doprnt.c: 1417: (putch('0') );
  2727                           
  2728                           ;doprnt.c: 1416: do
  2729  0007B6  0E30               	movlw	48
  2730  0007B8  EC08  F007         	call	_putch
  2731                           
  2732                           ;doprnt.c: 1418: while(--width);
  2733  0007BC  063F               	decf	printf@width,f,c
  2734  0007BE  A0D8               	btfss	status,0,c
  2735  0007C0  0640               	decf	printf@width+1,f,c
  2736  0007C2  D7F5               	goto	L7
  2737  0007C4                     l523:
  2738                           
  2739                           ;doprnt.c: 1422: {
  2740                           ;doprnt.c: 1424: if(width
  2741                           ;doprnt.c: 1428: )
  2742  0007C4  503F               	movf	printf@width,w,c
  2743  0007C6  1040               	iorwf	printf@width+1,w,c
  2744  0007C8  B4D8               	btfsc	status,2,c
  2745  0007CA  D00A               	goto	u1230
  2746  0007CC                     u1220:
  2747                           
  2748                           ;doprnt.c: 1430: (putch(' ') );
  2749                           
  2750                           ;doprnt.c: 1429: do
  2751  0007CC  0E20               	movlw	32
  2752  0007CE  EC08  F007         	call	_putch
  2753                           
  2754                           ;doprnt.c: 1431: while(--width);
  2755  0007D2  063F               	decf	printf@width,f,c
  2756  0007D4  A0D8               	btfss	status,0,c
  2757  0007D6  0640               	decf	printf@width+1,f,c
  2758  0007D8  503F               	movf	printf@width,w,c
  2759  0007DA  1040               	iorwf	printf@width+1,w,c
  2760  0007DC  A4D8               	btfss	status,2,c
  2761  0007DE  D7F6               	goto	u1220
  2762  0007E0                     u1230:
  2763                           
  2764                           ;doprnt.c: 1469: }
  2765                           ;doprnt.c: 1472: prec = c;
  2766  0007E0  5041               	movf	printf@c,w,c
  2767  0007E2  6E38               	movwf	printf@prec,c
  2768  0007E4  6A39               	clrf	printf@prec+1,c
  2769  0007E6  BE38               	btfsc	printf@prec,7,c
  2770  0007E8  0639               	decf	printf@prec+1,f,c
  2771                           
  2772                           ;doprnt.c: 1474: while(prec--) {
  2773  0007EA  D07C               	goto	l531
  2774  0007EC                     
  2775                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2776  0007EC  C038  F031         	movff	printf@prec,??_printf
  2777  0007F0  C039  F032         	movff	printf@prec+1,??_printf+1
  2778  0007F4  90D8               	bcf	status,0,c
  2779  0007F6  3631               	rlcf	??_printf,f,c
  2780  0007F8  3632               	rlcf	??_printf+1,f,c
  2781  0007FA  90D8               	bcf	status,0,c
  2782  0007FC  3631               	rlcf	??_printf,f,c
  2783  0007FE  3632               	rlcf	??_printf+1,f,c
  2784  000800  0EDF               	movlw	low _dpowers
  2785  000802  2431               	addwf	??_printf,w,c
  2786  000804  6EF6               	movwf	tblptrl,c
  2787  000806  0E3E               	movlw	high _dpowers
  2788  000808  2032               	addwfc	??_printf+1,w,c
  2789  00080A  6EF7               	movwf	tblptrh,c
  2790  00080C                     	if	0	;There are less than 3 active tblptr bytes
  2791  00080C                     	endif
  2792  00080C  0009               	tblrd		*+
  2793  00080E  CFF5 F019          	movff	tablat,___lldiv@divisor
  2794  000812  0009               	tblrd		*+
  2795  000814  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  2796  000818  0009               	tblrd		*+
  2797  00081A  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  2798  00081E  000A               	tblrd		*-
  2799  000820  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  2800  000824  C03A  F015         	movff	printf@val,___lldiv@dividend
  2801  000828  C03B  F016         	movff	printf@val+1,___lldiv@dividend+1
  2802  00082C  C03C  F017         	movff	printf@val+2,___lldiv@dividend+2
  2803  000830  C03D  F018         	movff	printf@val+3,___lldiv@dividend+3
  2804  000834  EC87  F004         	call	___lldiv	;wreg free
  2805  000838  C015  F022         	movff	?___lldiv,___llmod@dividend
  2806  00083C  C016  F023         	movff	?___lldiv+1,___llmod@dividend+1
  2807  000840  C017  F024         	movff	?___lldiv+2,___llmod@dividend+2
  2808  000844  C018  F025         	movff	?___lldiv+3,___llmod@dividend+3
  2809  000848  0E0A               	movlw	10
  2810  00084A  6E26               	movwf	___llmod@divisor,c
  2811  00084C  0E00               	movlw	0
  2812  00084E  6E27               	movwf	___llmod@divisor+1,c
  2813  000850  0E00               	movlw	0
  2814  000852  6E28               	movwf	___llmod@divisor+2,c
  2815  000854  0E00               	movlw	0
  2816  000856  6E29               	movwf	___llmod@divisor+3,c
  2817  000858  EC3B  F005         	call	___llmod	;wreg free
  2818  00085C  5022               	movf	?___llmod,w,c
  2819  00085E  0F30               	addlw	48
  2820  000860  6E41               	movwf	printf@c,c
  2821                           
  2822                           ;doprnt.c: 1491: break;
  2823  000862  D03D               	goto	l535
  2824  000864                     
  2825                           ;doprnt.c: 1499: {
  2826                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2827  000864  C03A  F015         	movff	printf@val,___lldiv@dividend
  2828  000868  C03B  F016         	movff	printf@val+1,___lldiv@dividend+1
  2829  00086C  C03C  F017         	movff	printf@val+2,___lldiv@dividend+2
  2830  000870  C03D  F018         	movff	printf@val+3,___lldiv@dividend+3
  2831  000874  C038  F031         	movff	printf@prec,??_printf
  2832  000878  C039  F032         	movff	printf@prec+1,??_printf+1
  2833  00087C  90D8               	bcf	status,0,c
  2834  00087E  3631               	rlcf	??_printf,f,c
  2835  000880  3632               	rlcf	??_printf+1,f,c
  2836  000882  90D8               	bcf	status,0,c
  2837  000884  3631               	rlcf	??_printf,f,c
  2838  000886  3632               	rlcf	??_printf+1,f,c
  2839  000888  0E07               	movlw	low _hexpowers
  2840  00088A  2431               	addwf	??_printf,w,c
  2841  00088C  6EF6               	movwf	tblptrl,c
  2842  00088E  0E3F               	movlw	high _hexpowers
  2843  000890  2032               	addwfc	??_printf+1,w,c
  2844  000892  6EF7               	movwf	tblptrh,c
  2845  000894                     	if	0	;There are less than 3 active tblptr bytes
  2846  000894                     	endif
  2847  000894  0009               	tblrd		*+
  2848  000896  CFF5 F019          	movff	tablat,___lldiv@divisor
  2849  00089A  0009               	tblrd		*+
  2850  00089C  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  2851  0008A0  0009               	tblrd		*+
  2852  0008A2  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  2853  0008A6  000A               	tblrd		*-
  2854  0008A8  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  2855  0008AC  EC87  F004         	call	___lldiv	;wreg free
  2856  0008B0  5015               	movf	?___lldiv,w,c
  2857  0008B2  0B0F               	andlw	15
  2858  0008B4  6E35               	movwf	printf@idx,c
  2859                           
  2860                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2861  0008B6  5035               	movf	printf@idx,w,c
  2862  0008B8  0D01               	mullw	1
  2863  0008BA  0E27               	movlw	low STR_15
  2864  0008BC  24F3               	addwf	prodl,w,c
  2865  0008BE  6EF6               	movwf	tblptrl,c
  2866  0008C0  0E3F               	movlw	high STR_15
  2867  0008C2  20F4               	addwfc	prodh,w,c
  2868  0008C4  6EF7               	movwf	tblptrh,c
  2869  0008C6                     	if	0	;There are less than 3 active tblptr bytes
  2870  0008C6                     	endif
  2871  0008C6  0008               	tblrd		*
  2872  0008C8  CFF5 F041          	movff	tablat,printf@c
  2873                           
  2874                           ;doprnt.c: 1523: }
  2875                           
  2876                           ;doprnt.c: 1508: }
  2877                           ;doprnt.c: 1510: break;
  2878  0008CC  D008               	goto	l535
  2879  0008CE                     l2094:
  2880  0008CE  503E               	movf	printf@flag,w,c
  2881  0008D0  0BC0               	andlw	192
  2882                           
  2883                           ; Switch size 1, requested type "space"
  2884                           ; Number of cases is 2, Range of values is 128 to 192
  2885                           ; switch strategies available:
  2886                           ; Name         Instructions Cycles
  2887                           ; simple_byte            7     4 (average)
  2888                           ;	Chosen strategy is simple_byte
  2889  0008D2  0A80               	xorlw	128	; case 128
  2890  0008D4  B4D8               	btfsc	status,2,c
  2891  0008D6  D7C6               	goto	l536
  2892  0008D8  0A40               	xorlw	64	; case 192
  2893  0008DA  B4D8               	btfsc	status,2,c
  2894  0008DC  D787               	goto	l534
  2895  0008DE                     l535:
  2896                           
  2897                           ;doprnt.c: 1524: (putch(c) );
  2898  0008DE  5041               	movf	printf@c,w,c
  2899  0008E0  EC08  F007         	call	_putch
  2900  0008E4                     l531:
  2901  0008E4  0638               	decf	printf@prec,f,c
  2902  0008E6  A0D8               	btfss	status,0,c
  2903  0008E8  0639               	decf	printf@prec+1,f,c
  2904  0008EA  2838               	incf	printf@prec,w,c
  2905  0008EC  E1F0               	bnz	l2094
  2906  0008EE  2839               	incf	printf@prec+1,w,c
  2907  0008F0  A4D8               	btfss	status,2,c
  2908  0008F2  D7ED               	goto	l533
  2909  0008F4                     u1240:
  2910  0008F4  C02B  FFF6         	movff	printf@f,tblptrl
  2911  0008F8  C02C  FFF7         	movff	printf@f+1,tblptrh
  2912  0008FC  4A2B               	infsnz	printf@f,f,c
  2913  0008FE  2A2C               	incf	printf@f+1,f,c
  2914  000900                     	if	0	;tblptru may be non-zero
  2915  000900                     	endif
  2916  000900                     	if	0	;tblptru may be non-zero
  2917  000900                     	endif
  2918  000900  0008               	tblrd		*
  2919  000902  CFF5 F041          	movff	tablat,printf@c
  2920  000906  5041               	movf	printf@c,w,c
  2921  000908  B4D8               	btfsc	status,2,c
  2922  00090A  0012               	return	
  2923  00090C  D658               	goto	l488
  2924  00090E                     __end_of_printf:
  2925                           	opt stack 0
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           intcon	equ	0xFF2
  2933                           postinc0	equ	0xFEE
  2934                           wreg	equ	0xFE8
  2935                           postdec1	equ	0xFE5
  2936                           fsr1l	equ	0xFE1
  2937                           indf2	equ	0xFDF
  2938                           postinc2	equ	0xFDE
  2939                           postdec2	equ	0xFDD
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _putch *****************
  2945 ;; Defined at:
  2946 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  txData          1    wreg     unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  txData          1   21[COMRAM] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, cstack
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2960 ;;      Params:         0       0       0       0
  2961 ;;      Locals:         1       0       0       0
  2962 ;;      Temps:          0       0       0       0
  2963 ;;      Totals:         1       0       0       0
  2964 ;;Total ram usage:        1 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    4
  2967 ;; This function calls:
  2968 ;;		_EUSART1_Write
  2969 ;; This function is called by:
  2970 ;;		_printf
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text6
  2975  000E10                     __ptext6:
  2976                           	opt stack 0
  2977  000E10                     _putch:
  2978                           	opt stack 25
  2979                           
  2980                           ;incstack = 0
  2981                           ;putch@txData stored from wreg
  2982  000E10  6E16               	movwf	putch@txData,c
  2983                           
  2984                           ;eusart1.c: 112: EUSART1_Write(txData);
  2985  000E12  5016               	movf	putch@txData,w,c
  2986  000E14  ECF6  F006         	call	_EUSART1_Write
  2987  000E18  0012               	return		;funcret
  2988  000E1A                     __end_of_putch:
  2989                           	opt stack 0
  2990                           tblptru	equ	0xFF8
  2991                           tblptrh	equ	0xFF7
  2992                           tblptrl	equ	0xFF6
  2993                           tablat	equ	0xFF5
  2994                           prodh	equ	0xFF4
  2995                           prodl	equ	0xFF3
  2996                           intcon	equ	0xFF2
  2997                           postinc0	equ	0xFEE
  2998                           wreg	equ	0xFE8
  2999                           postdec1	equ	0xFE5
  3000                           fsr1l	equ	0xFE1
  3001                           indf2	equ	0xFDF
  3002                           postinc2	equ	0xFDE
  3003                           postdec2	equ	0xFDD
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _EUSART1_Write *****************
  3009 ;; Defined at:
  3010 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  txData          1    wreg     unsigned char 
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;  txData          1   20[COMRAM] unsigned char 
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3024 ;;      Params:         0       0       0       0
  3025 ;;      Locals:         1       0       0       0
  3026 ;;      Temps:          0       0       0       0
  3027 ;;      Totals:         1       0       0       0
  3028 ;;Total ram usage:        1 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    3
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_putch
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text7
  3039  000DEC                     __ptext7:
  3040                           	opt stack 0
  3041  000DEC                     _EUSART1_Write:
  3042                           	opt stack 25
  3043                           
  3044                           ;incstack = 0
  3045                           ;EUSART1_Write@txData stored from wreg
  3046  000DEC  6E15               	movwf	EUSART1_Write@txData,c
  3047  000DEE                     
  3048                           ;eusart1.c: 99: {
  3049                           
  3050                           ;eusart1.c: 98: while(0 == PIR1bits.TX1IF)
  3051  000DEE  A89E               	btfss	3998,4,c	;volatile
  3052  000DF0  D7FE               	goto	l1794
  3053                           
  3054                           ;eusart1.c: 100: }
  3055                           ;eusart1.c: 102: TXREG1 = txData;
  3056  000DF2  C015  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3057  000DF6  0012               	return		;funcret
  3058  000DF8                     __end_of_EUSART1_Write:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           prodh	equ	0xFF4
  3065                           prodl	equ	0xFF3
  3066                           intcon	equ	0xFF2
  3067                           postinc0	equ	0xFEE
  3068                           wreg	equ	0xFE8
  3069                           postdec1	equ	0xFE5
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           postinc2	equ	0xFDE
  3073                           postdec2	equ	0xFDD
  3074                           fsr2h	equ	0xFDA
  3075                           fsr2l	equ	0xFD9
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _isdigit *****************
  3079 ;; Defined at:
  3080 ;;		line 8 in file "D:\Program Files\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  c               1    wreg     unsigned char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  c               1   22[COMRAM] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;		None               void
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3094 ;;      Params:         0       0       0       0
  3095 ;;      Locals:         2       0       0       0
  3096 ;;      Temps:          1       0       0       0
  3097 ;;      Totals:         3       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    3
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_printf
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text8
  3109  000D50                     __ptext8:
  3110                           	opt stack 0
  3111  000D50                     _isdigit:
  3112                           	opt stack 26
  3113                           
  3114                           ;incstack = 0
  3115                           ;isdigit@c stored from wreg
  3116  000D50  6E17               	movwf	isdigit@c,c
  3117  000D52  0E00               	movlw	0
  3118  000D54  6E16               	movwf	_isdigit$1997,c
  3119  000D56  0E3A               	movlw	58
  3120  000D58  6017               	cpfslt	isdigit@c,c
  3121  000D5A  D005               	goto	l869
  3122  000D5C  0E2F               	movlw	47
  3123  000D5E  6417               	cpfsgt	isdigit@c,c
  3124  000D60  D002               	goto	l869
  3125  000D62  0E01               	movlw	1
  3126  000D64  6E16               	movwf	_isdigit$1997,c
  3127  000D66                     l869:
  3128  000D66  C016  F015         	movff	_isdigit$1997,??_isdigit
  3129  000D6A  3015               	rrcf	??_isdigit,w,c
  3130  000D6C  0012               	return	
  3131  000D6E                     __end_of_isdigit:
  3132                           	opt stack 0
  3133                           tblptru	equ	0xFF8
  3134                           tblptrh	equ	0xFF7
  3135                           tblptrl	equ	0xFF6
  3136                           tablat	equ	0xFF5
  3137                           prodh	equ	0xFF4
  3138                           prodl	equ	0xFF3
  3139                           intcon	equ	0xFF2
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           postdec2	equ	0xFDD
  3147                           fsr2h	equ	0xFDA
  3148                           fsr2l	equ	0xFD9
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function ___wmul *****************
  3152 ;; Defined at:
  3153 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  multiplier      2   20[COMRAM] unsigned int 
  3156 ;;  multiplicand    2   22[COMRAM] unsigned int 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  product         2   24[COMRAM] unsigned int 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  2   20[COMRAM] unsigned int 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0, prodl, prodh
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3168 ;;      Params:         4       0       0       0
  3169 ;;      Locals:         2       0       0       0
  3170 ;;      Temps:          0       0       0       0
  3171 ;;      Totals:         6       0       0       0
  3172 ;;Total ram usage:        6 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    3
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_printf
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text9
  3183  000CE6                     __ptext9:
  3184                           	opt stack 0
  3185  000CE6                     ___wmul:
  3186                           	opt stack 26
  3187                           
  3188                           ;incstack = 0
  3189  000CE6  5015               	movf	___wmul@multiplier,w,c
  3190  000CE8  0217               	mulwf	___wmul@multiplicand,c
  3191  000CEA  CFF3 F019          	movff	prodl,___wmul@product
  3192  000CEE  CFF4 F01A          	movff	prodh,___wmul@product+1
  3193  000CF2  5015               	movf	___wmul@multiplier,w,c
  3194  000CF4  0218               	mulwf	___wmul@multiplicand+1,c
  3195  000CF6  50F3               	movf	prodl,w,c
  3196  000CF8  261A               	addwf	___wmul@product+1,f,c
  3197  000CFA  5016               	movf	___wmul@multiplier+1,w,c
  3198  000CFC  0217               	mulwf	___wmul@multiplicand,c
  3199  000CFE  50F3               	movf	prodl,w,c
  3200  000D00  261A               	addwf	___wmul@product+1,f,c
  3201  000D02  C019  F015         	movff	___wmul@product,?___wmul
  3202  000D06  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  3203  000D0A  0012               	return	
  3204  000D0C                     __end_of___wmul:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           postdec1	equ	0xFE5
  3216                           fsr1l	equ	0xFE1
  3217                           indf2	equ	0xFDF
  3218                           postinc2	equ	0xFDE
  3219                           postdec2	equ	0xFDD
  3220                           fsr2h	equ	0xFDA
  3221                           fsr2l	equ	0xFD9
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function ___llmod *****************
  3225 ;; Defined at:
  3226 ;;		line 8 in file "D:\Program Files\Microchip\xc8\v1.44\sources\common\llmod.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  dividend        4   33[COMRAM] unsigned long 
  3229 ;;  divisor         4   37[COMRAM] unsigned long 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  counter         1   41[COMRAM] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  4   33[COMRAM] unsigned long 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3241 ;;      Params:         8       0       0       0
  3242 ;;      Locals:         1       0       0       0
  3243 ;;      Temps:          0       0       0       0
  3244 ;;      Totals:         9       0       0       0
  3245 ;;Total ram usage:        9 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    3
  3248 ;; This function calls:
  3249 ;;		Nothing
  3250 ;; This function is called by:
  3251 ;;		_printf
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text10
  3256  000A76                     __ptext10:
  3257                           	opt stack 0
  3258  000A76                     ___llmod:
  3259                           	opt stack 26
  3260                           
  3261                           ;incstack = 0
  3262  000A76  5026               	movf	___llmod@divisor,w,c
  3263  000A78  1027               	iorwf	___llmod@divisor+1,w,c
  3264  000A7A  1028               	iorwf	___llmod@divisor+2,w,c
  3265  000A7C  1029               	iorwf	___llmod@divisor+3,w,c
  3266  000A7E  B4D8               	btfsc	status,2,c
  3267  000A80  D024               	goto	l910
  3268  000A82  0E01               	movlw	1
  3269  000A84  6E2A               	movwf	___llmod@counter,c
  3270  000A86  D006               	goto	l905
  3271  000A88  90D8               	bcf	status,0,c
  3272  000A8A  3626               	rlcf	___llmod@divisor,f,c
  3273  000A8C  3627               	rlcf	___llmod@divisor+1,f,c
  3274  000A8E  3628               	rlcf	___llmod@divisor+2,f,c
  3275  000A90  3629               	rlcf	___llmod@divisor+3,f,c
  3276  000A92  2A2A               	incf	___llmod@counter,f,c
  3277  000A94                     l905:
  3278  000A94  AE29               	btfss	___llmod@divisor+3,7,c
  3279  000A96  D7F8               	goto	l906
  3280  000A98                     u990:
  3281  000A98  5026               	movf	___llmod@divisor,w,c
  3282  000A9A  5C22               	subwf	___llmod@dividend,w,c
  3283  000A9C  5027               	movf	___llmod@divisor+1,w,c
  3284  000A9E  5823               	subwfb	___llmod@dividend+1,w,c
  3285  000AA0  5028               	movf	___llmod@divisor+2,w,c
  3286  000AA2  5824               	subwfb	___llmod@dividend+2,w,c
  3287  000AA4  5029               	movf	___llmod@divisor+3,w,c
  3288  000AA6  5825               	subwfb	___llmod@dividend+3,w,c
  3289  000AA8  A0D8               	btfss	status,0,c
  3290  000AAA  D008               	goto	l909
  3291  000AAC  5026               	movf	___llmod@divisor,w,c
  3292  000AAE  5E22               	subwf	___llmod@dividend,f,c
  3293  000AB0  5027               	movf	___llmod@divisor+1,w,c
  3294  000AB2  5A23               	subwfb	___llmod@dividend+1,f,c
  3295  000AB4  5028               	movf	___llmod@divisor+2,w,c
  3296  000AB6  5A24               	subwfb	___llmod@dividend+2,f,c
  3297  000AB8  5029               	movf	___llmod@divisor+3,w,c
  3298  000ABA  5A25               	subwfb	___llmod@dividend+3,f,c
  3299  000ABC                     l909:
  3300  000ABC  90D8               	bcf	status,0,c
  3301  000ABE  3229               	rrcf	___llmod@divisor+3,f,c
  3302  000AC0  3228               	rrcf	___llmod@divisor+2,f,c
  3303  000AC2  3227               	rrcf	___llmod@divisor+1,f,c
  3304  000AC4  3226               	rrcf	___llmod@divisor,f,c
  3305  000AC6  2E2A               	decfsz	___llmod@counter,f,c
  3306  000AC8  D7E7               	goto	u990
  3307  000ACA                     l910:
  3308  000ACA  C022  F022         	movff	___llmod@dividend,?___llmod
  3309  000ACE  C023  F023         	movff	___llmod@dividend+1,?___llmod+1
  3310  000AD2  C024  F024         	movff	___llmod@dividend+2,?___llmod+2
  3311  000AD6  C025  F025         	movff	___llmod@dividend+3,?___llmod+3
  3312  000ADA  0012               	return		;funcret
  3313  000ADC                     __end_of___llmod:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1l	equ	0xFE1
  3326                           indf2	equ	0xFDF
  3327                           postinc2	equ	0xFDE
  3328                           postdec2	equ	0xFDD
  3329                           fsr2h	equ	0xFDA
  3330                           fsr2l	equ	0xFD9
  3331                           status	equ	0xFD8
  3332                           
  3333 ;; *************** function ___lldiv *****************
  3334 ;; Defined at:
  3335 ;;		line 8 in file "D:\Program Files\Microchip\xc8\v1.44\sources\common\lldiv.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;  dividend        4   20[COMRAM] unsigned long 
  3338 ;;  divisor         4   24[COMRAM] unsigned long 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  quotient        4   28[COMRAM] unsigned long 
  3341 ;;  counter         1   32[COMRAM] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  4   20[COMRAM] unsigned long 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3351 ;;      Params:         8       0       0       0
  3352 ;;      Locals:         5       0       0       0
  3353 ;;      Temps:          0       0       0       0
  3354 ;;      Totals:        13       0       0       0
  3355 ;;Total ram usage:       13 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    3
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_printf
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text11
  3366  00090E                     __ptext11:
  3367                           	opt stack 0
  3368  00090E                     ___lldiv:
  3369                           	opt stack 26
  3370                           
  3371                           ;incstack = 0
  3372  00090E  0E00               	movlw	0
  3373  000910  6E1D               	movwf	___lldiv@quotient,c
  3374  000912  0E00               	movlw	0
  3375  000914  6E1E               	movwf	___lldiv@quotient+1,c
  3376  000916  0E00               	movlw	0
  3377  000918  6E1F               	movwf	___lldiv@quotient+2,c
  3378  00091A  0E00               	movlw	0
  3379  00091C  6E20               	movwf	___lldiv@quotient+3,c
  3380  00091E  5019               	movf	___lldiv@divisor,w,c
  3381  000920  101A               	iorwf	___lldiv@divisor+1,w,c
  3382  000922  101B               	iorwf	___lldiv@divisor+2,w,c
  3383  000924  101C               	iorwf	___lldiv@divisor+3,w,c
  3384  000926  B4D8               	btfsc	status,2,c
  3385  000928  D02A               	goto	l900
  3386  00092A  0E01               	movlw	1
  3387  00092C  6E21               	movwf	___lldiv@counter,c
  3388  00092E  D006               	goto	l895
  3389  000930  90D8               	bcf	status,0,c
  3390  000932  3619               	rlcf	___lldiv@divisor,f,c
  3391  000934  361A               	rlcf	___lldiv@divisor+1,f,c
  3392  000936  361B               	rlcf	___lldiv@divisor+2,f,c
  3393  000938  361C               	rlcf	___lldiv@divisor+3,f,c
  3394  00093A  2A21               	incf	___lldiv@counter,f,c
  3395  00093C                     l895:
  3396  00093C  AE1C               	btfss	___lldiv@divisor+3,7,c
  3397  00093E  D7F8               	goto	l896
  3398  000940                     u960:
  3399  000940  90D8               	bcf	status,0,c
  3400  000942  361D               	rlcf	___lldiv@quotient,f,c
  3401  000944  361E               	rlcf	___lldiv@quotient+1,f,c
  3402  000946  361F               	rlcf	___lldiv@quotient+2,f,c
  3403  000948  3620               	rlcf	___lldiv@quotient+3,f,c
  3404  00094A  5019               	movf	___lldiv@divisor,w,c
  3405  00094C  5C15               	subwf	___lldiv@dividend,w,c
  3406  00094E  501A               	movf	___lldiv@divisor+1,w,c
  3407  000950  5816               	subwfb	___lldiv@dividend+1,w,c
  3408  000952  501B               	movf	___lldiv@divisor+2,w,c
  3409  000954  5817               	subwfb	___lldiv@dividend+2,w,c
  3410  000956  501C               	movf	___lldiv@divisor+3,w,c
  3411  000958  5818               	subwfb	___lldiv@dividend+3,w,c
  3412  00095A  A0D8               	btfss	status,0,c
  3413  00095C  D009               	goto	l899
  3414  00095E  5019               	movf	___lldiv@divisor,w,c
  3415  000960  5E15               	subwf	___lldiv@dividend,f,c
  3416  000962  501A               	movf	___lldiv@divisor+1,w,c
  3417  000964  5A16               	subwfb	___lldiv@dividend+1,f,c
  3418  000966  501B               	movf	___lldiv@divisor+2,w,c
  3419  000968  5A17               	subwfb	___lldiv@dividend+2,f,c
  3420  00096A  501C               	movf	___lldiv@divisor+3,w,c
  3421  00096C  5A18               	subwfb	___lldiv@dividend+3,f,c
  3422  00096E  801D               	bsf	___lldiv@quotient,0,c
  3423  000970                     l899:
  3424  000970  90D8               	bcf	status,0,c
  3425  000972  321C               	rrcf	___lldiv@divisor+3,f,c
  3426  000974  321B               	rrcf	___lldiv@divisor+2,f,c
  3427  000976  321A               	rrcf	___lldiv@divisor+1,f,c
  3428  000978  3219               	rrcf	___lldiv@divisor,f,c
  3429  00097A  2E21               	decfsz	___lldiv@counter,f,c
  3430  00097C  D7E1               	goto	u960
  3431  00097E                     l900:
  3432  00097E  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  3433  000982  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  3434  000986  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  3435  00098A  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  3436  00098E  0012               	return		;funcret
  3437  000990                     __end_of___lldiv:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           postdec1	equ	0xFE5
  3449                           fsr1l	equ	0xFE1
  3450                           indf2	equ	0xFDF
  3451                           postinc2	equ	0xFDE
  3452                           postdec2	equ	0xFDD
  3453                           fsr2h	equ	0xFDA
  3454                           fsr2l	equ	0xFD9
  3455                           status	equ	0xFD8
  3456                           
  3457 ;; *************** function _pi_supply_on *****************
  3458 ;; Defined at:
  3459 ;;		line 500 in file "main.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;		None
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;		None
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		None
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3473 ;;      Params:         0       0       0       0
  3474 ;;      Locals:         0       0       0       0
  3475 ;;      Temps:          0       0       0       0
  3476 ;;      Totals:         0       0       0       0
  3477 ;;Total ram usage:        0 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    3
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text12
  3488  000E28                     __ptext12:
  3489                           	opt stack 0
  3490  000E28                     _pi_supply_on:
  3491                           	opt stack 27
  3492                           
  3493                           ;incstack = 0
  3494                           ;main.c: 503: do { LATDbits.LATD2 = 1; } while(0);
  3495  000E28  848C               	bsf	3980,2,c	;volatile
  3496  000E2A  0012               	return	
  3497  000E2C                     __end_of_pi_supply_on:
  3498                           	opt stack 0
  3499                           tblptru	equ	0xFF8
  3500                           tblptrh	equ	0xFF7
  3501                           tblptrl	equ	0xFF6
  3502                           tablat	equ	0xFF5
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           intcon	equ	0xFF2
  3506                           postinc0	equ	0xFEE
  3507                           wreg	equ	0xFE8
  3508                           postdec1	equ	0xFE5
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           fsr2h	equ	0xFDA
  3514                           fsr2l	equ	0xFD9
  3515                           status	equ	0xFD8
  3516                           
  3517 ;; *************** function _pi_supply_off *****************
  3518 ;; Defined at:
  3519 ;;		line 494 in file "main.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;		None
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;		None
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		None
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3533 ;;      Params:         0       0       0       0
  3534 ;;      Locals:         0       0       0       0
  3535 ;;      Temps:          0       0       0       0
  3536 ;;      Totals:         0       0       0       0
  3537 ;;Total ram usage:        0 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    3
  3540 ;; This function calls:
  3541 ;;		Nothing
  3542 ;; This function is called by:
  3543 ;;		_main
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           	psect	text13
  3548  000E2C                     __ptext13:
  3549                           	opt stack 0
  3550  000E2C                     _pi_supply_off:
  3551                           	opt stack 27
  3552                           
  3553                           ;incstack = 0
  3554                           ;main.c: 497: do { LATDbits.LATD2 = 0; } while(0);
  3555  000E2C  948C               	bcf	3980,2,c	;volatile
  3556  000E2E  0012               	return	
  3557  000E30                     __end_of_pi_supply_off:
  3558                           	opt stack 0
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           prodh	equ	0xFF4
  3564                           prodl	equ	0xFF3
  3565                           intcon	equ	0xFF2
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           postdec1	equ	0xFE5
  3569                           fsr1l	equ	0xFE1
  3570                           indf2	equ	0xFDF
  3571                           postinc2	equ	0xFDE
  3572                           postdec2	equ	0xFDD
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function ___lmul *****************
  3578 ;; Defined at:
  3579 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.44\sources\common\Umul32.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  multiplier      4   20[COMRAM] unsigned long 
  3582 ;;  multiplicand    4   24[COMRAM] unsigned long 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  product         4   28[COMRAM] unsigned long 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  4   20[COMRAM] unsigned long 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3594 ;;      Params:         8       0       0       0
  3595 ;;      Locals:         4       0       0       0
  3596 ;;      Temps:          0       0       0       0
  3597 ;;      Totals:        12       0       0       0
  3598 ;;Total ram usage:       12 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    3
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_main
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text14
  3609  000B3E                     __ptext14:
  3610                           	opt stack 0
  3611  000B3E                     ___lmul:
  3612                           	opt stack 27
  3613                           
  3614                           ;incstack = 0
  3615  000B3E  0E00               	movlw	0
  3616  000B40  6E1D               	movwf	___lmul@product,c
  3617  000B42  0E00               	movlw	0
  3618  000B44  6E1E               	movwf	___lmul@product+1,c
  3619  000B46  0E00               	movlw	0
  3620  000B48  6E1F               	movwf	___lmul@product+2,c
  3621  000B4A  0E00               	movlw	0
  3622  000B4C  6E20               	movwf	___lmul@product+3,c
  3623  000B4E  A015               	btfss	___lmul@multiplier,0,c
  3624  000B50  D008               	goto	l552
  3625  000B52  5019               	movf	___lmul@multiplicand,w,c
  3626  000B54  261D               	addwf	___lmul@product,f,c
  3627  000B56  501A               	movf	___lmul@multiplicand+1,w,c
  3628  000B58  221E               	addwfc	___lmul@product+1,f,c
  3629  000B5A  501B               	movf	___lmul@multiplicand+2,w,c
  3630  000B5C  221F               	addwfc	___lmul@product+2,f,c
  3631  000B5E  501C               	movf	___lmul@multiplicand+3,w,c
  3632  000B60  2220               	addwfc	___lmul@product+3,f,c
  3633  000B62                     l552:
  3634  000B62  90D8               	bcf	status,0,c
  3635  000B64  3619               	rlcf	___lmul@multiplicand,f,c
  3636  000B66  361A               	rlcf	___lmul@multiplicand+1,f,c
  3637  000B68  361B               	rlcf	___lmul@multiplicand+2,f,c
  3638  000B6A  361C               	rlcf	___lmul@multiplicand+3,f,c
  3639  000B6C  90D8               	bcf	status,0,c
  3640  000B6E  3218               	rrcf	___lmul@multiplier+3,f,c
  3641  000B70  3217               	rrcf	___lmul@multiplier+2,f,c
  3642  000B72  3216               	rrcf	___lmul@multiplier+1,f,c
  3643  000B74  3215               	rrcf	___lmul@multiplier,f,c
  3644  000B76  5015               	movf	___lmul@multiplier,w,c
  3645  000B78  1016               	iorwf	___lmul@multiplier+1,w,c
  3646  000B7A  1017               	iorwf	___lmul@multiplier+2,w,c
  3647  000B7C  1018               	iorwf	___lmul@multiplier+3,w,c
  3648  000B7E  A4D8               	btfss	status,2,c
  3649  000B80  D7E6               	goto	l551
  3650  000B82  C01D  F015         	movff	___lmul@product,?___lmul
  3651  000B86  C01E  F016         	movff	___lmul@product+1,?___lmul+1
  3652  000B8A  C01F  F017         	movff	___lmul@product+2,?___lmul+2
  3653  000B8E  C020  F018         	movff	___lmul@product+3,?___lmul+3
  3654  000B92  0012               	return		;funcret
  3655  000B94                     __end_of___lmul:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           intcon	equ	0xFF2
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _TMR5_HasOverflowOccured *****************
  3676 ;; Defined at:
  3677 ;;		line 153 in file "mcc_generated_files/tmr5.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      unsigned char 
  3684 ;; Registers used:
  3685 ;;		wreg
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3691 ;;      Params:         0       0       0       0
  3692 ;;      Locals:         0       0       0       0
  3693 ;;      Temps:          0       0       0       0
  3694 ;;      Totals:         0       0       0       0
  3695 ;;Total ram usage:        0 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    3
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_main
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text15
  3706  000DF8                     __ptext15:
  3707                           	opt stack 0
  3708  000DF8                     _TMR5_HasOverflowOccured:
  3709                           	opt stack 27
  3710                           
  3711                           ;tmr5.c: 156: return(PIR5bits.TMR5IF);
  3712                           
  3713                           ;incstack = 0
  3714  000DF8  A27E               	btfss	3966,1,c	;volatile
  3715  000DFA  D002               	goto	u1030
  3716  000DFC  0E01               	movlw	1
  3717  000DFE  0012               	return	
  3718  000E00                     u1030:
  3719  000E00  0E00               	movlw	0
  3720  000E02  0012               	return	
  3721  000E04                     __end_of_TMR5_HasOverflowOccured:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           tblptrh	equ	0xFF7
  3725                           tblptrl	equ	0xFF6
  3726                           tablat	equ	0xFF5
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           intcon	equ	0xFF2
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           postdec1	equ	0xFE5
  3733                           fsr1l	equ	0xFE1
  3734                           indf2	equ	0xFDF
  3735                           postinc2	equ	0xFDE
  3736                           postdec2	equ	0xFDD
  3737                           fsr2h	equ	0xFDA
  3738                           fsr2l	equ	0xFD9
  3739                           status	equ	0xFD8
  3740                           
  3741 ;; *************** function _TMR0_HasOverflowOccured *****************
  3742 ;; Defined at:
  3743 ;;		line 124 in file "mcc_generated_files/tmr0.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;		None
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      unsigned char 
  3750 ;; Registers used:
  3751 ;;		wreg
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3757 ;;      Params:         0       0       0       0
  3758 ;;      Locals:         0       0       0       0
  3759 ;;      Temps:          0       0       0       0
  3760 ;;      Totals:         0       0       0       0
  3761 ;;Total ram usage:        0 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    3
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_main
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text16
  3772  000E04                     __ptext16:
  3773                           	opt stack 0
  3774  000E04                     _TMR0_HasOverflowOccured:
  3775                           	opt stack 27
  3776                           
  3777                           ;tmr0.c: 127: return(INTCONbits.TMR0IF);
  3778                           
  3779                           ;incstack = 0
  3780  000E04  A4F2               	btfss	intcon,2,c	;volatile
  3781  000E06  D002               	goto	u1020
  3782  000E08  0E01               	movlw	1
  3783  000E0A  0012               	return	
  3784  000E0C                     u1020:
  3785  000E0C  0E00               	movlw	0
  3786  000E0E  0012               	return	
  3787  000E10                     __end_of_TMR0_HasOverflowOccured:
  3788                           	opt stack 0
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           prodh	equ	0xFF4
  3794                           prodl	equ	0xFF3
  3795                           intcon	equ	0xFF2
  3796                           postinc0	equ	0xFEE
  3797                           wreg	equ	0xFE8
  3798                           postdec1	equ	0xFE5
  3799                           fsr1l	equ	0xFE1
  3800                           indf2	equ	0xFDF
  3801                           postinc2	equ	0xFDE
  3802                           postdec2	equ	0xFDD
  3803                           fsr2h	equ	0xFDA
  3804                           fsr2l	equ	0xFD9
  3805                           status	equ	0xFD8
  3806                           
  3807 ;; *************** function _SYSTEM_Initialize *****************
  3808 ;; Defined at:
  3809 ;;		line 105 in file "mcc_generated_files/mcc.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;		None
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      void 
  3816 ;; Registers used:
  3817 ;;		wreg, status,2, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3823 ;;      Params:         0       0       0       0
  3824 ;;      Locals:         0       0       0       0
  3825 ;;      Temps:          0       0       0       0
  3826 ;;      Totals:         0       0       0       0
  3827 ;;Total ram usage:        0 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    5
  3830 ;; This function calls:
  3831 ;;		_ADC_Initialize
  3832 ;;		_EUSART1_Initialize
  3833 ;;		_I2C2_Initialize
  3834 ;;		_INTERRUPT_Initialize
  3835 ;;		_OSCILLATOR_Initialize
  3836 ;;		_PIN_MANAGER_Initialize
  3837 ;;		_TMR0_Initialize
  3838 ;;		_TMR5_Initialize
  3839 ;; This function is called by:
  3840 ;;		_main
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text17
  3845  000D0C                     __ptext17:
  3846                           	opt stack 0
  3847  000D0C                     _SYSTEM_Initialize:
  3848                           	opt stack 25
  3849                           
  3850                           ;mcc.c: 108: INTERRUPT_Initialize();
  3851                           
  3852                           ;incstack = 0
  3853  000D0C  EC1A  F007         	call	_INTERRUPT_Initialize	;wreg free
  3854                           
  3855                           ;mcc.c: 109: PIN_MANAGER_Initialize();
  3856  000D10  EC1C  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  3857                           
  3858                           ;mcc.c: 110: OSCILLATOR_Initialize();
  3859  000D14  ECE8  F006         	call	_OSCILLATOR_Initialize	;wreg free
  3860                           
  3861                           ;mcc.c: 111: I2C2_Initialize();
  3862  000D18  ECB7  F006         	call	_I2C2_Initialize	;wreg free
  3863                           
  3864                           ;mcc.c: 112: ADC_Initialize();
  3865  000D1C  ECDD  F006         	call	_ADC_Initialize	;wreg free
  3866                           
  3867                           ;mcc.c: 113: TMR5_Initialize();
  3868  000D20  EC97  F006         	call	_TMR5_Initialize	;wreg free
  3869                           
  3870                           ;mcc.c: 114: TMR0_Initialize();
  3871  000D24  ECC6  F006         	call	_TMR0_Initialize	;wreg free
  3872                           
  3873                           ;mcc.c: 115: EUSART1_Initialize();
  3874  000D28  ECD2  F006         	call	_EUSART1_Initialize	;wreg free
  3875  000D2C  0012               	return		;funcret
  3876  000D2E                     __end_of_SYSTEM_Initialize:
  3877                           	opt stack 0
  3878                           tblptru	equ	0xFF8
  3879                           tblptrh	equ	0xFF7
  3880                           tblptrl	equ	0xFF6
  3881                           tablat	equ	0xFF5
  3882                           prodh	equ	0xFF4
  3883                           prodl	equ	0xFF3
  3884                           intcon	equ	0xFF2
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1l	equ	0xFE1
  3889                           indf2	equ	0xFDF
  3890                           postinc2	equ	0xFDE
  3891                           postdec2	equ	0xFDD
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _TMR5_Initialize *****************
  3897 ;; Defined at:
  3898 ;;		line 62 in file "mcc_generated_files/tmr5.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3912 ;;      Params:         0       0       0       0
  3913 ;;      Locals:         0       0       0       0
  3914 ;;      Temps:          0       0       0       0
  3915 ;;      Totals:         0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    4
  3919 ;; This function calls:
  3920 ;;		_TMR5_StartTimer
  3921 ;; This function is called by:
  3922 ;;		_SYSTEM_Initialize
  3923 ;;		_main
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           	psect	text18
  3928  000D2E                     __ptext18:
  3929                           	opt stack 0
  3930  000D2E                     _TMR5_Initialize:
  3931                           	opt stack 26
  3932                           
  3933                           ;tmr5.c: 67: T5CON = 0x30;
  3934                           
  3935                           ;incstack = 0
  3936  000D2E  0E30               	movlw	48
  3937  000D30  010F               	movlb	15	; () banked
  3938  000D32  6F4E               	movwf	78,b	;volatile
  3939                           
  3940                           ;tmr5.c: 70: T5GCON = 0x00;
  3941  000D34  0E00               	movlw	0
  3942  000D36  6F4D               	movwf	77,b	;volatile
  3943                           
  3944                           ;tmr5.c: 73: TMR5H = 0x3C;
  3945  000D38  0E3C               	movlw	60
  3946  000D3A  6F50               	movwf	80,b	;volatile
  3947                           
  3948                           ;tmr5.c: 76: TMR5L = 0xB0;
  3949  000D3C  0EB0               	movlw	176
  3950  000D3E  6F4F               	movwf	79,b	;volatile
  3951                           
  3952                           ; BSR set to: 15
  3953                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
  3954  000D40  CF4F F042          	movff	3919,_timer5ReloadVal	;volatile
  3955  000D44  CF50 F043          	movff	3920,_timer5ReloadVal+1	;volatile
  3956                           
  3957                           ; BSR set to: 15
  3958                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
  3959  000D48  927E               	bcf	3966,1,c	;volatile
  3960                           
  3961                           ; BSR set to: 15
  3962                           ;tmr5.c: 85: TMR5_StartTimer();
  3963  000D4A  EC0D  F007         	call	_TMR5_StartTimer	;wreg free
  3964  000D4E  0012               	return		;funcret
  3965  000D50                     __end_of_TMR5_Initialize:
  3966                           	opt stack 0
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           postdec1	equ	0xFE5
  3977                           fsr1l	equ	0xFE1
  3978                           indf2	equ	0xFDF
  3979                           postinc2	equ	0xFDE
  3980                           postdec2	equ	0xFDD
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8
  3984                           
  3985 ;; *************** function _TMR5_StartTimer *****************
  3986 ;; Defined at:
  3987 ;;		line 88 in file "mcc_generated_files/tmr5.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		None
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4001 ;;      Params:         0       0       0       0
  4002 ;;      Locals:         0       0       0       0
  4003 ;;      Temps:          0       0       0       0
  4004 ;;      Totals:         0       0       0       0
  4005 ;;Total ram usage:        0 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    3
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_TMR5_Initialize
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text19
  4016  000E1A                     __ptext19:
  4017                           	opt stack 0
  4018  000E1A                     _TMR5_StartTimer:
  4019                           	opt stack 26
  4020                           
  4021                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
  4022                           
  4023                           ;incstack = 0
  4024  000E1A  010F               	movlb	15	; () banked
  4025  000E1C  814E               	bsf	78,0,b	;volatile
  4026                           
  4027                           ; BSR set to: 15
  4028  000E1E  0012               	return		;funcret
  4029  000E20                     __end_of_TMR5_StartTimer:
  4030                           	opt stack 0
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodh	equ	0xFF4
  4036                           prodl	equ	0xFF3
  4037                           intcon	equ	0xFF2
  4038                           postinc0	equ	0xFEE
  4039                           wreg	equ	0xFE8
  4040                           postdec1	equ	0xFE5
  4041                           fsr1l	equ	0xFE1
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function _TMR0_Initialize *****************
  4050 ;; Defined at:
  4051 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;		None
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;		None
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      void 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, cstack
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4065 ;;      Params:         0       0       0       0
  4066 ;;      Locals:         0       0       0       0
  4067 ;;      Temps:          0       0       0       0
  4068 ;;      Totals:         0       0       0       0
  4069 ;;Total ram usage:        0 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    4
  4072 ;; This function calls:
  4073 ;;		_TMR0_StartTimer
  4074 ;; This function is called by:
  4075 ;;		_SYSTEM_Initialize
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text20
  4081  000D8C                     __ptext20:
  4082                           	opt stack 0
  4083  000D8C                     _TMR0_Initialize:
  4084                           	opt stack 26
  4085                           
  4086                           ;tmr0.c: 70: T0CON = 0x7F;
  4087                           
  4088                           ; BSR set to: 15
  4089                           ;incstack = 0
  4090  000D8C  0E7F               	movlw	127
  4091  000D8E  6ED5               	movwf	4053,c	;volatile
  4092                           
  4093                           ;tmr0.c: 73: TMR0H = 0x00;
  4094  000D90  0E00               	movlw	0
  4095  000D92  6ED7               	movwf	4055,c	;volatile
  4096                           
  4097                           ;tmr0.c: 76: TMR0L = 0xFC;
  4098  000D94  0EFC               	movlw	252
  4099  000D96  6ED6               	movwf	4054,c	;volatile
  4100                           
  4101                           ;tmr0.c: 79: timer0ReloadVal = 252;
  4102  000D98  0EFC               	movlw	252
  4103  000D9A  6E44               	movwf	_timer0ReloadVal,c	;volatile
  4104                           
  4105                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
  4106  000D9C  94F2               	bcf	intcon,2,c	;volatile
  4107                           
  4108                           ;tmr0.c: 86: TMR0_StartTimer();
  4109  000D9E  EC18  F007         	call	_TMR0_StartTimer	;wreg free
  4110  000DA2  0012               	return		;funcret
  4111  000DA4                     __end_of_TMR0_Initialize:
  4112                           	opt stack 0
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           prodh	equ	0xFF4
  4118                           prodl	equ	0xFF3
  4119                           intcon	equ	0xFF2
  4120                           postinc0	equ	0xFEE
  4121                           wreg	equ	0xFE8
  4122                           postdec1	equ	0xFE5
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _TMR0_StartTimer *****************
  4132 ;; Defined at:
  4133 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		None
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4147 ;;      Params:         0       0       0       0
  4148 ;;      Locals:         0       0       0       0
  4149 ;;      Temps:          0       0       0       0
  4150 ;;      Totals:         0       0       0       0
  4151 ;;Total ram usage:        0 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    3
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_TMR0_Initialize
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text21
  4162  000E30                     __ptext21:
  4163                           	opt stack 0
  4164  000E30                     _TMR0_StartTimer:
  4165                           	opt stack 26
  4166                           
  4167                           ;tmr0.c: 92: T0CONbits.TMR0ON = 1;
  4168                           
  4169                           ;incstack = 0
  4170  000E30  8ED5               	bsf	4053,7,c	;volatile
  4171  000E32  0012               	return		;funcret
  4172  000E34                     __end_of_TMR0_StartTimer:
  4173                           	opt stack 0
  4174                           tblptru	equ	0xFF8
  4175                           tblptrh	equ	0xFF7
  4176                           tblptrl	equ	0xFF6
  4177                           tablat	equ	0xFF5
  4178                           prodh	equ	0xFF4
  4179                           prodl	equ	0xFF3
  4180                           intcon	equ	0xFF2
  4181                           postinc0	equ	0xFEE
  4182                           wreg	equ	0xFE8
  4183                           postdec1	equ	0xFE5
  4184                           fsr1l	equ	0xFE1
  4185                           indf2	equ	0xFDF
  4186                           postinc2	equ	0xFDE
  4187                           postdec2	equ	0xFDD
  4188                           fsr2h	equ	0xFDA
  4189                           fsr2l	equ	0xFD9
  4190                           status	equ	0xFD8
  4191                           
  4192 ;; *************** function _PIN_MANAGER_Initialize *****************
  4193 ;; Defined at:
  4194 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;		None
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;		None
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		wreg, status,2
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4208 ;;      Params:         0       0       0       0
  4209 ;;      Locals:         0       0       0       0
  4210 ;;      Temps:          0       0       0       0
  4211 ;;      Totals:         0       0       0       0
  4212 ;;Total ram usage:        0 bytes
  4213 ;; Hardware stack levels used:    1
  4214 ;; Hardware stack levels required when called:    3
  4215 ;; This function calls:
  4216 ;;		Nothing
  4217 ;; This function is called by:
  4218 ;;		_SYSTEM_Initialize
  4219 ;;		_main
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text22
  4224  000C38                     __ptext22:
  4225                           	opt stack 0
  4226  000C38                     _PIN_MANAGER_Initialize:
  4227                           	opt stack 26
  4228                           
  4229                           ;pin_manager.c: 57: LATE = 0x00;
  4230                           
  4231                           ;incstack = 0
  4232  000C38  0E00               	movlw	0
  4233  000C3A  6E8D               	movwf	3981,c	;volatile
  4234                           
  4235                           ;pin_manager.c: 58: LATD = 0x00;
  4236  000C3C  0E00               	movlw	0
  4237  000C3E  6E8C               	movwf	3980,c	;volatile
  4238                           
  4239                           ;pin_manager.c: 59: LATA = 0x00;
  4240  000C40  0E00               	movlw	0
  4241  000C42  6E89               	movwf	3977,c	;volatile
  4242                           
  4243                           ;pin_manager.c: 60: LATB = 0x00;
  4244  000C44  0E00               	movlw	0
  4245  000C46  6E8A               	movwf	3978,c	;volatile
  4246                           
  4247                           ;pin_manager.c: 61: LATC = 0x01;
  4248  000C48  0E01               	movlw	1
  4249  000C4A  6E8B               	movwf	3979,c	;volatile
  4250                           
  4251                           ;pin_manager.c: 66: TRISE = 0x07;
  4252  000C4C  0E07               	movlw	7
  4253  000C4E  6E96               	movwf	3990,c	;volatile
  4254                           
  4255                           ;pin_manager.c: 67: TRISA = 0xFF;
  4256  000C50  6892               	setf	3986,c	;volatile
  4257                           
  4258                           ;pin_manager.c: 68: TRISB = 0xFF;
  4259  000C52  6893               	setf	3987,c	;volatile
  4260                           
  4261                           ;pin_manager.c: 69: TRISC = 0x88;
  4262  000C54  0E88               	movlw	136
  4263  000C56  6E94               	movwf	3988,c	;volatile
  4264                           
  4265                           ;pin_manager.c: 70: TRISD = 0xFB;
  4266  000C58  0EFB               	movlw	251
  4267  000C5A  6E95               	movwf	3989,c	;volatile
  4268                           
  4269                           ;pin_manager.c: 75: ANSELC = 0x08;
  4270  000C5C  0E08               	movlw	8
  4271  000C5E  010F               	movlb	15	; () banked
  4272  000C60  6F3A               	movwf	58,b	;volatile
  4273                           
  4274                           ;pin_manager.c: 76: ANSELB = 0x3F;
  4275  000C62  0E3F               	movlw	63
  4276  000C64  6F39               	movwf	57,b	;volatile
  4277                           
  4278                           ;pin_manager.c: 77: ANSELD = 0xF0;
  4279  000C66  0EF0               	movlw	240
  4280  000C68  6F3B               	movwf	59,b	;volatile
  4281                           
  4282                           ;pin_manager.c: 78: ANSELE = 0x07;
  4283  000C6A  0E07               	movlw	7
  4284  000C6C  6F3C               	movwf	60,b	;volatile
  4285                           
  4286                           ;pin_manager.c: 79: ANSELA = 0x2F;
  4287  000C6E  0E2F               	movlw	47
  4288  000C70  6F38               	movwf	56,b	;volatile
  4289                           
  4290                           ; BSR set to: 15
  4291                           ;pin_manager.c: 84: WPUB = 0xFF;
  4292  000C72  6861               	setf	3937,c	;volatile
  4293                           
  4294                           ; BSR set to: 15
  4295                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  4296  000C74  9EF1               	bcf	intcon2,7,c	;volatile
  4297                           
  4298                           ; BSR set to: 15
  4299  000C76  0012               	return		;funcret
  4300  000C78                     __end_of_PIN_MANAGER_Initialize:
  4301                           	opt stack 0
  4302                           tblptru	equ	0xFF8
  4303                           tblptrh	equ	0xFF7
  4304                           tblptrl	equ	0xFF6
  4305                           tablat	equ	0xFF5
  4306                           prodh	equ	0xFF4
  4307                           prodl	equ	0xFF3
  4308                           intcon	equ	0xFF2
  4309                           intcon2	equ	0xFF1
  4310                           postinc0	equ	0xFEE
  4311                           wreg	equ	0xFE8
  4312                           postdec1	equ	0xFE5
  4313                           fsr1l	equ	0xFE1
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _OSCILLATOR_Initialize *****************
  4322 ;; Defined at:
  4323 ;;		line 118 in file "mcc_generated_files/mcc.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4337 ;;      Params:         0       0       0       0
  4338 ;;      Locals:         0       0       0       0
  4339 ;;      Temps:          0       0       0       0
  4340 ;;      Totals:         0       0       0       0
  4341 ;;Total ram usage:        0 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    3
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_SYSTEM_Initialize
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text23
  4353  000DD0                     __ptext23:
  4354                           	opt stack 0
  4355  000DD0                     _OSCILLATOR_Initialize:
  4356                           	opt stack 26
  4357                           
  4358                           ;mcc.c: 121: OSCCON = 0x70;
  4359                           
  4360                           ; BSR set to: 15
  4361                           ;incstack = 0
  4362  000DD0  0E70               	movlw	112
  4363  000DD2  6ED3               	movwf	4051,c	;volatile
  4364                           
  4365                           ;mcc.c: 123: OSCCON2 = 0x04;
  4366  000DD4  0E04               	movlw	4
  4367  000DD6  6ED2               	movwf	4050,c	;volatile
  4368                           
  4369                           ;mcc.c: 125: OSCTUNE = 0x00;
  4370  000DD8  0E00               	movlw	0
  4371  000DDA  6E9B               	movwf	3995,c	;volatile
  4372  000DDC  0012               	return		;funcret
  4373  000DDE                     __end_of_OSCILLATOR_Initialize:
  4374                           	opt stack 0
  4375                           tblptru	equ	0xFF8
  4376                           tblptrh	equ	0xFF7
  4377                           tblptrl	equ	0xFF6
  4378                           tablat	equ	0xFF5
  4379                           prodh	equ	0xFF4
  4380                           prodl	equ	0xFF3
  4381                           intcon	equ	0xFF2
  4382                           intcon2	equ	0xFF1
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           postdec1	equ	0xFE5
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function _INTERRUPT_Initialize *****************
  4395 ;; Defined at:
  4396 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      void 
  4403 ;; Registers used:
  4404 ;;		None
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4410 ;;      Params:         0       0       0       0
  4411 ;;      Locals:         0       0       0       0
  4412 ;;      Temps:          0       0       0       0
  4413 ;;      Totals:         0       0       0       0
  4414 ;;Total ram usage:        0 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    3
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_SYSTEM_Initialize
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           	psect	text24
  4425  000E34                     __ptext24:
  4426                           	opt stack 0
  4427  000E34                     _INTERRUPT_Initialize:
  4428                           	opt stack 26
  4429                           
  4430                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  4431                           
  4432                           ;incstack = 0
  4433  000E34  9ED0               	bcf	4048,7,c	;volatile
  4434  000E36  0012               	return		;funcret
  4435  000E38                     __end_of_INTERRUPT_Initialize:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           prodh	equ	0xFF4
  4442                           prodl	equ	0xFF3
  4443                           intcon	equ	0xFF2
  4444                           intcon2	equ	0xFF1
  4445                           postinc0	equ	0xFEE
  4446                           wreg	equ	0xFE8
  4447                           postdec1	equ	0xFE5
  4448                           fsr1l	equ	0xFE1
  4449                           indf2	equ	0xFDF
  4450                           postinc2	equ	0xFDE
  4451                           postdec2	equ	0xFDD
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _I2C2_Initialize *****************
  4457 ;; Defined at:
  4458 ;;		line 81 in file "mcc_generated_files/i2c2.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, status,2
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4472 ;;      Params:         0       0       0       0
  4473 ;;      Locals:         0       0       0       0
  4474 ;;      Temps:          0       0       0       0
  4475 ;;      Totals:         0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    3
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_SYSTEM_Initialize
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text25
  4487  000D6E                     __ptext25:
  4488                           	opt stack 0
  4489  000D6E                     _I2C2_Initialize:
  4490                           	opt stack 26
  4491                           
  4492                           ;i2c2.c: 85: SSP2STAT = 0x00;
  4493                           
  4494                           ;incstack = 0
  4495  000D6E  0E00               	movlw	0
  4496  000D70  6E6D               	movwf	3949,c	;volatile
  4497                           
  4498                           ;i2c2.c: 87: SSP2CON1 = 0x26;
  4499  000D72  0E26               	movlw	38
  4500  000D74  6E6C               	movwf	3948,c	;volatile
  4501                           
  4502                           ;i2c2.c: 89: SSP2CON2 = 0x01;
  4503  000D76  0E01               	movlw	1
  4504  000D78  6E6B               	movwf	3947,c	;volatile
  4505                           
  4506                           ;i2c2.c: 91: SSP2CON3 = 0x00;
  4507  000D7A  0E00               	movlw	0
  4508  000D7C  6E69               	movwf	3945,c	;volatile
  4509                           
  4510                           ;i2c2.c: 93: SSP2MSK = (0x7F << 1);
  4511  000D7E  0EFE               	movlw	254
  4512  000D80  6E6A               	movwf	3946,c	;volatile
  4513                           
  4514                           ;i2c2.c: 95: SSP2ADD = (0x44 << 1);
  4515  000D82  0E88               	movlw	136
  4516  000D84  6E6E               	movwf	3950,c	;volatile
  4517                           
  4518                           ;i2c2.c: 98: PIR3bits.SSP2IF = 0;
  4519  000D86  9EA4               	bcf	4004,7,c	;volatile
  4520                           
  4521                           ;i2c2.c: 100: PIE3bits.SSP2IE = 1;
  4522  000D88  8EA3               	bsf	4003,7,c	;volatile
  4523  000D8A  0012               	return		;funcret
  4524  000D8C                     __end_of_I2C2_Initialize:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           tblptrl	equ	0xFF6
  4529                           tablat	equ	0xFF5
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           intcon2	equ	0xFF1
  4534                           postinc0	equ	0xFEE
  4535                           wreg	equ	0xFE8
  4536                           postdec1	equ	0xFE5
  4537                           fsr1l	equ	0xFE1
  4538                           indf2	equ	0xFDF
  4539                           postinc2	equ	0xFDE
  4540                           postdec2	equ	0xFDD
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function _EUSART1_Initialize *****************
  4546 ;; Defined at:
  4547 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;		None
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, status,2
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4561 ;;      Params:         0       0       0       0
  4562 ;;      Locals:         0       0       0       0
  4563 ;;      Temps:          0       0       0       0
  4564 ;;      Totals:         0       0       0       0
  4565 ;;Total ram usage:        0 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    3
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_SYSTEM_Initialize
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text26
  4576  000DA4                     __ptext26:
  4577                           	opt stack 0
  4578  000DA4                     _EUSART1_Initialize:
  4579                           	opt stack 26
  4580                           
  4581                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  4582                           
  4583                           ;incstack = 0
  4584  000DA4  0E08               	movlw	8
  4585  000DA6  6EB8               	movwf	4024,c	;volatile
  4586                           
  4587                           ;eusart1.c: 63: RCSTA1 = 0x90;
  4588  000DA8  0E90               	movlw	144
  4589  000DAA  6EAB               	movwf	4011,c	;volatile
  4590                           
  4591                           ;eusart1.c: 66: TXSTA1 = 0x24;
  4592  000DAC  0E24               	movlw	36
  4593  000DAE  6EAC               	movwf	4012,c	;volatile
  4594                           
  4595                           ;eusart1.c: 69: SPBRG1 = 0x44;
  4596  000DB0  0E44               	movlw	68
  4597  000DB2  6EAF               	movwf	4015,c	;volatile
  4598                           
  4599                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  4600  000DB4  0E00               	movlw	0
  4601  000DB6  6EB0               	movwf	4016,c	;volatile
  4602  000DB8  0012               	return		;funcret
  4603  000DBA                     __end_of_EUSART1_Initialize:
  4604                           	opt stack 0
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           prodh	equ	0xFF4
  4610                           prodl	equ	0xFF3
  4611                           intcon	equ	0xFF2
  4612                           intcon2	equ	0xFF1
  4613                           postinc0	equ	0xFEE
  4614                           wreg	equ	0xFE8
  4615                           postdec1	equ	0xFE5
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function _ADC_Initialize *****************
  4625 ;; Defined at:
  4626 ;;		line 58 in file "mcc_generated_files/adc.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4640 ;;      Params:         0       0       0       0
  4641 ;;      Locals:         0       0       0       0
  4642 ;;      Temps:          0       0       0       0
  4643 ;;      Totals:         0       0       0       0
  4644 ;;Total ram usage:        0 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    3
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_SYSTEM_Initialize
  4651 ;;		_main
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text27
  4656  000DBA                     __ptext27:
  4657                           	opt stack 0
  4658  000DBA                     _ADC_Initialize:
  4659                           	opt stack 26
  4660                           
  4661                           ;adc.c: 63: ADCON0 = 0x01;
  4662                           
  4663                           ;incstack = 0
  4664  000DBA  0E01               	movlw	1
  4665  000DBC  6EC2               	movwf	4034,c	;volatile
  4666                           
  4667                           ;adc.c: 66: ADCON1 = 0x00;
  4668  000DBE  0E00               	movlw	0
  4669  000DC0  6EC1               	movwf	4033,c	;volatile
  4670                           
  4671                           ;adc.c: 69: ADCON2 = 0x92;
  4672  000DC2  0E92               	movlw	146
  4673  000DC4  6EC0               	movwf	4032,c	;volatile
  4674                           
  4675                           ;adc.c: 72: ADRESL = 0x00;
  4676  000DC6  0E00               	movlw	0
  4677  000DC8  6EC3               	movwf	4035,c	;volatile
  4678                           
  4679                           ;adc.c: 75: ADRESH = 0x00;
  4680  000DCA  0E00               	movlw	0
  4681  000DCC  6EC4               	movwf	4036,c	;volatile
  4682  000DCE  0012               	return		;funcret
  4683  000DD0                     __end_of_ADC_Initialize:
  4684                           	opt stack 0
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           intcon2	equ	0xFF1
  4693                           postinc0	equ	0xFEE
  4694                           wreg	equ	0xFE8
  4695                           postdec1	equ	0xFE5
  4696                           fsr1l	equ	0xFE1
  4697                           indf2	equ	0xFDF
  4698                           postinc2	equ	0xFDE
  4699                           postdec2	equ	0xFDD
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _OSCILLATOR_FastClock *****************
  4705 ;; Defined at:
  4706 ;;		line 128 in file "mcc_generated_files/mcc.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;		None
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg, status,2
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4720 ;;      Params:         0       0       0       0
  4721 ;;      Locals:         0       0       0       0
  4722 ;;      Temps:          0       0       0       0
  4723 ;;      Totals:         0       0       0       0
  4724 ;;Total ram usage:        0 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    3
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_main
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           	psect	text28
  4735  000DDE                     __ptext28:
  4736                           	opt stack 0
  4737  000DDE                     _OSCILLATOR_FastClock:
  4738                           	opt stack 27
  4739                           
  4740                           ;mcc.c: 131: OSCCON = 0x70;
  4741                           
  4742                           ;incstack = 0
  4743  000DDE  0E70               	movlw	112
  4744  000DE0  6ED3               	movwf	4051,c	;volatile
  4745                           
  4746                           ;mcc.c: 133: OSCCON2 = 0x04;
  4747  000DE2  0E04               	movlw	4
  4748  000DE4  6ED2               	movwf	4050,c	;volatile
  4749                           
  4750                           ;mcc.c: 135: OSCTUNE = 0x40;
  4751  000DE6  0E40               	movlw	64
  4752  000DE8  6E9B               	movwf	3995,c	;volatile
  4753  000DEA  0012               	return		;funcret
  4754  000DEC                     __end_of_OSCILLATOR_FastClock:
  4755                           	opt stack 0
  4756                           tblptru	equ	0xFF8
  4757                           tblptrh	equ	0xFF7
  4758                           tblptrl	equ	0xFF6
  4759                           tablat	equ	0xFF5
  4760                           prodh	equ	0xFF4
  4761                           prodl	equ	0xFF3
  4762                           intcon	equ	0xFF2
  4763                           intcon2	equ	0xFF1
  4764                           postinc0	equ	0xFEE
  4765                           wreg	equ	0xFE8
  4766                           postdec1	equ	0xFE5
  4767                           fsr1l	equ	0xFE1
  4768                           indf2	equ	0xFDF
  4769                           postinc2	equ	0xFDE
  4770                           postdec2	equ	0xFDD
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function _ADC_GetConversion *****************
  4776 ;; Defined at:
  4777 ;;		line 106 in file "mcc_generated_files/adc.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  channel         1    wreg     enum E6975
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  channel         1   24[COMRAM] enum E6975
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  2   20[COMRAM] unsigned int 
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4791 ;;      Params:         2       0       0       0
  4792 ;;      Locals:         1       0       0       0
  4793 ;;      Temps:          2       0       0       0
  4794 ;;      Totals:         5       0       0       0
  4795 ;;Total ram usage:        5 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    3
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_main
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text29
  4806  000CB6                     __ptext29:
  4807                           	opt stack 0
  4808  000CB6                     _ADC_GetConversion:
  4809                           	opt stack 27
  4810                           
  4811                           ;incstack = 0
  4812                           ;ADC_GetConversion@channel stored from wreg
  4813  000CB6  6E19               	movwf	ADC_GetConversion@channel,c
  4814                           
  4815                           ;adc.c: 109: ADCON0bits.CHS = channel;
  4816  000CB8  C019  F017         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  4817  000CBC  4617               	rlncf	??_ADC_GetConversion,f,c
  4818  000CBE  4617               	rlncf	??_ADC_GetConversion,f,c
  4819  000CC0  50C2               	movf	4034,w,c	;volatile
  4820  000CC2  1817               	xorwf	??_ADC_GetConversion,w,c
  4821  000CC4  0B83               	andlw	-125
  4822  000CC6  1817               	xorwf	??_ADC_GetConversion,w,c
  4823  000CC8  6EC2               	movwf	4034,c	;volatile
  4824                           
  4825                           ;adc.c: 112: ADCON0bits.ADON = 1;
  4826  000CCA  80C2               	bsf	4034,0,c	;volatile
  4827                           
  4828                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  4829  000CCC  82C2               	bsf	4034,1,c	;volatile
  4830  000CCE                     
  4831                           ;adc.c: 119: {
  4832  000CCE  B2C2               	btfsc	4034,1,c	;volatile
  4833  000CD0  D7FE               	goto	l31
  4834                           
  4835                           ;adc.c: 120: }
  4836                           ;adc.c: 123: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4837  000CD2  50C4               	movf	4036,w,c	;volatile
  4838  000CD4  6E18               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  4839  000CD6  6A17               	clrf	??_ADC_GetConversion& (0+255),c
  4840  000CD8  50C3               	movf	4035,w,c	;volatile
  4841  000CDA  2417               	addwf	??_ADC_GetConversion,w,c
  4842  000CDC  6E15               	movwf	?_ADC_GetConversion,c
  4843  000CDE  0E00               	movlw	0
  4844  000CE0  2018               	addwfc	??_ADC_GetConversion+1,w,c
  4845  000CE2  6E16               	movwf	?_ADC_GetConversion+1,c
  4846  000CE4  0012               	return	
  4847  000CE6                     __end_of_ADC_GetConversion:
  4848                           	opt stack 0
  4849                           tblptru	equ	0xFF8
  4850                           tblptrh	equ	0xFF7
  4851                           tblptrl	equ	0xFF6
  4852                           tablat	equ	0xFF5
  4853                           prodh	equ	0xFF4
  4854                           prodl	equ	0xFF3
  4855                           intcon	equ	0xFF2
  4856                           intcon2	equ	0xFF1
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           postdec1	equ	0xFE5
  4860                           fsr1l	equ	0xFE1
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function _INTERRUPT_InterruptManager *****************
  4869 ;; Defined at:
  4870 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4884 ;;      Params:         0       0       0       0
  4885 ;;      Locals:         0       0       0       0
  4886 ;;      Temps:         18       0       0       0
  4887 ;;      Totals:        18       0       0       0
  4888 ;;Total ram usage:       18 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    2
  4891 ;; This function calls:
  4892 ;;		_I2C2_ISR
  4893 ;; This function is called by:
  4894 ;;		Interrupt level 2
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	intcode
  4899  000008                     __pintcode:
  4900                           	opt stack 0
  4901  000008                     _INTERRUPT_InterruptManager:
  4902                           	opt stack 25
  4903                           
  4904                           ;incstack = 0
  4905  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4906  00000A  CFFA F003          	movff	pclath,??_INTERRUPT_InterruptManager
  4907  00000E  CFFB F004          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4908  000012  CFE9 F005          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4909  000016  CFEA F006          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4910  00001A  CFE1 F007          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4911  00001E  CFE2 F008          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4912  000022  CFD9 F009          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4913  000026  CFDA F00A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4914  00002A  CFF3 F00B          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4915  00002E  CFF4 F00C          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4916  000032  CFF6 F00D          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4917  000036  CFF7 F00E          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4918  00003A  CFF8 F00F          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4919  00003E  CFF5 F010          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4920  000042  C048  F011         	movff	btemp,??_INTERRUPT_InterruptManager+14
  4921  000046  C049  F012         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  4922  00004A  C04A  F013         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  4923  00004E  C04B  F014         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  4924                           
  4925                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE3bits.SSP2IE == 1 && PIR3bits.SS
      +                          P2IF == 1)
  4926  000052  BCF2               	btfsc	intcon,6,c	;volatile
  4927  000054  AEA3               	btfss	4003,7,c	;volatile
  4928  000056  D003               	goto	i2l286
  4929  000058  BEA4               	btfsc	4004,7,c	;volatile
  4930                           
  4931                           ;interrupt_manager.c: 61: {
  4932                           ;interrupt_manager.c: 62: I2C2_ISR();
  4933  00005A  EC3C  F006         	call	_I2C2_ISR	;wreg free
  4934  00005E                     i2l286:
  4935  00005E  C014  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  4936  000062  C013  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  4937  000066  C012  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  4938  00006A  C011  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
  4939  00006E  C010  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4940  000072  C00F  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4941  000076  C00E  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4942  00007A  C00D  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4943  00007E  C00C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4944  000082  C00B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4945  000086  C00A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4946  00008A  C009  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4947  00008E  C008  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4948  000092  C007  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4949  000096  C006  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4950  00009A  C005  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4951  00009E  C004  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4952  0000A2  C003  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4953  0000A6  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4954  0000A8  0011               	retfie		f
  4955  0000AA                     __end_of_INTERRUPT_InterruptManager:
  4956                           	opt stack 0
  4957                           pclatu	equ	0xFFB
  4958                           pclath	equ	0xFFA
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           intcon	equ	0xFF2
  4966                           intcon2	equ	0xFF1
  4967                           postinc0	equ	0xFEE
  4968                           fsr0h	equ	0xFEA
  4969                           fsr0l	equ	0xFE9
  4970                           wreg	equ	0xFE8
  4971                           postdec1	equ	0xFE5
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           fsr2h	equ	0xFDA
  4978                           fsr2l	equ	0xFD9
  4979                           status	equ	0xFD8
  4980                           
  4981 ;; *************** function _I2C2_ISR *****************
  4982 ;; Defined at:
  4983 ;;		line 104 in file "mcc_generated_files/i2c2.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  i2c_data        1    1[COMRAM] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4997 ;;      Params:         0       0       0       0
  4998 ;;      Locals:         1       0       0       0
  4999 ;;      Temps:          0       0       0       0
  5000 ;;      Totals:         1       0       0       0
  5001 ;;Total ram usage:        1 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    1
  5004 ;; This function calls:
  5005 ;;		_I2C2_StatusCallback
  5006 ;; This function is called by:
  5007 ;;		_INTERRUPT_InterruptManager
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text31
  5012  000C78                     __ptext31:
  5013                           	opt stack 0
  5014  000C78                     _I2C2_ISR:
  5015                           	opt stack 25
  5016                           
  5017                           ;i2c2.c: 106: uint8_t i2c_data = 0x55;
  5018                           
  5019                           ;incstack = 0
  5020  000C78  0E55               	movlw	85
  5021  000C7A  6E02               	movwf	I2C2_ISR@i2c_data,c
  5022                           
  5023                           ;i2c2.c: 112: PIR3bits.SSP2IF = 0;
  5024  000C7C  9EA4               	bcf	4004,7,c	;volatile
  5025                           
  5026                           ;i2c2.c: 113: i2c_data = SSP2BUF;
  5027  000C7E  CF6F F002          	movff	3951,I2C2_ISR@i2c_data	;volatile
  5028                           
  5029                           ;i2c2.c: 114: if(1 == SSP2STATbits.R_nW)
  5030  000C82  A46D               	btfss	3949,2,c	;volatile
  5031  000C84  D00B               	goto	i2l222
  5032                           
  5033                           ;i2c2.c: 115: {
  5034                           ;i2c2.c: 116: if((1 == SSP2STATbits.D_nA) && (1 == SSP2CON2bits.ACKSTAT))
  5035  000C86  BA6D               	btfsc	3949,5,c	;volatile
  5036  000C88  AC6B               	btfss	3947,6,c	;volatile
  5037  000C8A  D004               	goto	i2l223
  5038                           
  5039                           ;i2c2.c: 117: {
  5040                           ;i2c2.c: 119: I2C2_StatusCallback(I2C2_SLAVE_READ_COMPLETED);
  5041  000C8C  0E03               	movlw	3
  5042  000C8E  ECC8  F004         	call	_I2C2_StatusCallback
  5043                           
  5044                           ;i2c2.c: 120: }
  5045  000C92  D00F               	goto	i2l227
  5046  000C94                     i2l223:
  5047                           
  5048                           ;i2c2.c: 121: else
  5049                           ;i2c2.c: 122: {
  5050                           ;i2c2.c: 124: I2C2_StatusCallback(I2C2_SLAVE_READ_REQUEST);
  5051  000C94  0E01               	movlw	1
  5052  000C96  ECC8  F004         	call	_I2C2_StatusCallback
  5053                           
  5054                           ;i2c2.c: 125: }
  5055                           ;i2c2.c: 126: }
  5056  000C9A  D00B               	goto	i2l227
  5057  000C9C                     i2l222:
  5058                           
  5059                           ;i2c2.c: 127: else if(0 == SSP2STATbits.D_nA)
  5060  000C9C  BA6D               	btfsc	3949,5,c	;volatile
  5061  000C9E  D004               	goto	i2l226
  5062                           
  5063                           ;i2c2.c: 128: {
  5064                           ;i2c2.c: 132: I2C2_StatusCallback(I2C2_SLAVE_WRITE_REQUEST);
  5065  000CA0  0E00               	movlw	0
  5066  000CA2  ECC8  F004         	call	_I2C2_StatusCallback
  5067                           
  5068                           ;i2c2.c: 133: }
  5069  000CA6  D005               	goto	i2l227
  5070  000CA8                     i2l226:
  5071                           
  5072                           ;i2c2.c: 134: else
  5073                           ;i2c2.c: 135: {
  5074                           ;i2c2.c: 136: I2C2_slaveWriteData = i2c_data;
  5075  000CA8  C002  F047         	movff	I2C2_ISR@i2c_data,_I2C2_slaveWriteData	;volatile
  5076                           
  5077                           ;i2c2.c: 139: I2C2_StatusCallback(I2C2_SLAVE_WRITE_COMPLETED);
  5078  000CAC  0E02               	movlw	2
  5079  000CAE  ECC8  F004         	call	_I2C2_StatusCallback
  5080  000CB2                     i2l227:
  5081                           
  5082                           ;i2c2.c: 140: }
  5083                           ;i2c2.c: 142: SSP2CON1bits.CKP = 1;
  5084  000CB2  886C               	bsf	3948,4,c	;volatile
  5085  000CB4  0012               	return		;funcret
  5086  000CB6                     __end_of_I2C2_ISR:
  5087                           	opt stack 0
  5088                           pclatu	equ	0xFFB
  5089                           pclath	equ	0xFFA
  5090                           tblptru	equ	0xFF8
  5091                           tblptrh	equ	0xFF7
  5092                           tblptrl	equ	0xFF6
  5093                           tablat	equ	0xFF5
  5094                           prodh	equ	0xFF4
  5095                           prodl	equ	0xFF3
  5096                           intcon	equ	0xFF2
  5097                           intcon2	equ	0xFF1
  5098                           postinc0	equ	0xFEE
  5099                           fsr0h	equ	0xFEA
  5100                           fsr0l	equ	0xFE9
  5101                           wreg	equ	0xFE8
  5102                           postdec1	equ	0xFE5
  5103                           fsr1h	equ	0xFE2
  5104                           fsr1l	equ	0xFE1
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _I2C2_StatusCallback *****************
  5113 ;; Defined at:
  5114 ;;		line 564 in file "main.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  i2c_bus_stat    1    wreg     enum E7169
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  i2c_bus_stat    1    0[COMRAM] enum E7169
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5128 ;;      Params:         0       0       0       0
  5129 ;;      Locals:         1       0       0       0
  5130 ;;      Temps:          0       0       0       0
  5131 ;;      Totals:         1       0       0       0
  5132 ;;Total ram usage:        1 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; This function calls:
  5135 ;;		Nothing
  5136 ;; This function is called by:
  5137 ;;		_I2C2_ISR
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text32
  5142  000990                     __ptext32:
  5143                           	opt stack 0
  5144  000990                     _I2C2_StatusCallback:
  5145                           	opt stack 25
  5146                           
  5147                           ;incstack = 0
  5148                           ;I2C2_StatusCallback@i2c_bus_state stored from wreg
  5149  000990  6E01               	movwf	I2C2_StatusCallback@i2c_bus_state,c
  5150                           
  5151                           ;main.c: 566: static uint8_t RegAddress = 0;
  5152                           ;main.c: 567: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  5153                           ;main.c: 569: switch (i2c_bus_state)
  5154  000992  D02F               	goto	i2l445
  5155  000994                     
  5156                           ;main.c: 573: slaveWriteType = SLAVE_DATA_ADDRESS;
  5157  000994  0E01               	movlw	1
  5158  000996  6E45               	movwf	I2C2_StatusCallback@slaveWriteType,c
  5159                           
  5160                           ;main.c: 574: break;
  5161  000998  0012               	return	
  5162  00099A                     i2l450:
  5163                           
  5164                           ;main.c: 581: RegAddress = I2C2_slaveWriteData;
  5165  00099A  C047  F046         	movff	_I2C2_slaveWriteData,I2C2_StatusCallback@RegAddress	;volatile
  5166                           
  5167                           ;main.c: 582: break;
  5168  00099E  D00C               	goto	i2l451
  5169  0009A0                     
  5170                           ;main.c: 588: RegAddress += 1;
  5171                           
  5172                           ;main.c: 585: default:
  5173  0009A0  2A46               	incf	I2C2_StatusCallback@RegAddress,f,c
  5174                           
  5175                           ;main.c: 589: RegAddress &= 3;
  5176  0009A2  0E03               	movlw	3
  5177  0009A4  1646               	andwf	I2C2_StatusCallback@RegAddress,f,c
  5178                           
  5179                           ;main.c: 591: }
  5180                           
  5181                           ;main.c: 590: break;
  5182  0009A6  D008               	goto	i2l451
  5183  0009A8  5045               	movf	I2C2_StatusCallback@slaveWriteType,w,c
  5184                           
  5185                           ; Switch size 1, requested type "space"
  5186                           ; Number of cases is 2, Range of values is 0 to 1
  5187                           ; switch strategies available:
  5188                           ; Name         Instructions Cycles
  5189                           ; simple_byte            7     4 (average)
  5190                           ;	Chosen strategy is simple_byte
  5191  0009AA  0A00               	xorlw	0	; case 0
  5192  0009AC  B4D8               	btfsc	status,2,c
  5193  0009AE  D7F8               	goto	i2l452
  5194  0009B0  0A01               	xorlw	1	; case 1
  5195  0009B2  B4D8               	btfsc	status,2,c
  5196  0009B4  D7F2               	goto	i2l450
  5197  0009B6  D7F4               	goto	i2l452
  5198  0009B8                     i2l451:
  5199                           
  5200                           ;main.c: 593: slaveWriteType = SLAVE_NORMAL_DATA;
  5201  0009B8  0E00               	movlw	0
  5202  0009BA  6E45               	movwf	I2C2_StatusCallback@slaveWriteType,c
  5203                           
  5204                           ;main.c: 594: break;
  5205  0009BC  0012               	return	
  5206  0009BE                     
  5207                           ;main.c: 599: if (RegAddress == 0)
  5208  0009BE  5046               	movf	I2C2_StatusCallback@RegAddress,w,c
  5209  0009C0  B4D8               	btfsc	status,2,c
  5210                           
  5211                           ;main.c: 600: {
  5212                           ;main.c: 601: SSP2BUF = reg_status;
  5213  0009C2  C0E0  FF6F         	movff	_reg_status,3951	;volatile
  5214                           
  5215                           ;main.c: 602: }
  5216                           ;main.c: 604: if (RegAddress == 1)
  5217  0009C6  0446               	decf	I2C2_StatusCallback@RegAddress,w,c
  5218  0009C8  A4D8               	btfss	status,2,c
  5219  0009CA  D003               	goto	i2l456
  5220                           
  5221                           ;main.c: 605: {
  5222                           ;main.c: 606: SSP2BUF = meas_tune;
  5223  0009CC  C0DC  FF6F         	movff	_meas_tune,3951	;volatile
  5224                           
  5225                           ;main.c: 607: }
  5226  0009D0  D00C               	goto	i2l460
  5227  0009D2                     i2l456:
  5228                           
  5229                           ;main.c: 609: else if (RegAddress == 2)
  5230  0009D2  0E02               	movlw	2
  5231  0009D4  1846               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5232  0009D6  A4D8               	btfss	status,2,c
  5233  0009D8  D003               	goto	i2l458
  5234                           
  5235                           ;main.c: 610: {
  5236                           ;main.c: 611: SSP2BUF = meas_band;
  5237  0009DA  C0DA  FF6F         	movff	_meas_band,3951	;volatile
  5238                           
  5239                           ;main.c: 612: }
  5240  0009DE  D005               	goto	i2l460
  5241  0009E0                     i2l458:
  5242                           
  5243                           ;main.c: 614: else if (RegAddress == 3)
  5244  0009E0  0E03               	movlw	3
  5245  0009E2  1846               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5246  0009E4  B4D8               	btfsc	status,2,c
  5247                           
  5248                           ;main.c: 615: {
  5249                           ;main.c: 616: SSP2BUF = meas_vol;
  5250  0009E6  C0D8  FF6F         	movff	_meas_vol,3951	;volatile
  5251  0009EA                     i2l460:
  5252                           
  5253                           ;main.c: 617: }
  5254                           ;main.c: 619: RegAddress += 1;
  5255  0009EA  2A46               	incf	I2C2_StatusCallback@RegAddress,f,c
  5256                           
  5257                           ;main.c: 620: RegAddress &= 3;
  5258  0009EC  0E03               	movlw	3
  5259  0009EE  1646               	andwf	I2C2_StatusCallback@RegAddress,f,c
  5260                           
  5261                           ;main.c: 626: }
  5262                           
  5263                           ;main.c: 624: default:;
  5264                           
  5265                           ;main.c: 623: case I2C2_SLAVE_READ_COMPLETED:
  5266                           
  5267                           ;main.c: 621: break;
  5268  0009F0  0012               	return	
  5269  0009F2                     i2l445:
  5270  0009F2  5001               	movf	I2C2_StatusCallback@i2c_bus_state,w,c
  5271                           
  5272                           ; Switch size 1, requested type "space"
  5273                           ; Number of cases is 4, Range of values is 0 to 3
  5274                           ; switch strategies available:
  5275                           ; Name         Instructions Cycles
  5276                           ; simple_byte           13     7 (average)
  5277                           ;	Chosen strategy is simple_byte
  5278  0009F4  0A00               	xorlw	0	; case 0
  5279  0009F6  B4D8               	btfsc	status,2,c
  5280  0009F8  D7CD               	goto	i2l446
  5281  0009FA  0A01               	xorlw	1	; case 1
  5282  0009FC  B4D8               	btfsc	status,2,c
  5283  0009FE  D7DF               	goto	i2l454
  5284  000A00  0A03               	xorlw	3	; case 2
  5285  000A02  B4D8               	btfsc	status,2,c
  5286  000A04  D7D1               	goto	i2l449
  5287  000A06  0A01               	xorlw	1	; case 3
  5288  000A08  0012               	return	
  5289  000A0A                     __end_of_I2C2_StatusCallback:
  5290                           	opt stack 0
  5291                           pclatu	equ	0xFFB
  5292                           pclath	equ	0xFFA
  5293                           tblptru	equ	0xFF8
  5294                           tblptrh	equ	0xFF7
  5295                           tblptrl	equ	0xFF6
  5296                           tablat	equ	0xFF5
  5297                           prodh	equ	0xFF4
  5298                           prodl	equ	0xFF3
  5299                           intcon	equ	0xFF2
  5300                           intcon2	equ	0xFF1
  5301                           postinc0	equ	0xFEE
  5302                           fsr0h	equ	0xFEA
  5303                           fsr0l	equ	0xFE9
  5304                           wreg	equ	0xFE8
  5305                           postdec1	equ	0xFE5
  5306                           fsr1h	equ	0xFE2
  5307                           fsr1l	equ	0xFE1
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           pclatu	equ	0xFFB
  5315                           pclath	equ	0xFFA
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           intcon2	equ	0xFF1
  5324                           postinc0	equ	0xFEE
  5325                           fsr0h	equ	0xFEA
  5326                           fsr0l	equ	0xFE9
  5327                           wreg	equ	0xFE8
  5328                           postdec1	equ	0xFE5
  5329                           fsr1h	equ	0xFE2
  5330                           fsr1l	equ	0xFE1
  5331                           indf2	equ	0xFDF
  5332                           postinc2	equ	0xFDE
  5333                           postdec2	equ	0xFDD
  5334                           fsr2h	equ	0xFDA
  5335                           fsr2l	equ	0xFD9
  5336                           status	equ	0xFD8
  5337                           
  5338                           	psect	rparam
  5339  0000                     pclatu	equ	0xFFB
  5340                           pclath	equ	0xFFA
  5341                           tblptru	equ	0xFF8
  5342                           tblptrh	equ	0xFF7
  5343                           tblptrl	equ	0xFF6
  5344                           tablat	equ	0xFF5
  5345                           prodh	equ	0xFF4
  5346                           prodl	equ	0xFF3
  5347                           intcon	equ	0xFF2
  5348                           intcon2	equ	0xFF1
  5349                           postinc0	equ	0xFEE
  5350                           fsr0h	equ	0xFEA
  5351                           fsr0l	equ	0xFE9
  5352                           wreg	equ	0xFE8
  5353                           postdec1	equ	0xFE5
  5354                           fsr1h	equ	0xFE2
  5355                           fsr1l	equ	0xFE1
  5356                           indf2	equ	0xFDF
  5357                           postinc2	equ	0xFDE
  5358                           postdec2	equ	0xFDD
  5359                           fsr2h	equ	0xFDA
  5360                           fsr2l	equ	0xFD9
  5361                           status	equ	0xFD8
  5362                           
  5363                           	psect	temp
  5364  000048                     btemp:
  5365                           	opt stack 0
  5366  000048                     	ds	1
  5367  0000                     int$flags	set	btemp
  5368  0000                     wtemp6	set	btemp+1
  5369                           pclatu	equ	0xFFB
  5370                           pclath	equ	0xFFA
  5371                           tblptru	equ	0xFF8
  5372                           tblptrh	equ	0xFF7
  5373                           tblptrl	equ	0xFF6
  5374                           tablat	equ	0xFF5
  5375                           prodh	equ	0xFF4
  5376                           prodl	equ	0xFF3
  5377                           intcon	equ	0xFF2
  5378                           intcon2	equ	0xFF1
  5379                           postinc0	equ	0xFEE
  5380                           fsr0h	equ	0xFEA
  5381                           fsr0l	equ	0xFE9
  5382                           wreg	equ	0xFE8
  5383                           postdec1	equ	0xFE5
  5384                           fsr1h	equ	0xFE2
  5385                           fsr1l	equ	0xFE1
  5386                           indf2	equ	0xFDF
  5387                           postinc2	equ	0xFDE
  5388                           postdec2	equ	0xFDD
  5389                           fsr2h	equ	0xFDA
  5390                           fsr2l	equ	0xFD9
  5391                           status	equ	0xFD8


Data Sizes:
    Strings     215
    Constant    72
    Data        109
    BSS         23
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      71
    BANK0           160     12     141
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[16]), STR_13(CODE[17]), STR_12(CODE[13]), STR_11(CODE[13]), 
		 -> STR_10(CODE[13]), STR_9(CODE[13]), STR_8(CODE[13]), STR_7(CODE[13]), 
		 -> STR_6(CODE[13]), STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[15]), 
		 -> STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_EUSART1_Write
    ___llmod->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_StatusCallback

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    3981
                                              0 BANK0     12    12      0
                  _ADC_GetConversion
                     _ADC_Initialize
               _OSCILLATOR_FastClock
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
            _TMR0_HasOverflowOccured
                    _TMR0_Initialize
            _TMR5_HasOverflowOccured
                    _TMR5_Initialize
                             ___lmul
                      _pi_supply_off
                       _pi_supply_on
                             _printf
                     _request_pi_run
                    _request_pi_stop
                  _update_status_reg
                        _ws2812_send
 ---------------------------------------------------------------------------------
 (1) _ws2812_send                                          9     5      4     167
                                             20 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _update_status_reg                                    6     6      0       0
                                             20 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _request_pi_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _request_pi_run                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    26      6    3128
                                             42 COMRAM    23    17      6
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             33 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pi_supply_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pi_supply_off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     522
                                             20 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _TMR5_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                    _I2C2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (1) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_FastClock                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             20 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0      46
                                              2 COMRAM    18    18      0
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C2_ISR                                             1     1      0      46
                                              1 COMRAM     1     1      0
                _I2C2_StatusCallback
 ---------------------------------------------------------------------------------
 (6) _I2C2_StatusCallback                                  1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _OSCILLATOR_FastClock
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _I2C2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_HasOverflowOccured
   _TMR0_Initialize
     _TMR0_StartTimer
   _TMR5_HasOverflowOccured
   _TMR5_Initialize
     _TMR5_StartTimer
   ___lmul
   _pi_supply_off
   _pi_supply_on
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART1_Write
   _request_pi_run
   _request_pi_stop
   _update_status_reg
   _ws2812_send

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_ISR
     _I2C2_StatusCallback

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      C      8D       4       88.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D4       8        0.0%
DATA                 0      0      D4      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 12 21:58:38 2017

       __end_of_OSCILLATOR_FastClock 0DEC      __end_of_TMR0_HasOverflowOccured 0E10  
                                 l31 0CCE                  ___wmul@multiplicand 0017  
                    _timer0ReloadVal 0044                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                                  l402 055A  
                                l500 067C                                  l412 05A6  
                                l404 055E                                  l406 0576  
                                l511 076E                                  l503 066E  
                                l407 05A4                                  l512 06F6  
                                l504 0672                                  l521 07A2  
                                l522 07AA                                  l506 06B0  
                                l362 00CE                                  l531 08E4  
                                l523 07C4                                  l363 00EE  
                                l516 077E                                  l508 0676  
                                l372 01AA                                  l364 0114  
                                l533 08CE                                  l517 0732  
                                l509 06D0                                  l373 017C  
                                l534 07EC                                  l470 0AF8  
                                l382 023E                                  l374 01A0  
                                l366 011C                                  l551 0B4E  
                                l535 08DE                                  l471 0B02  
                                l391 0304                                  l383 0216  
                                l367 0160                                  l552 0B62  
                                l536 0864                                  l368 013C  
                                l377 01FA                                  l386 029E  
                                l378 01C6                                  l491 05E2  
                                l387 025A                                  l379 01F0  
                                l900 097E                                  l492 05DC  
                                l468 0AE8                                  l388 0286  
                                l910 0ACA                                  l488 05BE  
                                l905 0A94                                  l497 0610  
                                l489 05CE                                  l906 0A88  
                                l909 0ABC                                  l869 0D66  
                                l895 093C                                  l896 0930  
                                l899 0970                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                                  u960 0940  
                                u990 0A98          __end_of_I2C2_StatusCallback 0A0A  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                   __end_of_I2C2_ISR 0CB6                                 l2104 0AE0  
                               l2034 06FA                                 PORTC 000F82  
                               l2048 0736                                 l2094 08CE  
                               l2456 0286                                 l1794 0DEE  
                               STR_1 3F88                                 STR_2 3F49  
                               STR_3 3F79                                 STR_4 3F6A  
                               STR_5 3FF1                                 STR_6 3FE4  
                               STR_7 3FB0                                 STR_8 3FBD  
                               STR_9 3FD7                                 u1020 0E0C  
                               u1030 0E00                                 u2010 052A  
                               u1220 07CC                                 u2005 03D6  
                               u1230 07E0                                 u1240 08F4  
                               u1320 0BC6                                 u1305 0BA8  
                               u1315 0BB4                                 _LATA 000F89  
                               _LATB 000F8A                                 u1335 0BC8  
                               _LATC 000F8B                                 u1280 0B30  
                               _LATD 000F8C                                 u2057 0B32  
                               _LATE 000F8D                                 u1290 0BA6  
                               u1730 00F6                                 u1740 00F8  
                               u1950 0292                                 u1980 0370  
                               u1990 03B8                                 u1985 0366  
                               u1995 03AE                                 _TMR5 000F4F  
                               _WPUB 000F61                        _EUSART1_Write 0DEC  
                    _led_pattern_idx 00DE                      _led_pattern_tbl 0060  
                               _main 00AE                      _TMR0_StartTimer 0E30  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0048  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AA  
                    _timer5ReloadVal 0042                        __CFG_IESO$OFF 000000  
                       ___param_bank 000000              __end_of_TMR0_Initialize 0DA4  
              __end_of_pi_supply_off 0E30       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 0DDE                                ?_main 0001  
                              STR_10 3FA3                                STR_11 3F96  
                              STR_12 3FCA                                STR_13 3F38  
                              STR_14 3F5A                                STR_15 3F27  
                    __end_of___lldiv 0990                                _T0CON 000FD5  
                    __end_of___llmod 0ADC                                _T5CON 000F4E  
                     __CFG_DEBUG$OFF 000000                                i2l222 0C9C  
                              i2l223 0C94                                i2l226 0CA8  
                              i2l227 0CB2                                i2l450 099A  
                              i2l451 09B8                                i2l460 09EA  
                              i2l452 09A0                                i2l445 09F2  
                              i2l454 09BE                                i2l446 0994  
                              i2l286 005E                                i2l456 09D2  
                              i2l449 09A8                                i2l458 09E0  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _TMR5H 000F50                                _TMR5L 000F4F  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                  ___lmul@multiplicand 0019  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                     _color_test_table 00A8  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers 3F07                      __end_of_isdigit 0D6E  
                 __CFG_MCLRE$EXTMCLR 000000                                _putch 0E10  
                     ?_EUSART1_Write 0001                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                              wtemp6 0049                       __CFG_HFOFST$ON 000000  
                     __CFG_PBADEN$ON 000000                      _TMR5_Initialize 0D2E  
                  ??_I2C2_Initialize 0015                      __initialization 0BE8  
         __end_of_EUSART1_Initialize 0DBA                         __end_of_main 05B4  
               __size_of_ws2812_send 0062          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 00E1                        __activetblptr 000002  
            __end_of_TMR0_StartTimer 0E34                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   ___llmod@dividend 0022                               _ADRESH 000FC4  
                             _ADRESL 000FC3                 _OSCILLATOR_FastClock 0DDE  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                      main@meas_pi3v 00EB                        main@meas_pi5v 00E9  
                             _T5GCON 000F4D                       __CFG_WDTEN$OFF 000000  
                             _RCREG1 000FAE                               _RCSTA1 000FAB  
                             _OSCCON 000FD3     __size_of_TMR0_HasOverflowOccured 000C  
                             _SPBRG1 000FAF                               _TXREG1 000FAD  
                             _TXSTA1 000FAC                       ws2812_send@led 0015  
                     __CFG_XINST$OFF 000000                               ___lmul 0B3E  
                             ___wmul 0CE6                       __CFG_STVREN$ON 000000  
                          ??___lldiv 001D                            ??___llmod 002A  
                   ?_TMR0_Initialize 0001                            ?_I2C2_ISR 0001  
                             clear_0 0C20    I2C2_StatusCallback@slaveWriteType 0045  
                             _printf 05B4                      _TMR5_StartTimer 0E1A  
           ?_TMR5_HasOverflowOccured 0001                         __pdataCOMRAM 0047  
                          ??_isdigit 0015                      _request_pi_stop 0E20  
                       __mediumconst 3EDE                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0019                      ??_EUSART1_Write 0015  
              ?_OSCILLATOR_FastClock 0001        __size_of_INTERRUPT_Initialize 0004  
            __end_of_TMR5_Initialize 0D50                    _SYSTEM_Initialize 0D0C  
                         __accesstop 0060              __end_of__initialization 0C2A  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                     __pcstackCOMRAM 0001                         __pidataBANK0 0A0A  
                ??_SYSTEM_Initialize 0015                    _update_status_reg 0B94  
                      __end_of_putch 0E1A                           ??_I2C2_ISR 0002  
                 ?_update_status_reg 0001                  _I2C2_slaveWriteData 0047  
                ??_update_status_reg 0015                     ?_TMR0_StartTimer 0001  
          __end_of_SYSTEM_Initialize 0D2E                        ?_pi_supply_on 0001  
                            ??_putch 0016                           __pbssBANK0 00CC  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 0042  
                 __CFG_CCP2MX$PORTC1 000000            __end_of_update_status_reg 0BE8  
                            ?___lmul 0015                              ?___wmul 0015  
            __end_of_TMR5_StartTimer 0E20                   __CFG_CCP3MX$PORTB5 000000  
    __end_of_TMR5_HasOverflowOccured 0E04              __end_of_request_pi_stop 0E24  
                     ___lmul@product 001D                              ?_printf 002B  
            __size_of_ADC_Initialize 0016                              _OSCCON2 000FD2  
             ??_OSCILLATOR_FastClock 0015                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                              _SSP2ADD 000F6E  
                     ??_pi_supply_on 0015                              _SSP2BUF 000F6F  
                            _SSP2MSK 000F6A         __size_of_I2C2_StatusCallback 007A  
                    _I2C2_Initialize 0D6E              _TMR0_HasOverflowOccured 0E04  
                   ?_TMR5_Initialize 0001                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                    __size_of___lmul 0056                              ___lldiv 090E  
                    __size_of___wmul 0026                              ___llmod 0A76  
                            __pcinit 0BE8                              __ramtop 0300  
            __size_of_request_pi_run 0004                              __ptext0 00AE  
                            __ptext1 0ADC                              __ptext2 0B94  
                            __ptext3 0E20                              __ptext4 0E24  
                            __ptext5 05B4                              __ptext6 0E10  
                            __ptext7 0DEC                              __ptext8 0D50  
                            __ptext9 0CE6                      __size_of_printf 035A  
                          _T0CONbits 000FD5                    __end_of_hexpowers 3F27  
                            _dpowers 3EDF                _OSCILLATOR_Initialize 0DD0  
                            _isdigit 0D50                   _EUSART1_Initialize 0DA4  
           ??_PIN_MANAGER_Initialize 0015                            _T5CONbits 000F4E  
                         _reg_status 00E0           __size_of_SYSTEM_Initialize 0022  
               end_of_initialization 0C2A                  ?_EUSART1_Initialize 0001  
             __size_of_pi_supply_off 0004                        __Lmediumconst 3EDE  
                    ___lldiv@divisor 0019                      ___lldiv@counter 0021  
                      ??_ws2812_send 0019           __size_of_update_status_reg 0054  
                            printf@c 0041                              printf@f 002B  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                   ?_TMR5_StartTimer 0001                 ??_EUSART1_Initialize 0015  
                   ?_request_pi_stop 0001                           _prev_color 00C8  
                          _PORTCbits 000F82                            _PORTDbits 000F83  
                  __size_of_I2C2_ISR 003E              __end_of_I2C2_Initialize 0D8C  
          ??_TMR0_HasOverflowOccured 0015                  EUSART1_Write@txData 0015  
   __size_of_TMR5_HasOverflowOccured 000C                          printf@width 003F  
               __end_of_pi_supply_on 0E2C         __end_of_INTERRUPT_Initialize 0E38  
                     __end_of___lmul 0B94                       __end_of___wmul 0D0C  
                      __pidataCOMRAM 0E38                  __end_of_ws2812_send 0B3E  
                     _ADC_Initialize 0DBA                        _pi_supply_off 0E2C  
             ?_OSCILLATOR_Initialize 0001                       __end_of_printf 090E  
   I2C2_StatusCallback@i2c_bus_state 0001                  start_initialization 0BE8  
           __size_of_TMR0_Initialize 0018      __size_of_PIN_MANAGER_Initialize 0040  
                        putch@txData 0016                __end_of_EUSART1_Write 0DF8  
                    ___llmod@divisor 0026                      ___llmod@counter 002A  
                           ??___lmul 001D                             ??___wmul 0019  
             __end_of_ADC_Initialize 0DD0                          __pdataBANK0 0060  
                _I2C2_StatusCallback 0990                       ?_pi_supply_off 0001  
                     _request_pi_run 0E24                             ??_printf 0031  
                        __pbssCOMRAM 0045                     ?_I2C2_Initialize 0001  
                      __pcstackBANK0 00E1                         _isdigit$1997 0016  
               ?_I2C2_StatusCallback 0001             __size_of_TMR0_StartTimer 0004  
             _PIN_MANAGER_Initialize 0C38                          _ws2812_send 0ADC  
                          __pintcode 0008                        __pmediumconst 3EDE  
             __end_of_request_pi_run 0E28                             ?___lldiv 0015  
                           ?___llmod 0022                      ?_ADC_Initialize 0001  
                           _I2C2_ISR 0C78         ??_INTERRUPT_InterruptManager 0003  
                   __CFG_PRICLKEN$ON 000000                            _led_color 00D4  
                           _BAUDCON1 000FB8                             ?_isdigit 0001  
                          _meas_band 00DA                            _meas_tune 00DC  
                          _hexpowers 3F07                ??_I2C2_StatusCallback 0001  
      __size_of_OSCILLATOR_FastClock 000E                       __size_of_putch 000A  
               _INTERRUPT_Initialize 0E34              _TMR5_HasOverflowOccured 0DF8  
                  ??_TMR0_Initialize 0015                       ___wmul@product 0019  
                           _LATCbits 000F8B                             _LATDbits 000F8C  
                           _PIE3bits 000FA3                __size_of_pi_supply_on 0004  
__size_of_INTERRUPT_InterruptManager 00A2                             _PIR1bits 000F9E  
                           _PIR3bits 000FA4                             _PIR5bits 000F7E  
           __size_of_TMR5_Initialize 0022                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                      ??_pi_supply_off 0015  
                           _SSP2CON1 000F6C                             _SSP2CON2 000F6B  
                           _SSP2CON3 000F69                     I2C2_ISR@i2c_data 0002  
                    ?_request_pi_run 0001                             _SSP2STAT 000F6D  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 0015  
                         printf@flag 003E                           printf@prec 0038  
                  ___lmul@multiplier 0015                          _INTCON2bits 000FF1  
                          copy_data0 0BFC                         _pi_supply_on 0E28  
              ?_INTERRUPT_Initialize 0001                             __Hrparam 0000  
                       ws2812_send@j 001D                             __Lrparam 0000  
                  _ADC_GetConversion 0CB6                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0015  
                 ?_ADC_GetConversion 0015                    ??_TMR0_StartTimer 0015  
                   __size_of___lldiv 0082                     __size_of___llmod 0066  
        __size_of_EUSART1_Initialize 0016                  ??_ADC_GetConversion 0017  
           __size_of_TMR5_StartTimer 0006                     __size_of_isdigit 001E  
           __size_of_request_pi_stop 0004            ??_TMR5_HasOverflowOccured 0015  
                           __ptext10 0A76                             __ptext11 090E  
                           __ptext20 0D8C                             __ptext12 0E28  
                           __ptext21 0E30                             __ptext13 0E2C  
                           __ptext22 0C38                             __ptext14 0B3E  
                           __ptext31 0C78                             __ptext23 0DD0  
                           __ptext15 0DF8                             __ptext32 0990  
                           __ptext24 0E34                             __ptext16 0E04  
                           __ptext25 0D6E                             __ptext17 0D0C  
                           __ptext26 0DA4                             __ptext18 0D2E  
                           __ptext27 0DBA                             __ptext19 0E1A  
                           __ptext28 0DDE                             __ptext29 0CB6  
                       _SSP2CON1bits 000F6C                         _SSP2CON2bits 000F6B  
                           _meas_vol 00D8                        __size_of_main 0506  
                         _T5GCONbits 000F4D                             _pi_power 00CC  
          __end_of_ADC_GetConversion 0CE6                          _reg_control 00DF  
                           int$flags 0048   __end_of_INTERRUPT_InterruptManager 00AA  
         _INTERRUPT_InterruptManager 0008                            printf@idx 0035  
                           main@pi3v 00E5                             main@pi5v 00E7  
                          printf@val 003A                         _SSP2STATbits 000F6D  
                  ??_TMR5_Initialize 0015             ?_TMR0_HasOverflowOccured 0001  
                         _INTCONbits 000FF2        I2C2_StatusCallback@RegAddress 0046  
                           isdigit@c 0017               ??_INTERRUPT_Initialize 0015  
                           intlevel2 0000                     ___lldiv@dividend 0015  
            ?_PIN_MANAGER_Initialize 0001                           _RCSTA1bits 000FAB  
                   ??_ADC_Initialize 0015                         ?_ws2812_send 0015  
                           printf@ap 0036               __size_of_EUSART1_Write 000C  
                   ___lldiv@quotient 001D                      _TMR0_Initialize 0D8C  
                  __CFG_T3CMX$PORTC0 000000                    ??_TMR5_StartTimer 0015  
     __end_of_PIN_MANAGER_Initialize 0C78             __size_of_I2C2_Initialize 001E  
                  ??_request_pi_stop 0015                    __CFG_FOSC$INTIO67 000000  
                   ??_request_pi_run 0015           __size_of_ADC_GetConversion 0030  
