

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 12 09:50:31 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F44K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.44
    54                           ; Generated 14/09/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F44K22 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  000D6A                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _I2C2_slaveWriteData
    93  000D6A  55                 	db	85
    94                           
    95                           	psect	idataBANK0
    96  000D4E                     __pidataBANK0:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _prev_color
   100  000D4E  0001               	dw	1
   101  000D50  0000               	dw	0
   102                           
   103                           	psect	mediumconst
   104  003EEC                     __pmediumconst:
   105                           	opt stack 0
   106  003EEC  00                 	db	0
   107  003EED                     _dpowers:
   108                           	opt stack 0
   109  003EED  0001               	dw	1
   110  003EEF  0000               	dw	0
   111  003EF1  000A               	dw	10
   112  003EF3  0000               	dw	0
   113  003EF5  0064               	dw	100
   114  003EF7  0000               	dw	0
   115  003EF9  03E8               	dw	1000
   116  003EFB  0000               	dw	0
   117  003EFD  2710               	dw	10000
   118  003EFF  0000               	dw	0
   119  003F01  86A0               	dw	34464
   120  003F03  0001               	dw	1
   121  003F05  4240               	dw	16960
   122  003F07  000F               	dw	15
   123  003F09  9680               	dw	38528
   124  003F0B  0098               	dw	152
   125  003F0D  E100               	dw	57600
   126  003F0F  05F5               	dw	1525
   127  003F11  CA00               	dw	51712
   128  003F13  3B9A               	dw	15258
   129  003F15                     __end_of_dpowers:
   130                           	opt stack 0
   131  003F15                     _hexpowers:
   132                           	opt stack 0
   133  003F15  0001               	dw	1
   134  003F17  0000               	dw	0
   135  003F19  0010               	dw	16
   136  003F1B  0000               	dw	0
   137  003F1D  0100               	dw	256
   138  003F1F  0000               	dw	0
   139  003F21  1000               	dw	4096
   140  003F23  0000               	dw	0
   141  003F25  0000               	dw	0
   142  003F27  0001               	dw	1
   143  003F29  0000               	dw	0
   144  003F2B  0010               	dw	16
   145  003F2D  0000               	dw	0
   146  003F2F  0100               	dw	256
   147  003F31  0000               	dw	0
   148  003F33  1000               	dw	4096
   149  003F35                     __end_of_hexpowers:
   150                           	opt stack 0
   151  003F35                     STR_14:
   152  003F35  30                 	db	48	;'0'
   153  003F36  31                 	db	49	;'1'
   154  003F37  32                 	db	50	;'2'
   155  003F38  33                 	db	51	;'3'
   156  003F39  34                 	db	52	;'4'
   157  003F3A  35                 	db	53	;'5'
   158  003F3B  36                 	db	54	;'6'
   159  003F3C  37                 	db	55	;'7'
   160  003F3D  38                 	db	56	;'8'
   161  003F3E  39                 	db	57	;'9'
   162  003F3F  41                 	db	65	;'A'
   163  003F40  42                 	db	66	;'B'
   164  003F41  43                 	db	67	;'C'
   165  003F42  44                 	db	68	;'D'
   166  003F43  45                 	db	69	;'E'
   167  003F44  46                 	db	70	;'F'
   168  003F45  00                 	db	0
   169  003F46                     STR_12:
   170  003F46  0A                 	db	10
   171  003F47  0A                 	db	10
   172  003F48  0D                 	db	13
   173  003F49  50                 	db	80	;'P'
   174  003F4A  69                 	db	105	;'i'
   175  003F4B  33                 	db	51	;'3'
   176  003F4C  56                 	db	86	;'V'
   177  003F4D  20                 	db	32
   178  003F4E  20                 	db	32
   179  003F4F  20                 	db	32
   180  003F50  20                 	db	32
   181  003F51  25                 	db	37
   182  003F52  75                 	db	117	;'u'
   183  003F53  20                 	db	32
   184  003F54  6D                 	db	109	;'m'
   185  003F55  56                 	db	86	;'V'
   186  003F56  00                 	db	0
   187  003F57                     STR_1:
   188  003F57  0A                 	db	10
   189  003F58  0A                 	db	10
   190  003F59  0D                 	db	13
   191  003F5A  4C                 	db	76	;'L'
   192  003F5B  45                 	db	69	;'E'
   193  003F5C  44                 	db	68	;'D'
   194  003F5D  20                 	db	32
   195  003F5E  20                 	db	32
   196  003F5F  20                 	db	32
   197  003F60  30                 	db	48	;'0'
   198  003F61  78                 	db	120	;'x'
   199  003F62  25                 	db	37
   200  003F63  30                 	db	48	;'0'
   201  003F64  38                 	db	56	;'8'
   202  003F65  6C                 	db	108	;'l'
   203  003F66  58                 	db	88	;'X'
   204  003F67  00                 	db	0
   205  003F68                     STR_13:
   206  003F68  0A                 	db	10
   207  003F69  0D                 	db	13
   208  003F6A  50                 	db	80	;'P'
   209  003F6B  69                 	db	105	;'i'
   210  003F6C  35                 	db	53	;'5'
   211  003F6D  56                 	db	86	;'V'
   212  003F6E  20                 	db	32
   213  003F6F  20                 	db	32
   214  003F70  20                 	db	32
   215  003F71  20                 	db	32
   216  003F72  25                 	db	37
   217  003F73  75                 	db	117	;'u'
   218  003F74  20                 	db	32
   219  003F75  6D                 	db	109	;'m'
   220  003F76  56                 	db	86	;'V'
   221  003F77  00                 	db	0
   222  003F78                     STR_3:
   223  003F78  0A                 	db	10
   224  003F79  0D                 	db	13
   225  003F7A  43                 	db	67	;'C'
   226  003F7B  54                 	db	84	;'T'
   227  003F7C  52                 	db	82	;'R'
   228  003F7D  4C                 	db	76	;'L'
   229  003F7E  20                 	db	32
   230  003F7F  20                 	db	32
   231  003F80  30                 	db	48	;'0'
   232  003F81  78                 	db	120	;'x'
   233  003F82  25                 	db	37
   234  003F83  30                 	db	48	;'0'
   235  003F84  32                 	db	50	;'2'
   236  003F85  58                 	db	88	;'X'
   237  003F86  00                 	db	0
   238  003F87                     STR_2:
   239  003F87  0A                 	db	10
   240  003F88  0D                 	db	13
   241  003F89  53                 	db	83	;'S'
   242  003F8A  54                 	db	84	;'T'
   243  003F8B  41                 	db	65	;'A'
   244  003F8C  54                 	db	84	;'T'
   245  003F8D  20                 	db	32
   246  003F8E  20                 	db	32
   247  003F8F  30                 	db	48	;'0'
   248  003F90  78                 	db	120	;'x'
   249  003F91  25                 	db	37
   250  003F92  30                 	db	48	;'0'
   251  003F93  32                 	db	50	;'2'
   252  003F94  58                 	db	88	;'X'
   253  003F95  00                 	db	0
   254  003F96                     STR_10:
   255  003F96  0A                 	db	10
   256  003F97  0D                 	db	13
   257  003F98  42                 	db	66	;'B'
   258  003F99  41                 	db	65	;'A'
   259  003F9A  4E                 	db	78	;'N'
   260  003F9B  44                 	db	68	;'D'
   261  003F9C  20                 	db	32
   262  003F9D  20                 	db	32
   263  003F9E  20                 	db	32
   264  003F9F  20                 	db	32
   265  003FA0  25                 	db	37
   266  003FA1  75                 	db	117	;'u'
   267  003FA2  00                 	db	0
   268  003FA3                     STR_9:
   269  003FA3  0A                 	db	10
   270  003FA4  0D                 	db	13
   271  003FA5  54                 	db	84	;'T'
   272  003FA6  55                 	db	85	;'U'
   273  003FA7  4E                 	db	78	;'N'
   274  003FA8  45                 	db	69	;'E'
   275  003FA9  20                 	db	32
   276  003FAA  20                 	db	32
   277  003FAB  20                 	db	32
   278  003FAC  20                 	db	32
   279  003FAD  25                 	db	37
   280  003FAE  75                 	db	117	;'u'
   281  003FAF  00                 	db	0
   282  003FB0                     STR_6:
   283  003FB0  0A                 	db	10
   284  003FB1  0D                 	db	13
   285  003FB2  53                 	db	83	;'S'
   286  003FB3  54                 	db	84	;'T'
   287  003FB4  41                 	db	65	;'A'
   288  003FB5  54                 	db	84	;'T'
   289  003FB6  45                 	db	69	;'E'
   290  003FB7  20                 	db	32
   291  003FB8  20                 	db	32
   292  003FB9  20                 	db	32
   293  003FBA  25                 	db	37
   294  003FBB  75                 	db	117	;'u'
   295  003FBC  00                 	db	0
   296  003FBD                     STR_7:
   297  003FBD  0A                 	db	10
   298  003FBE  0D                 	db	13
   299  003FBF  41                 	db	65	;'A'
   300  003FC0  43                 	db	67	;'C'
   301  003FC1  5F                 	db	95	;'_'
   302  003FC2  4F                 	db	79	;'O'
   303  003FC3  4E                 	db	78	;'N'
   304  003FC4  20                 	db	32
   305  003FC5  20                 	db	32
   306  003FC6  20                 	db	32
   307  003FC7  25                 	db	37
   308  003FC8  75                 	db	117	;'u'
   309  003FC9  00                 	db	0
   310  003FCA                     STR_11:
   311  003FCA  0A                 	db	10
   312  003FCB  0D                 	db	13
   313  003FCC  56                 	db	86	;'V'
   314  003FCD  4F                 	db	79	;'O'
   315  003FCE  4C                 	db	76	;'L'
   316  003FCF  55                 	db	85	;'U'
   317  003FD0  4D                 	db	77	;'M'
   318  003FD1  45                 	db	69	;'E'
   319  003FD2  20                 	db	32
   320  003FD3  20                 	db	32
   321  003FD4  25                 	db	37
   322  003FD5  75                 	db	117	;'u'
   323  003FD6  00                 	db	0
   324  003FD7                     STR_8:
   325  003FD7  0A                 	db	10
   326  003FD8  0D                 	db	13
   327  003FD9  50                 	db	80	;'P'
   328  003FDA  49                 	db	73	;'I'
   329  003FDB  5F                 	db	95	;'_'
   330  003FDC  52                 	db	82	;'R'
   331  003FDD  55                 	db	85	;'U'
   332  003FDE  4E                 	db	78	;'N'
   333  003FDF  20                 	db	32
   334  003FE0  20                 	db	32
   335  003FE1  25                 	db	37
   336  003FE2  75                 	db	117	;'u'
   337  003FE3  00                 	db	0
   338  003FE4                     STR_5:
   339  003FE4  0A                 	db	10
   340  003FE5  0D                 	db	13
   341  003FE6  53                 	db	83	;'S'
   342  003FE7  50                 	db	80	;'P'
   343  003FE8  5F                 	db	95	;'_'
   344  003FE9  43                 	db	67	;'C'
   345  003FEA  4E                 	db	78	;'N'
   346  003FEB  54                 	db	84	;'T'
   347  003FEC  20                 	db	32
   348  003FED  20                 	db	32
   349  003FEE  25                 	db	37
   350  003FEF  75                 	db	117	;'u'
   351  003FF0  00                 	db	0
   352  003FF1                     STR_4:
   353  003FF1  0A                 	db	10
   354  003FF2  0D                 	db	13
   355  003FF3  53                 	db	83	;'S'
   356  003FF4  54                 	db	84	;'T'
   357  003FF5  5F                 	db	95	;'_'
   358  003FF6  43                 	db	67	;'C'
   359  003FF7  4E                 	db	78	;'N'
   360  003FF8  54                 	db	84	;'T'
   361  003FF9  20                 	db	32
   362  003FFA  20                 	db	32
   363  003FFB  25                 	db	37
   364  003FFC  75                 	db	117	;'u'
   365  003FFD  00                 	db	0
   366                           
   367                           ; #config settings
   368  003FFE  00                 	db	0	; dummy byte at the end
   369  0000                     
   370                           	psect	nvCOMRAM
   371  000043                     __pnvCOMRAM:
   372                           	opt stack 0
   373  000043                     _timer5ReloadVal:
   374                           	opt stack 0
   375  000043                     	ds	2
   376  000045                     _timer0ReloadVal:
   377                           	opt stack 0
   378  000045                     	ds	1
   379  0000                     _TMR5	set	3919
   380  0000                     _T5GCONbits	set	3917
   381  0000                     _T5CONbits	set	3918
   382  0000                     _TMR5L	set	3919
   383  0000                     _TMR5H	set	3920
   384  0000                     _T5GCON	set	3917
   385  0000                     _T5CON	set	3918
   386  0000                     _ANSELA	set	3896
   387  0000                     _ANSELE	set	3900
   388  0000                     _ANSELD	set	3899
   389  0000                     _ANSELB	set	3897
   390  0000                     _ANSELC	set	3898
   391  0000                     _RCONbits	set	4048
   392  0000                     _TXREG1	set	4013
   393  0000                     _RCREG1	set	4014
   394  0000                     _RCSTA1bits	set	4011
   395  0000                     _PIR1bits	set	3998
   396  0000                     _SPBRGH1	set	4016
   397  0000                     _SPBRG1	set	4015
   398  0000                     _TXSTA1	set	4012
   399  0000                     _RCSTA1	set	4011
   400  0000                     _BAUDCON1	set	4024
   401  0000                     _SSP2CON1bits	set	3948
   402  0000                     _SSP2CON2bits	set	3947
   403  0000                     _SSP2STATbits	set	3949
   404  0000                     _PIE3bits	set	4003
   405  0000                     _PIR3bits	set	4004
   406  0000                     _SSP2ADD	set	3950
   407  0000                     _SSP2MSK	set	3946
   408  0000                     _SSP2CON3	set	3945
   409  0000                     _SSP2CON2	set	3947
   410  0000                     _SSP2CON1	set	3948
   411  0000                     _SSP2STAT	set	3949
   412  0000                     _PIR5bits	set	3966
   413  0000                     _T0CONbits	set	4053
   414  0000                     _TMR0L	set	4054
   415  0000                     _TMR0H	set	4055
   416  0000                     _T0CON	set	4053
   417  0000                     _INTCON2bits	set	4081
   418  0000                     _WPUB	set	3937
   419  0000                     _TRISD	set	3989
   420  0000                     _TRISC	set	3988
   421  0000                     _TRISB	set	3987
   422  0000                     _TRISA	set	3986
   423  0000                     _TRISE	set	3990
   424  0000                     _LATC	set	3979
   425  0000                     _LATB	set	3978
   426  0000                     _LATA	set	3977
   427  0000                     _LATD	set	3980
   428  0000                     _LATE	set	3981
   429  0000                     _OSCTUNE	set	3995
   430  0000                     _OSCCON2	set	4050
   431  0000                     _OSCCON	set	4051
   432  0000                     _ADCON0bits	set	4034
   433  0000                     _ADRESH	set	4036
   434  0000                     _ADRESL	set	4035
   435  0000                     _ADCON2	set	4032
   436  0000                     _ADCON1	set	4033
   437  0000                     _ADCON0	set	4034
   438  0000                     _SSP2BUF	set	3951
   439  0000                     _LATDbits	set	3980
   440  0000                     _PORTCbits	set	3970
   441  0000                     _INTCONbits	set	4082
   442  0000                     _LATCbits	set	3979
   443  0000                     _PORTDbits	set	3971
   444                           
   445                           	psect	cinit
   446  000B16                     __pcinit:
   447                           	opt stack 0
   448  000B16                     start_initialization:
   449                           	opt stack 0
   450  000B16                     __initialization:
   451                           	opt stack 0
   452                           
   453                           ; Initialize objects allocated to BANK0 (4 bytes)
   454                           ; load TBLPTR registers with __pidataBANK0
   455  000B16  0E4E               	movlw	low __pidataBANK0
   456  000B18  6EF6               	movwf	tblptrl,c
   457  000B1A  0E0D               	movlw	high __pidataBANK0
   458  000B1C  6EF7               	movwf	tblptrh,c
   459  000B1E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   460  000B20  6EF8               	movwf	tblptru,c
   461  000B22  EE00  F07D         	lfsr	0,__pdataBANK0
   462  000B26  EE10 F004          	lfsr	1,4
   463  000B2A                     copy_data0:
   464  000B2A  0009               	tblrd		*+
   465  000B2C  CFF5 FFEE          	movff	tablat,postinc0
   466  000B30  50E5               	movf	postdec1,w,c
   467  000B32  50E1               	movf	fsr1l,w,c
   468  000B34  E1FA               	bnz	copy_data0
   469                           
   470                           ; Initialize objects allocated to COMRAM (1 bytes)
   471                           ; load TBLPTR registers with __pidataCOMRAM
   472  000B36  0E6A               	movlw	low __pidataCOMRAM
   473  000B38  6EF6               	movwf	tblptrl,c
   474  000B3A  0E0D               	movlw	high __pidataCOMRAM
   475  000B3C  6EF7               	movwf	tblptrh,c
   476  000B3E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   477  000B40  6EF8               	movwf	tblptru,c
   478  000B42  0009               	tblrd		*+	;fetch initializer
   479  000B44  CFF5 F048          	movff	tablat,__pdataCOMRAM
   480                           
   481                           ; Clear objects allocated to BANK0 (20 bytes)
   482  000B48  EE00  F060         	lfsr	0,__pbssBANK0
   483  000B4C  0E14               	movlw	20
   484  000B4E                     clear_0:
   485  000B4E  6AEE               	clrf	postinc0,c
   486  000B50  06E8               	decf	wreg,f,c
   487  000B52  E1FD               	bnz	clear_0
   488                           
   489                           ; Clear objects allocated to COMRAM (2 bytes)
   490  000B54  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   491  000B56  6A46               	clrf	__pbssCOMRAM& (0+255),c
   492  000B58                     end_of_initialization:
   493                           	opt stack 0
   494  000B58                     __end_of__initialization:
   495                           	opt stack 0
   496  000B58  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   497  000B5A  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   498  000B5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   499  000B5E  6EF8               	movwf	tblptru,c
   500  000B60  0100               	movlb	0
   501  000B62  EF57  F000         	goto	_main	;jump to C main() function
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	bssCOMRAM
   512  000046                     __pbssCOMRAM:
   513                           	opt stack 0
   514  000046                     I2C2_StatusCallback@slaveWriteType:
   515                           	opt stack 0
   516  000046                     	ds	1
   517  000047                     I2C2_StatusCallback@RegAddress:
   518                           	opt stack 0
   519  000047                     	ds	1
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           postdec1	equ	0xFE5
   527                           fsr1l	equ	0xFE1
   528                           
   529                           	psect	dataCOMRAM
   530  000048                     __pdataCOMRAM:
   531                           	opt stack 0
   532  000048                     _I2C2_slaveWriteData:
   533                           	opt stack 0
   534  000048                     	ds	1
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	bssBANK0
   545  000060                     __pbssBANK0:
   546                           	opt stack 0
   547  000060                     _pi_power:
   548                           	opt stack 0
   549  000060                     	ds	8
   550  000068                     _led_color:
   551                           	opt stack 0
   552  000068                     	ds	4
   553  00006C                     _meas_vol:
   554                           	opt stack 0
   555  00006C                     	ds	2
   556  00006E                     _meas_band:
   557                           	opt stack 0
   558  00006E                     	ds	2
   559  000070                     _meas_tune:
   560                           	opt stack 0
   561  000070                     	ds	2
   562  000072                     _reg_control:
   563                           	opt stack 0
   564  000072                     	ds	1
   565  000073                     _reg_status:
   566                           	opt stack 0
   567  000073                     	ds	1
   568                           tblptru	equ	0xFF8
   569                           tblptrh	equ	0xFF7
   570                           tblptrl	equ	0xFF6
   571                           tablat	equ	0xFF5
   572                           postinc0	equ	0xFEE
   573                           wreg	equ	0xFE8
   574                           postdec1	equ	0xFE5
   575                           fsr1l	equ	0xFE1
   576                           
   577                           	psect	dataBANK0
   578  00007D                     __pdataBANK0:
   579                           	opt stack 0
   580  00007D                     _prev_color:
   581                           	opt stack 0
   582  00007D                     	ds	4
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1l	equ	0xFE1
   591                           
   592                           	psect	cstackBANK0
   593  000074                     __pcstackBANK0:
   594                           	opt stack 0
   595  000074                     main@pi3v:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x0
   599  000074                     	ds	2
   600  000076                     main@pi5v:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x2
   604  000076                     	ds	2
   605  000078                     main@meas_pi5v:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x4
   609  000078                     	ds	2
   610  00007A                     main@meas_pi3v:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x6
   614  00007A                     	ds	2
   615  00007C                     main@led_counter:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x8
   619  00007C                     	ds	1
   620                           tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           postdec1	equ	0xFE5
   627                           fsr1l	equ	0xFE1
   628                           
   629                           	psect	cstackCOMRAM
   630  000001                     __pcstackCOMRAM:
   631                           	opt stack 0
   632  000001                     I2C2_StatusCallback@i2c_bus_state:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x0
   636  000001                     	ds	1
   637  000002                     I2C2_ISR@i2c_data:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x1
   641  000002                     	ds	1
   642  000003                     ??_INTERRUPT_InterruptManager:
   643                           
   644                           ; 1 bytes @ 0x2
   645  000003                     	ds	18
   646  000015                     ??_update_status_reg:
   647  000015                     ??_isdigit:
   648  000015                     ?_ADC_GetConversion:
   649                           	opt stack 0
   650  000015                     ?___wmul:
   651                           	opt stack 0
   652  000015                     ?___lmul:
   653                           	opt stack 0
   654  000015                     ?___lldiv:
   655                           	opt stack 0
   656  000015                     EUSART1_Write@txData:
   657                           	opt stack 0
   658  000015                     ___wmul@multiplier:
   659                           	opt stack 0
   660  000015                     ws2812_send@led:
   661                           	opt stack 0
   662  000015                     ___lmul@multiplier:
   663                           	opt stack 0
   664  000015                     ___lldiv@dividend:
   665                           	opt stack 0
   666                           
   667                           ; 4 bytes @ 0x14
   668  000015                     	ds	1
   669  000016                     putch@txData:
   670                           	opt stack 0
   671  000016                     _isdigit$2002:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x15
   675  000016                     	ds	1
   676  000017                     ??_ADC_GetConversion:
   677  000017                     isdigit@c:
   678                           	opt stack 0
   679  000017                     ___wmul@multiplicand:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x16
   683  000017                     	ds	2
   684  000019                     ??_ws2812_send:
   685  000019                     ADC_GetConversion@channel:
   686                           	opt stack 0
   687  000019                     ___wmul@product:
   688                           	opt stack 0
   689  000019                     ___lmul@multiplicand:
   690                           	opt stack 0
   691  000019                     ___lldiv@divisor:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x18
   695  000019                     	ds	4
   696  00001D                     ws2812_send@j:
   697                           	opt stack 0
   698  00001D                     ___lmul@product:
   699                           	opt stack 0
   700  00001D                     ___lldiv@quotient:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x1C
   704  00001D                     	ds	4
   705  000021                     ___lldiv@counter:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x20
   709  000021                     	ds	1
   710  000022                     ?___llmod:
   711                           	opt stack 0
   712  000022                     ___llmod@dividend:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x21
   716  000022                     	ds	4
   717  000026                     ___llmod@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x25
   721  000026                     	ds	4
   722  00002A                     ___llmod@counter:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x29
   726  00002A                     	ds	1
   727  00002B                     ?_printf:
   728                           	opt stack 0
   729  00002B                     printf@f:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x2A
   733  00002B                     	ds	6
   734  000031                     ??_printf:
   735                           
   736                           ; 1 bytes @ 0x30
   737  000031                     	ds	4
   738  000035                     printf@idx:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x34
   742  000035                     	ds	1
   743  000036                     printf@ap:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x35
   747  000036                     	ds	2
   748  000038                     printf@prec:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x37
   752  000038                     	ds	2
   753  00003A                     printf@val:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x39
   757  00003A                     	ds	4
   758  00003E                     printf@flag:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x3D
   762  00003E                     	ds	1
   763  00003F                     printf@width:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x3E
   767  00003F                     	ds	2
   768  000041                     printf@c:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x40
   772  000041                     	ds	1
   773  000042                     ??_main:
   774                           
   775                           ; 1 bytes @ 0x41
   776  000042                     	ds	1
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           
   786 ;;
   787 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   788 ;;
   789 ;; *************** function _main *****************
   790 ;; Defined at:
   791 ;;		line 65 in file "main.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;  meas_pi3v       2    6[BANK0 ] unsigned int 
   796 ;;  meas_pi5v       2    4[BANK0 ] unsigned int 
   797 ;;  pi5v            2    2[BANK0 ] unsigned int 
   798 ;;  pi3v            2    0[BANK0 ] unsigned int 
   799 ;;  led_counter     1    8[BANK0 ] unsigned char 
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   809 ;;      Params:         0       0       0       0
   810 ;;      Locals:         0       9       0       0
   811 ;;      Temps:          1       0       0       0
   812 ;;      Totals:         1       9       0       0
   813 ;;Total ram usage:       10 bytes
   814 ;; Hardware stack levels required when called:    6
   815 ;; This function calls:
   816 ;;		_ADC_GetConversion
   817 ;;		_ADC_Initialize
   818 ;;		_OSCILLATOR_FastClock
   819 ;;		_OSCILLATOR_Initialize
   820 ;;		_PIN_MANAGER_Initialize
   821 ;;		_SYSTEM_Initialize
   822 ;;		_TMR0_HasOverflowOccured
   823 ;;		_TMR0_Initialize
   824 ;;		_TMR5_HasOverflowOccured
   825 ;;		_TMR5_Initialize
   826 ;;		___lmul
   827 ;;		_pi_supply_off
   828 ;;		_pi_supply_on
   829 ;;		_printf
   830 ;;		_request_pi_run
   831 ;;		_request_pi_stop
   832 ;;		_update_status_reg
   833 ;;		_ws2812_send
   834 ;; This function is called by:
   835 ;;		Startup code after reset
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text0
   840  0000AE                     __ptext0:
   841                           	opt stack 0
   842  0000AE                     _main:
   843                           	opt stack 25
   844                           
   845                           ;main.c: 67: uint16_t meas_pi5v = 0;
   846                           
   847                           ;incstack = 0
   848  0000AE  0E00               	movlw	0
   849  0000B0  0100               	movlb	0	; () banked
   850  0000B2  6F79               	movwf	(main@meas_pi5v+1)& (0+255),b
   851  0000B4  0E00               	movlw	0
   852  0000B6  6F78               	movwf	main@meas_pi5v& (0+255),b
   853                           
   854                           ;main.c: 68: uint16_t meas_pi3v = 0;
   855  0000B8  0E00               	movlw	0
   856  0000BA  6F7B               	movwf	(main@meas_pi3v+1)& (0+255),b
   857  0000BC  0E00               	movlw	0
   858  0000BE  6F7A               	movwf	main@meas_pi3v& (0+255),b
   859                           
   860                           ;main.c: 69: uint16_t pi3v;
   861                           ;main.c: 70: uint16_t pi5v;
   862                           ;main.c: 71: uint8_t led_counter = 0;
   863  0000C0  0E00               	movlw	0
   864  0000C2  6F7C               	movwf	main@led_counter& (0+255),b
   865                           
   866                           ; BSR set to: 0
   867                           ;main.c: 74: SYSTEM_Initialize();
   868  0000C4  EC1D  F006         	call	_SYSTEM_Initialize	;wreg free
   869                           
   870                           ;main.c: 77: pi_power.state = RESET;
   871  0000C8  0E00               	movlw	0
   872  0000CA  0100               	movlb	0	; () banked
   873  0000CC  6F60               	movwf	_pi_power& (0+255),b
   874                           
   875                           ; BSR set to: 0
   876                           ;main.c: 80: led_counter = 0;
   877  0000CE  0E00               	movlw	0
   878  0000D0  6F7C               	movwf	main@led_counter& (0+255),b
   879  0000D2                     
   880                           ;main.c: 84: {
   881                           ;main.c: 86: OSCILLATOR_Initialize();
   882                           
   883                           ; BSR set to: 0
   884  0000D2  EC7F  F006         	call	_OSCILLATOR_Initialize	;wreg free
   885                           
   886                           ;main.c: 89: TMR5_Initialize();
   887  0000D6  EC2E  F006         	call	_TMR5_Initialize	;wreg free
   888                           
   889                           ;main.c: 96: TMR0_Initialize();
   890  0000DA  EC5D  F006         	call	_TMR0_Initialize	;wreg free
   891                           
   892                           ;main.c: 99: pi_power.count += 1;
   893  0000DE  0100               	movlb	0	; () banked
   894  0000E0  4B62               	infsnz	(_pi_power+2)& (0+255),f,b
   895  0000E2  2B63               	incf	(_pi_power+3)& (0+255),f,b
   896                           
   897                           ; BSR set to: 0
   898                           ;main.c: 100: if (pi_power.count == 0)
   899  0000E4  5162               	movf	(_pi_power+2)& (0+255),w,b
   900  0000E6  1163               	iorwf	(_pi_power+3)& (0+255),w,b
   901  0000E8  A4D8               	btfss	status,2,c
   902  0000EA  D003               	goto	l70
   903                           
   904                           ; BSR set to: 0
   905                           ;main.c: 101: pi_power.count -= 1;
   906  0000EC  0762               	decf	(_pi_power+2)& (0+255),f,b
   907  0000EE  A0D8               	btfss	status,0,c
   908  0000F0  0763               	decf	(_pi_power+3)& (0+255),f,b
   909  0000F2                     l70:
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 104: pi_power.running = (PORTDbits.RD3 == 0);
   913                           
   914                           ; BSR set to: 0
   915  0000F2  B683               	btfsc	3971,3,c	;volatile
   916  0000F4  D002               	goto	u1360
   917  0000F6  0E01               	movlw	1
   918  0000F8  D001               	goto	u1370
   919  0000FA                     u1360:
   920  0000FA  0E00               	movlw	0
   921  0000FC                     u1370:
   922  0000FC  6F66               	movwf	(_pi_power+6)& (0+255),b
   923                           
   924                           ; BSR set to: 0
   925                           ;main.c: 107: if (pi_power.running == (0))
   926  0000FE  5166               	movf	(_pi_power+6)& (0+255),w,b
   927  000100  A4D8               	btfss	status,2,c
   928  000102  D00A               	goto	l71
   929                           
   930                           ; BSR set to: 0
   931                           ;main.c: 108: {
   932                           ;main.c: 109: pi_power.stopped_count += 1;
   933  000104  4B64               	infsnz	(_pi_power+4)& (0+255),f,b
   934  000106  2B65               	incf	(_pi_power+5)& (0+255),f,b
   935                           
   936                           ; BSR set to: 0
   937                           ;main.c: 110: if (pi_power.stopped_count == 0)
   938  000108  5164               	movf	(_pi_power+4)& (0+255),w,b
   939  00010A  1165               	iorwf	(_pi_power+5)& (0+255),w,b
   940  00010C  A4D8               	btfss	status,2,c
   941  00010E  D008               	goto	l73
   942                           
   943                           ; BSR set to: 0
   944                           ;main.c: 111: pi_power.stopped_count -= 1;
   945  000110  0764               	decf	(_pi_power+4)& (0+255),f,b
   946  000112  A0D8               	btfss	status,0,c
   947  000114  0765               	decf	(_pi_power+5)& (0+255),f,b
   948                           
   949                           ; BSR set to: 0
   950                           ;main.c: 112: }
   951  000116  D004               	goto	l73
   952  000118                     l71:
   953                           
   954                           ; BSR set to: 0
   955                           ;main.c: 113: else
   956                           ;main.c: 114: pi_power.stopped_count = 0;
   957                           
   958                           ; BSR set to: 0
   959  000118  0E00               	movlw	0
   960  00011A  6F65               	movwf	(_pi_power+5)& (0+255),b
   961  00011C  0E00               	movlw	0
   962  00011E  6F64               	movwf	(_pi_power+4)& (0+255),b
   963  000120                     l73:
   964                           
   965                           ; BSR set to: 0
   966                           ;main.c: 127: if (STANDBY == pi_power.state)
   967                           
   968                           ; BSR set to: 0
   969  000120  0560               	decf	_pi_power& (0+255),w,b
   970  000122  A4D8               	btfss	status,2,c
   971  000124  D01F               	goto	l74
   972                           
   973                           ; BSR set to: 0
   974                           ;main.c: 128: {
   975                           ;main.c: 130: if (pi_power.prev != STANDBY)
   976  000126  0561               	decf	(_pi_power+1)& (0+255),w,b
   977  000128  B4D8               	btfsc	status,2,c
   978  00012A  D00A               	goto	l75
   979                           
   980                           ; BSR set to: 0
   981                           ;main.c: 131: {
   982                           ;main.c: 132: pi_power.count = 0;
   983  00012C  0E00               	movlw	0
   984  00012E  6F63               	movwf	(_pi_power+3)& (0+255),b
   985  000130  0E00               	movlw	0
   986  000132  6F62               	movwf	(_pi_power+2)& (0+255),b
   987                           
   988                           ;main.c: 133: pi_power.stopped_count = 0;
   989  000134  0E00               	movlw	0
   990  000136  6F65               	movwf	(_pi_power+5)& (0+255),b
   991  000138  0E00               	movlw	0
   992  00013A  6F64               	movwf	(_pi_power+4)& (0+255),b
   993                           
   994                           ;main.c: 134: pi_power.prev = STANDBY;
   995  00013C  0E01               	movlw	1
   996  00013E  6F61               	movwf	(_pi_power+1)& (0+255),b
   997  000140                     l75:
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 135: }
  1001                           ;main.c: 138: pi_supply_off();
  1002                           
  1003                           ; BSR set to: 0
  1004  000140  ECAF  F006         	call	_pi_supply_off	;wreg free
  1005                           
  1006                           ;main.c: 141: request_pi_stop();
  1007  000144  ECA9  F006         	call	_request_pi_stop	;wreg free
  1008                           
  1009                           ;main.c: 144: led_color = (0);
  1010  000148  0E00               	movlw	0
  1011  00014A  0100               	movlb	0	; () banked
  1012  00014C  6F68               	movwf	_led_color& (0+255),b
  1013  00014E  0E00               	movlw	0
  1014  000150  6F69               	movwf	(_led_color+1)& (0+255),b
  1015  000152  0E00               	movlw	0
  1016  000154  6F6A               	movwf	(_led_color+2)& (0+255),b
  1017  000156  0E00               	movlw	0
  1018  000158  6F6B               	movwf	(_led_color+3)& (0+255),b
  1019                           
  1020                           ;main.c: 151: if (pi_power.power_switch)
  1021  00015A  5167               	movf	(_pi_power+7)& (0+255),w,b
  1022  00015C  B4D8               	btfsc	status,2,c
  1023  00015E  D09E               	goto	L8
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;main.c: 152: pi_power.state = BOOTING;
  1027  000160  0E02               	movlw	2
  1028  000162  D09D               	goto	L6
  1029  000164                     l74:
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;main.c: 164: else if (BOOTING == pi_power.state)
  1033                           
  1034                           ; BSR set to: 0
  1035  000164  0E02               	movlw	2
  1036  000166  1960               	xorwf	_pi_power& (0+255),w,b
  1037  000168  A4D8               	btfss	status,2,c
  1038  00016A  D021               	goto	l79
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;main.c: 165: {
  1042                           ;main.c: 167: if (pi_power.prev != BOOTING)
  1043  00016C  0E02               	movlw	2
  1044  00016E  1961               	xorwf	(_pi_power+1)& (0+255),w,b
  1045  000170  B4D8               	btfsc	status,2,c
  1046  000172  D006               	goto	l80
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;main.c: 168: {
  1050                           ;main.c: 169: pi_power.count = 0;
  1051  000174  0E00               	movlw	0
  1052  000176  6F63               	movwf	(_pi_power+3)& (0+255),b
  1053  000178  0E00               	movlw	0
  1054  00017A  6F62               	movwf	(_pi_power+2)& (0+255),b
  1055                           
  1056                           ;main.c: 170: pi_power.prev = BOOTING;
  1057  00017C  0E02               	movlw	2
  1058  00017E  6F61               	movwf	(_pi_power+1)& (0+255),b
  1059  000180                     l80:
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;main.c: 171: }
  1063                           ;main.c: 174: led_color = (0x0000c8e4);
  1064  000180  0EE4               	movlw	228
  1065  000182  6F68               	movwf	_led_color& (0+255),b
  1066  000184  0EC8               	movlw	200
  1067  000186  6F69               	movwf	(_led_color+1)& (0+255),b
  1068  000188  0E00               	movlw	0
  1069  00018A  6F6A               	movwf	(_led_color+2)& (0+255),b
  1070  00018C  0E00               	movlw	0
  1071  00018E  6F6B               	movwf	(_led_color+3)& (0+255),b
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;main.c: 177: pi_supply_on();
  1075  000190  ECAD  F006         	call	_pi_supply_on	;wreg free
  1076                           
  1077                           ;main.c: 180: request_pi_run();
  1078  000194  ECAB  F006         	call	_request_pi_run	;wreg free
  1079                           
  1080                           ;main.c: 184: if (pi_power.power_switch == (0))
  1081  000198  0100               	movlb	0	; () banked
  1082  00019A  5167               	movf	(_pi_power+7)& (0+255),w,b
  1083  00019C  A4D8               	btfss	status,2,c
  1084  00019E  D002               	goto	l81
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 185: pi_power.state = STANDBY;
  1088  0001A0  0E01               	movlw	1
  1089  0001A2  6F60               	movwf	_pi_power& (0+255),b
  1090  0001A4                     l81:
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;main.c: 189: if (pi_power.running == (1))
  1094                           
  1095                           ; BSR set to: 0
  1096  0001A4  0566               	decf	(_pi_power+6)& (0+255),w,b
  1097  0001A6  A4D8               	btfss	status,2,c
  1098  0001A8  D0A9               	goto	l98
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;main.c: 190: pi_power.state = OPERATE;
  1102  0001AA  0E03               	movlw	3
  1103  0001AC  D078               	goto	L6
  1104  0001AE                     l79:
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;main.c: 203: else if (OPERATE == pi_power.state)
  1108                           
  1109                           ; BSR set to: 0
  1110  0001AE  0E03               	movlw	3
  1111  0001B0  1960               	xorwf	_pi_power& (0+255),w,b
  1112  0001B2  A4D8               	btfss	status,2,c
  1113  0001B4  D024               	goto	l84
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;main.c: 204: {
  1117                           ;main.c: 206: if (pi_power.prev != OPERATE)
  1118  0001B6  0E03               	movlw	3
  1119  0001B8  1961               	xorwf	(_pi_power+1)& (0+255),w,b
  1120  0001BA  B4D8               	btfsc	status,2,c
  1121  0001BC  D006               	goto	l85
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;main.c: 207: {
  1125                           ;main.c: 208: pi_power.count = 0;
  1126  0001BE  0E00               	movlw	0
  1127  0001C0  6F63               	movwf	(_pi_power+3)& (0+255),b
  1128  0001C2  0E00               	movlw	0
  1129  0001C4  6F62               	movwf	(_pi_power+2)& (0+255),b
  1130                           
  1131                           ;main.c: 209: pi_power.prev = OPERATE;
  1132  0001C6  0E03               	movlw	3
  1133  0001C8  6F61               	movwf	(_pi_power+1)& (0+255),b
  1134  0001CA                     l85:
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;main.c: 210: }
  1138                           ;main.c: 213: led_color = (0x00f8f8f8);
  1139  0001CA  0EF8               	movlw	248
  1140  0001CC  6F68               	movwf	_led_color& (0+255),b
  1141  0001CE  0EF8               	movlw	248
  1142  0001D0  6F69               	movwf	(_led_color+1)& (0+255),b
  1143  0001D2  0EF8               	movlw	248
  1144  0001D4  6F6A               	movwf	(_led_color+2)& (0+255),b
  1145  0001D6  0E00               	movlw	0
  1146  0001D8  6F6B               	movwf	(_led_color+3)& (0+255),b
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 216: pi_supply_on();
  1150  0001DA  ECAD  F006         	call	_pi_supply_on	;wreg free
  1151                           
  1152                           ;main.c: 219: request_pi_run();
  1153  0001DE  ECAB  F006         	call	_request_pi_run	;wreg free
  1154                           
  1155                           ;main.c: 224: if (pi_power.power_switch == 0)
  1156  0001E2  0100               	movlb	0	; () banked
  1157  0001E4  5167               	movf	(_pi_power+7)& (0+255),w,b
  1158  0001E6  A4D8               	btfss	status,2,c
  1159  0001E8  D005               	goto	l86
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;main.c: 225: {
  1163                           ;main.c: 226: request_pi_stop();
  1164  0001EA  ECA9  F006         	call	_request_pi_stop	;wreg free
  1165                           
  1166                           ;main.c: 227: pi_power.state = SHUTDOWN;
  1167  0001EE  0E04               	movlw	4
  1168  0001F0  0100               	movlb	0	; () banked
  1169  0001F2  6F60               	movwf	_pi_power& (0+255),b
  1170  0001F4                     l86:
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;main.c: 228: }
  1174                           ;main.c: 233: if (pi_power.running == (0))
  1175                           
  1176                           ; BSR set to: 0
  1177  0001F4  5166               	movf	(_pi_power+6)& (0+255),w,b
  1178  0001F6  A4D8               	btfss	status,2,c
  1179  0001F8  D081               	goto	l98
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 234: {
  1183                           ;main.c: 235: pi_power.state = PI_CONTROL;
  1184  0001FA  0E05               	movlw	5
  1185  0001FC  D050               	goto	L6
  1186  0001FE                     l84:
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;main.c: 247: else if (SHUTDOWN == pi_power.state)
  1190                           
  1191                           ; BSR set to: 0
  1192  0001FE  0E04               	movlw	4
  1193  000200  1960               	xorwf	_pi_power& (0+255),w,b
  1194  000202  A4D8               	btfss	status,2,c
  1195  000204  D01E               	goto	l89
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;main.c: 248: {
  1199                           ;main.c: 250: if (pi_power.prev != SHUTDOWN)
  1200  000206  0E04               	movlw	4
  1201  000208  1961               	xorwf	(_pi_power+1)& (0+255),w,b
  1202  00020A  B4D8               	btfsc	status,2,c
  1203  00020C  D006               	goto	l90
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;main.c: 251: {
  1207                           ;main.c: 252: pi_power.count = 0;
  1208  00020E  0E00               	movlw	0
  1209  000210  6F63               	movwf	(_pi_power+3)& (0+255),b
  1210  000212  0E00               	movlw	0
  1211  000214  6F62               	movwf	(_pi_power+2)& (0+255),b
  1212                           
  1213                           ;main.c: 253: pi_power.prev = SHUTDOWN;
  1214  000216  0E04               	movlw	4
  1215  000218  6F61               	movwf	(_pi_power+1)& (0+255),b
  1216  00021A                     l90:
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;main.c: 254: }
  1220                           ;main.c: 257: led_color = (0x000000fc);
  1221  00021A  0EFC               	movlw	252
  1222  00021C  6F68               	movwf	_led_color& (0+255),b
  1223  00021E  0E00               	movlw	0
  1224  000220  6F69               	movwf	(_led_color+1)& (0+255),b
  1225  000222  0E00               	movlw	0
  1226  000224  6F6A               	movwf	(_led_color+2)& (0+255),b
  1227  000226  0E00               	movlw	0
  1228  000228  6F6B               	movwf	(_led_color+3)& (0+255),b
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 260: pi_supply_on();
  1232  00022A  ECAD  F006         	call	_pi_supply_on	;wreg free
  1233                           
  1234                           ;main.c: 263: request_pi_stop();
  1235  00022E  ECA9  F006         	call	_request_pi_stop	;wreg free
  1236                           
  1237                           ;main.c: 267: if (pi_power.stopped_count > (100u))
  1238  000232  0100               	movlb	0	; () banked
  1239  000234  5165               	movf	(_pi_power+5)& (0+255),w,b
  1240  000236  E132               	bnz	L8
  1241  000238  0E65               	movlw	101
  1242  00023A  5D64               	subwf	(_pi_power+4)& (0+255),w,b
  1243  00023C  A0D8               	btfss	status,0,c
  1244  00023E  D05E               	goto	l98
  1245  000240  D02D               	goto	L8
  1246  000242                     l89:
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;main.c: 277: else if (PI_CONTROL == pi_power.state)
  1250                           
  1251                           ; BSR set to: 0
  1252  000242  0E05               	movlw	5
  1253  000244  1960               	xorwf	_pi_power& (0+255),w,b
  1254  000246  A4D8               	btfss	status,2,c
  1255  000248  D02C               	goto	l93
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;main.c: 278: {
  1259                           ;main.c: 280: if (pi_power.prev != PI_CONTROL)
  1260  00024A  0E05               	movlw	5
  1261  00024C  1961               	xorwf	(_pi_power+1)& (0+255),w,b
  1262  00024E  B4D8               	btfsc	status,2,c
  1263  000250  D006               	goto	l94
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 281: {
  1267                           ;main.c: 282: pi_power.count = 0;
  1268  000252  0E00               	movlw	0
  1269  000254  6F63               	movwf	(_pi_power+3)& (0+255),b
  1270  000256  0E00               	movlw	0
  1271  000258  6F62               	movwf	(_pi_power+2)& (0+255),b
  1272                           
  1273                           ;main.c: 283: pi_power.prev = PI_CONTROL;
  1274  00025A  0E05               	movlw	5
  1275  00025C  6F61               	movwf	(_pi_power+1)& (0+255),b
  1276  00025E                     l94:
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;main.c: 284: }
  1280                           ;main.c: 287: led_color = (0x00f800f0);
  1281  00025E  0EF0               	movlw	240
  1282  000260  6F68               	movwf	_led_color& (0+255),b
  1283  000262  0E00               	movlw	0
  1284  000264  6F69               	movwf	(_led_color+1)& (0+255),b
  1285  000266  0EF8               	movlw	248
  1286  000268  6F6A               	movwf	(_led_color+2)& (0+255),b
  1287  00026A  0E00               	movlw	0
  1288  00026C  6F6B               	movwf	(_led_color+3)& (0+255),b
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 290: pi_supply_on();
  1292  00026E  ECAD  F006         	call	_pi_supply_on	;wreg free
  1293                           
  1294                           ;main.c: 292: if ((pi_power.count < (200u)) && (pi_power.running))
  1295  000272  0100               	movlb	0	; () banked
  1296  000274  5163               	movf	(_pi_power+3)& (0+255),w,b
  1297  000276  E109               	bnz	l2220
  1298  000278  0EC8               	movlw	200
  1299  00027A  5D62               	subwf	(_pi_power+2)& (0+255),w,b
  1300  00027C  B0D8               	btfsc	status,0,c
  1301  00027E  D005               	goto	l95
  1302                           
  1303                           ; BSR set to: 0
  1304  000280  5166               	movf	(_pi_power+6)& (0+255),w,b
  1305  000282  B4D8               	btfsc	status,2,c
  1306  000284  D002               	goto	l95
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 293: pi_power.state = OPERATE;
  1310  000286  0E03               	movlw	3
  1311  000288  6F60               	movwf	_pi_power& (0+255),b
  1312  00028A                     l95:
  1313  00028A                     l2220:
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 295: if ((pi_power.count > (200u)) && (pi_power.running == (0)))
  1317  00028A  5163               	movf	(_pi_power+3)& (0+255),w,b
  1318  00028C  E104               	bnz	u1580
  1319  00028E  0EC9               	movlw	201
  1320  000290  5D62               	subwf	(_pi_power+2)& (0+255),w,b
  1321  000292  A0D8               	btfss	status,0,c
  1322  000294  D033               	goto	l98
  1323  000296                     u1580:
  1324                           
  1325                           ; BSR set to: 0
  1326  000296  5166               	movf	(_pi_power+6)& (0+255),w,b
  1327  000298  A4D8               	btfss	status,2,c
  1328  00029A  D030               	goto	l98
  1329  00029C                     L8:
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 296: pi_power.state = STANDBY;
  1333  00029C  0E01               	movlw	1
  1334  00029E                     L6:
  1335  00029E  6F60               	movwf	_pi_power& (0+255),b
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 298: }
  1339  0002A0  D02D               	goto	l98
  1340  0002A2                     l93:
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 305: else if (RESET == pi_power.state)
  1344                           
  1345                           ; BSR set to: 0
  1346  0002A2  5160               	movf	_pi_power& (0+255),w,b
  1347  0002A4  A4D8               	btfss	status,2,c
  1348  0002A6  D02A               	goto	l98
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;main.c: 306: {
  1352                           ;main.c: 307: pi_power.state = STANDBY;
  1353  0002A8  0E01               	movlw	1
  1354  0002AA  6F60               	movwf	_pi_power& (0+255),b
  1355                           
  1356                           ;main.c: 308: pi_power.prev = RESET;
  1357  0002AC  0E00               	movlw	0
  1358  0002AE  6F61               	movwf	(_pi_power+1)& (0+255),b
  1359                           
  1360                           ;main.c: 309: pi_power.count = 0;
  1361  0002B0  0E00               	movlw	0
  1362  0002B2  6F63               	movwf	(_pi_power+3)& (0+255),b
  1363  0002B4  0E00               	movlw	0
  1364  0002B6  6F62               	movwf	(_pi_power+2)& (0+255),b
  1365                           
  1366                           ;main.c: 310: pi_power.stopped_count = 0;
  1367  0002B8  0E00               	movlw	0
  1368  0002BA  6F65               	movwf	(_pi_power+5)& (0+255),b
  1369  0002BC  0E00               	movlw	0
  1370  0002BE  6F64               	movwf	(_pi_power+4)& (0+255),b
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 313: PIN_MANAGER_Initialize();
  1374  0002C0  ECB3  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  1375                           
  1376                           ;main.c: 315: led_color = (0x00f80000);
  1377  0002C4  0E00               	movlw	0
  1378  0002C6  0100               	movlb	0	; () banked
  1379  0002C8  6F68               	movwf	_led_color& (0+255),b
  1380  0002CA  0E00               	movlw	0
  1381  0002CC  6F69               	movwf	(_led_color+1)& (0+255),b
  1382  0002CE  0EF8               	movlw	248
  1383  0002D0  6F6A               	movwf	(_led_color+2)& (0+255),b
  1384  0002D2  0E00               	movlw	0
  1385  0002D4  6F6B               	movwf	(_led_color+3)& (0+255),b
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 316: prev_color = (0);
  1389  0002D6  0E00               	movlw	0
  1390  0002D8  6F7D               	movwf	_prev_color& (0+255),b
  1391  0002DA  0E00               	movlw	0
  1392  0002DC  6F7E               	movwf	(_prev_color+1)& (0+255),b
  1393  0002DE  0E00               	movlw	0
  1394  0002E0  6F7F               	movwf	(_prev_color+2)& (0+255),b
  1395  0002E2  0E00               	movlw	0
  1396  0002E4  6F80               	movwf	(_prev_color+3)& (0+255),b
  1397                           
  1398                           ;main.c: 319: pi_supply_off();
  1399  0002E6  ECAF  F006         	call	_pi_supply_off	;wreg free
  1400                           
  1401                           ;main.c: 322: request_pi_run();
  1402  0002EA  ECAB  F006         	call	_request_pi_run	;wreg free
  1403                           
  1404                           ;main.c: 325: do { LATCbits.LATC2 = 0; } while(0);
  1405  0002EE  948B               	bcf	3979,2,c	;volatile
  1406                           
  1407                           ;main.c: 328: do { LATCbits.LATC0 = 0; } while(0);
  1408  0002F0  908B               	bcf	3979,0,c	;volatile
  1409                           
  1410                           ;main.c: 331: reg_status = 0;
  1411  0002F2  0E00               	movlw	0
  1412  0002F4  0100               	movlb	0	; () banked
  1413  0002F6  6F73               	movwf	_reg_status& (0+255),b
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;main.c: 332: reg_control = 0;
  1417  0002F8  0E00               	movlw	0
  1418  0002FA  6F72               	movwf	_reg_control& (0+255),b
  1419  0002FC                     l98:
  1420                           
  1421                           ; BSR set to: 0
  1422                           
  1423                           ; BSR set to: 0
  1424                           
  1425                           ;main.c: 334: }
  1426                           ;main.c: 345: do { LATCbits.LATC5 = 1; } while(0);
  1427                           
  1428                           ; BSR set to: 0
  1429                           
  1430                           ; BSR set to: 0
  1431                           
  1432                           ; BSR set to: 0
  1433                           
  1434                           ; BSR set to: 0
  1435                           
  1436                           ; BSR set to: 0
  1437                           
  1438                           ; BSR set to: 0
  1439  0002FC  8A8B               	bsf	3979,5,c	;volatile
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;main.c: 348: ADC_Initialize();
  1443                           
  1444                           ; BSR set to: 0
  1445  0002FE  EC74  F006         	call	_ADC_Initialize	;wreg free
  1446                           
  1447                           ;main.c: 351: meas_tune = ADC_GetConversion(channel_TUNE);
  1448  000302  0E00               	movlw	0
  1449  000304  ECF2  F005         	call	_ADC_GetConversion
  1450  000308  C015  F070         	movff	?_ADC_GetConversion,_meas_tune
  1451  00030C  C016  F071         	movff	?_ADC_GetConversion+1,_meas_tune+1
  1452                           
  1453                           ;main.c: 352: meas_band = ADC_GetConversion(channel_BAND);
  1454  000310  0E01               	movlw	1
  1455  000312  ECF2  F005         	call	_ADC_GetConversion
  1456  000316  C015  F06E         	movff	?_ADC_GetConversion,_meas_band
  1457  00031A  C016  F06F         	movff	?_ADC_GetConversion+1,_meas_band+1
  1458                           
  1459                           ;main.c: 353: meas_vol = ADC_GetConversion(channel_VOL);
  1460  00031E  0E02               	movlw	2
  1461  000320  ECF2  F005         	call	_ADC_GetConversion
  1462  000324  C015  F06C         	movff	?_ADC_GetConversion,_meas_vol
  1463  000328  C016  F06D         	movff	?_ADC_GetConversion+1,_meas_vol+1
  1464                           
  1465                           ;main.c: 356: meas_pi3v = ADC_GetConversion(channel_PI3V);
  1466  00032C  0E19               	movlw	25
  1467  00032E  ECF2  F005         	call	_ADC_GetConversion
  1468  000332  C015  F07A         	movff	?_ADC_GetConversion,main@meas_pi3v
  1469  000336  C016  F07B         	movff	?_ADC_GetConversion+1,main@meas_pi3v+1
  1470                           
  1471                           ;main.c: 357: pi3v = ((uint32_t)meas_pi3v * (uint32_t)5000 / (uint32_t)1024);
  1472  00033A  C07A  F015         	movff	main@meas_pi3v,___lmul@multiplier
  1473  00033E  C07B  F016         	movff	main@meas_pi3v+1,___lmul@multiplier+1
  1474  000342  6A17               	clrf	___lmul@multiplier+2,c
  1475  000344  6A18               	clrf	___lmul@multiplier+3,c
  1476  000346  0E88               	movlw	136
  1477  000348  6E19               	movwf	___lmul@multiplicand,c
  1478  00034A  0E13               	movlw	19
  1479  00034C  6E1A               	movwf	___lmul@multiplicand+1,c
  1480  00034E  0E00               	movlw	0
  1481  000350  6E1B               	movwf	___lmul@multiplicand+2,c
  1482  000352  0E00               	movlw	0
  1483  000354  6E1C               	movwf	___lmul@multiplicand+3,c
  1484  000356  EC36  F005         	call	___lmul	;wreg free
  1485  00035A  0E0B               	movlw	11
  1486  00035C  D005               	goto	u1610
  1487  00035E                     u1615:
  1488  00035E  90D8               	bcf	status,0,c
  1489  000360  3218               	rrcf	?___lmul+3,f,c
  1490  000362  3217               	rrcf	?___lmul+2,f,c
  1491  000364  3216               	rrcf	?___lmul+1,f,c
  1492  000366  3215               	rrcf	?___lmul,f,c
  1493  000368                     u1610:
  1494  000368  2EE8               	decfsz	wreg,f,c
  1495  00036A  D7F9               	goto	u1615
  1496  00036C  C015  F074         	movff	?___lmul,main@pi3v
  1497  000370  C016  F075         	movff	?___lmul+1,main@pi3v+1
  1498                           
  1499                           ;main.c: 359: meas_pi5v = ADC_GetConversion(channel_PI5V);
  1500  000374  0E0F               	movlw	15
  1501  000376  ECF2  F005         	call	_ADC_GetConversion
  1502  00037A  C015  F078         	movff	?_ADC_GetConversion,main@meas_pi5v
  1503  00037E  C016  F079         	movff	?_ADC_GetConversion+1,main@meas_pi5v+1
  1504                           
  1505                           ;main.c: 360: pi5v = ((uint32_t)meas_pi5v * (uint32_t)5000 / (uint32_t)512);
  1506  000382  C078  F015         	movff	main@meas_pi5v,___lmul@multiplier
  1507  000386  C079  F016         	movff	main@meas_pi5v+1,___lmul@multiplier+1
  1508  00038A  6A17               	clrf	___lmul@multiplier+2,c
  1509  00038C  6A18               	clrf	___lmul@multiplier+3,c
  1510  00038E  0E88               	movlw	136
  1511  000390  6E19               	movwf	___lmul@multiplicand,c
  1512  000392  0E13               	movlw	19
  1513  000394  6E1A               	movwf	___lmul@multiplicand+1,c
  1514  000396  0E00               	movlw	0
  1515  000398  6E1B               	movwf	___lmul@multiplicand+2,c
  1516  00039A  0E00               	movlw	0
  1517  00039C  6E1C               	movwf	___lmul@multiplicand+3,c
  1518  00039E  EC36  F005         	call	___lmul	;wreg free
  1519  0003A2  0E0A               	movlw	10
  1520  0003A4  D005               	goto	u1620
  1521  0003A6                     u1625:
  1522  0003A6  90D8               	bcf	status,0,c
  1523  0003A8  3218               	rrcf	?___lmul+3,f,c
  1524  0003AA  3217               	rrcf	?___lmul+2,f,c
  1525  0003AC  3216               	rrcf	?___lmul+1,f,c
  1526  0003AE  3215               	rrcf	?___lmul,f,c
  1527  0003B0                     u1620:
  1528  0003B0  2EE8               	decfsz	wreg,f,c
  1529  0003B2  D7F9               	goto	u1625
  1530  0003B4  C015  F076         	movff	?___lmul,main@pi5v
  1531  0003B8  C016  F077         	movff	?___lmul+1,main@pi5v+1
  1532                           
  1533                           ;main.c: 363: do { LATCbits.LATC5 = 0; } while(0);
  1534  0003BC  9A8B               	bcf	3979,5,c	;volatile
  1535                           
  1536                           ;main.c: 371: {
  1537                           ;main.c: 372: printf("\n\n\rLED   0x%08lX",led_color);
  1538                           
  1539                           ;main.c: 370: if ( ((1)) )
  1540  0003BE  0E57               	movlw	low STR_1
  1541  0003C0  6E2B               	movwf	printf@f,c
  1542  0003C2  0E3F               	movlw	high STR_1
  1543  0003C4  6E2C               	movwf	printf@f+1,c
  1544  0003C6  C068  F02D         	movff	_led_color,?_printf+2
  1545  0003CA  C069  F02E         	movff	_led_color+1,?_printf+3
  1546  0003CE  C06A  F02F         	movff	_led_color+2,?_printf+4
  1547  0003D2  C06B  F030         	movff	_led_color+3,?_printf+5
  1548  0003D6  ECA9  F002         	call	_printf	;wreg free
  1549                           
  1550                           ;main.c: 373: printf("\n\rSTAT  0x%02X",reg_status);
  1551  0003DA  0E87               	movlw	low STR_2
  1552  0003DC  6E2B               	movwf	printf@f,c
  1553  0003DE  0E3F               	movlw	high STR_2
  1554  0003E0  6E2C               	movwf	printf@f+1,c
  1555  0003E2  C073  F02D         	movff	_reg_status,?_printf+2
  1556  0003E6  6A2E               	clrf	?_printf+3,c
  1557  0003E8  ECA9  F002         	call	_printf	;wreg free
  1558                           
  1559                           ;main.c: 374: printf("\n\rCTRL  0x%02X",reg_control);
  1560  0003EC  0E78               	movlw	low STR_3
  1561  0003EE  6E2B               	movwf	printf@f,c
  1562  0003F0  0E3F               	movlw	high STR_3
  1563  0003F2  6E2C               	movwf	printf@f+1,c
  1564  0003F4  C072  F02D         	movff	_reg_control,?_printf+2
  1565  0003F8  6A2E               	clrf	?_printf+3,c
  1566  0003FA  ECA9  F002         	call	_printf	;wreg free
  1567                           
  1568                           ;main.c: 375: printf("\n\rST_CNT  %u",pi_power.count);
  1569  0003FE  0EF1               	movlw	low STR_4
  1570  000400  6E2B               	movwf	printf@f,c
  1571  000402  0E3F               	movlw	high STR_4
  1572  000404  6E2C               	movwf	printf@f+1,c
  1573  000406  C062  F02D         	movff	_pi_power+2,?_printf+2
  1574  00040A  C063  F02E         	movff	_pi_power+3,?_printf+3
  1575  00040E  ECA9  F002         	call	_printf	;wreg free
  1576                           
  1577                           ;main.c: 376: printf("\n\rSP_CNT  %u",pi_power.stopped_count);
  1578  000412  0EE4               	movlw	low STR_5
  1579  000414  6E2B               	movwf	printf@f,c
  1580  000416  0E3F               	movlw	high STR_5
  1581  000418  6E2C               	movwf	printf@f+1,c
  1582  00041A  C064  F02D         	movff	_pi_power+4,?_printf+2
  1583  00041E  C065  F02E         	movff	_pi_power+5,?_printf+3
  1584  000422  ECA9  F002         	call	_printf	;wreg free
  1585                           
  1586                           ;main.c: 377: printf("\n\rSTATE   %u",pi_power.state);
  1587  000426  0EB0               	movlw	low STR_6
  1588  000428  6E2B               	movwf	printf@f,c
  1589  00042A  0E3F               	movlw	high STR_6
  1590  00042C  6E2C               	movwf	printf@f+1,c
  1591  00042E  C060  F02D         	movff	_pi_power,?_printf+2
  1592  000432  6A2E               	clrf	?_printf+3,c
  1593  000434  ECA9  F002         	call	_printf	;wreg free
  1594                           
  1595                           ;main.c: 378: printf("\n\rAC_ON   %u",pi_power.power_switch);
  1596  000438  0EBD               	movlw	low STR_7
  1597  00043A  6E2B               	movwf	printf@f,c
  1598  00043C  0E3F               	movlw	high STR_7
  1599  00043E  6E2C               	movwf	printf@f+1,c
  1600  000440  C067  F02D         	movff	_pi_power+7,?_printf+2
  1601  000444  6A2E               	clrf	?_printf+3,c
  1602  000446  ECA9  F002         	call	_printf	;wreg free
  1603                           
  1604                           ;main.c: 379: printf("\n\rPI_RUN  %u",pi_power.running);
  1605  00044A  0ED7               	movlw	low STR_8
  1606  00044C  6E2B               	movwf	printf@f,c
  1607  00044E  0E3F               	movlw	high STR_8
  1608  000450  6E2C               	movwf	printf@f+1,c
  1609  000452  C066  F02D         	movff	_pi_power+6,?_printf+2
  1610  000456  6A2E               	clrf	?_printf+3,c
  1611  000458  ECA9  F002         	call	_printf	;wreg free
  1612                           
  1613                           ;main.c: 380: printf("\n\rTUNE    %u",meas_tune);
  1614  00045C  0EA3               	movlw	low STR_9
  1615  00045E  6E2B               	movwf	printf@f,c
  1616  000460  0E3F               	movlw	high STR_9
  1617  000462  6E2C               	movwf	printf@f+1,c
  1618  000464  C070  F02D         	movff	_meas_tune,?_printf+2
  1619  000468  C071  F02E         	movff	_meas_tune+1,?_printf+3
  1620  00046C  ECA9  F002         	call	_printf	;wreg free
  1621                           
  1622                           ;main.c: 381: printf("\n\rBAND    %u",meas_band);
  1623  000470  0E96               	movlw	low STR_10
  1624  000472  6E2B               	movwf	printf@f,c
  1625  000474  0E3F               	movlw	high STR_10
  1626  000476  6E2C               	movwf	printf@f+1,c
  1627  000478  C06E  F02D         	movff	_meas_band,?_printf+2
  1628  00047C  C06F  F02E         	movff	_meas_band+1,?_printf+3
  1629  000480  ECA9  F002         	call	_printf	;wreg free
  1630                           
  1631                           ;main.c: 382: printf("\n\rVOLUME  %u",meas_vol);
  1632  000484  0ECA               	movlw	low STR_11
  1633  000486  6E2B               	movwf	printf@f,c
  1634  000488  0E3F               	movlw	high STR_11
  1635  00048A  6E2C               	movwf	printf@f+1,c
  1636  00048C  C06C  F02D         	movff	_meas_vol,?_printf+2
  1637  000490  C06D  F02E         	movff	_meas_vol+1,?_printf+3
  1638  000494  ECA9  F002         	call	_printf	;wreg free
  1639                           
  1640                           ;main.c: 383: printf("\n\n\rPi3V    %u mV",pi3v);
  1641  000498  0E46               	movlw	low STR_12
  1642  00049A  6E2B               	movwf	printf@f,c
  1643  00049C  0E3F               	movlw	high STR_12
  1644  00049E  6E2C               	movwf	printf@f+1,c
  1645  0004A0  C074  F02D         	movff	main@pi3v,?_printf+2
  1646  0004A4  C075  F02E         	movff	main@pi3v+1,?_printf+3
  1647  0004A8  ECA9  F002         	call	_printf	;wreg free
  1648                           
  1649                           ;main.c: 384: printf("\n\rPi5V    %u mV",pi5v);
  1650  0004AC  0E68               	movlw	low STR_13
  1651  0004AE  6E2B               	movwf	printf@f,c
  1652  0004B0  0E3F               	movlw	high STR_13
  1653  0004B2  6E2C               	movwf	printf@f+1,c
  1654  0004B4  C076  F02D         	movff	main@pi5v,?_printf+2
  1655  0004B8  C077  F02E         	movff	main@pi5v+1,?_printf+3
  1656  0004BC  ECA9  F002         	call	_printf	;wreg free
  1657                           
  1658                           ;main.c: 385: }
  1659                           ;main.c: 390: if (prev_color != led_color)
  1660  0004C0  0100               	movlb	0	; () banked
  1661  0004C2  5168               	movf	_led_color& (0+255),w,b
  1662  0004C4  197D               	xorwf	_prev_color& (0+255),w,b
  1663  0004C6  E10A               	bnz	u1630
  1664  0004C8  5169               	movf	(_led_color+1)& (0+255),w,b
  1665  0004CA  197E               	xorwf	(_prev_color+1)& (0+255),w,b
  1666  0004CC  E107               	bnz	u1630
  1667  0004CE  516A               	movf	(_led_color+2)& (0+255),w,b
  1668  0004D0  197F               	xorwf	(_prev_color+2)& (0+255),w,b
  1669  0004D2  E104               	bnz	u1630
  1670  0004D4  516B               	movf	(_led_color+3)& (0+255),w,b
  1671  0004D6  1980               	xorwf	(_prev_color+3)& (0+255),w,b
  1672  0004D8  B4D8               	btfsc	status,2,c
  1673  0004DA  D018               	goto	l108
  1674  0004DC                     u1630:
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 391: {
  1678                           ;main.c: 394: (INTCONbits.GIE = 0);
  1679  0004DC  9EF2               	bcf	intcon,7,c	;volatile
  1680                           
  1681                           ;main.c: 396: (INTCONbits.PEIE = 0);
  1682  0004DE  9CF2               	bcf	intcon,6,c	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 399: OSCILLATOR_FastClock();
  1686  0004E0  EC86  F006         	call	_OSCILLATOR_FastClock	;wreg free
  1687                           
  1688                           ;main.c: 400: ws2812_send(led_color);
  1689  0004E4  C068  F015         	movff	_led_color,ws2812_send@led
  1690  0004E8  C069  F016         	movff	_led_color+1,ws2812_send@led+1
  1691  0004EC  C06A  F017         	movff	_led_color+2,ws2812_send@led+2
  1692  0004F0  C06B  F018         	movff	_led_color+3,ws2812_send@led+3
  1693  0004F4  EC07  F005         	call	_ws2812_send	;wreg free
  1694                           
  1695                           ;main.c: 403: OSCILLATOR_Initialize();
  1696  0004F8  EC7F  F006         	call	_OSCILLATOR_Initialize	;wreg free
  1697                           
  1698                           ;main.c: 405: prev_color = led_color;
  1699  0004FC  C068  F07D         	movff	_led_color,_prev_color
  1700  000500  C069  F07E         	movff	_led_color+1,_prev_color+1
  1701  000504  C06A  F07F         	movff	_led_color+2,_prev_color+2
  1702  000508  C06B  F080         	movff	_led_color+3,_prev_color+3
  1703  00050C                     l108:
  1704                           
  1705                           ;main.c: 406: }
  1706                           ;main.c: 409: (INTCONbits.GIE = 1);
  1707  00050C  8EF2               	bsf	intcon,7,c	;volatile
  1708                           
  1709                           ;main.c: 411: (INTCONbits.PEIE = 1);
  1710  00050E  8CF2               	bsf	intcon,6,c	;volatile
  1711  000510  EC93  F006         	call	_TMR5_HasOverflowOccured	;wreg free
  1712  000514  0900               	iorlw	0
  1713  000516  B4D8               	btfsc	status,2,c
  1714  000518  D7FB               	goto	l110
  1715                           
  1716                           ;main.c: 421: if (led_counter++ >= 4)
  1717  00051A  0100               	movlb	0	; () banked
  1718  00051C  2B7C               	incf	main@led_counter& (0+255),f,b
  1719  00051E  057C               	decf	main@led_counter& (0+255),w,b
  1720  000520  6E42               	movwf	??_main& (0+255),c
  1721  000522  0E03               	movlw	3
  1722  000524  6442               	cpfsgt	??_main,c
  1723  000526  D00E               	goto	l112
  1724                           
  1725                           ; BSR set to: 0
  1726                           
  1727                           ; BSR set to: 0
  1728                           
  1729                           ;main.c: 422: {
  1730                           ;main.c: 423: do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
  1731  000528  A08B               	btfss	3979,0,c	;volatile
  1732  00052A  D002               	goto	u1660
  1733  00052C  0E01               	movlw	1
  1734  00052E  D001               	goto	u1666
  1735  000530                     u1660:
  1736  000530  0E00               	movlw	0
  1737  000532                     u1666:
  1738  000532  0AFF               	xorlw	255
  1739  000534  6E42               	movwf	??_main& (0+255),c
  1740  000536  508B               	movf	3979,w,c	;volatile
  1741  000538  1842               	xorwf	??_main,w,c
  1742  00053A  0BFE               	andlw	-2
  1743  00053C  1842               	xorwf	??_main,w,c
  1744  00053E  6E8B               	movwf	3979,c	;volatile
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 424: led_counter = 0;
  1748                           
  1749                           ; BSR set to: 0
  1750  000540  0E00               	movlw	0
  1751  000542  6F7C               	movwf	main@led_counter& (0+255),b
  1752  000544                     l112:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 425: }
  1756                           ;main.c: 429: pi_power.power_switch = TMR0_HasOverflowOccured();
  1757                           
  1758                           ; BSR set to: 0
  1759  000544  EC99  F006         	call	_TMR0_HasOverflowOccured	;wreg free
  1760  000548  0100               	movlb	0	; () banked
  1761  00054A  6F67               	movwf	(_pi_power+7)& (0+255),b
  1762                           
  1763                           ;main.c: 432: update_status_reg();
  1764  00054C  EC61  F005         	call	_update_status_reg	;wreg free
  1765  000550  D5C0               	goto	l69
  1766  000552                     __end_of_main:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           intcon	equ	0xFF2
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           status	equ	0xFD8
  1778                           
  1779 ;; *************** function _ws2812_send *****************
  1780 ;; Defined at:
  1781 ;;		line 7 in file "ws2812.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  led             4   20[COMRAM] unsigned long 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  j               1   28[COMRAM] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg, status,2, status,0
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1795 ;;      Params:         4       0       0       0
  1796 ;;      Locals:         1       0       0       0
  1797 ;;      Temps:          4       0       0       0
  1798 ;;      Totals:         9       0       0       0
  1799 ;;Total ram usage:        9 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    3
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text1
  1810  000A0E                     __ptext1:
  1811                           	opt stack 0
  1812  000A0E                     _ws2812_send:
  1813                           	opt stack 27
  1814                           
  1815                           ;ws2812.c: 9: unsigned char j;
  1816                           ;ws2812.c: 20: for(j = 0; j < 24; j++) {
  1817                           
  1818                           ;incstack = 0
  1819  000A0E  0E00               	movlw	0
  1820  000A10  6E1D               	movwf	ws2812_send@j,c
  1821  000A12                     l2058:
  1822  000A12  0E17               	movlw	23
  1823  000A14  641D               	cpfsgt	ws2812_send@j,c
  1824  000A16  D001               	goto	l170
  1825  000A18  D024               	goto	u1210
  1826  000A1A                     l170:
  1827                           
  1828                           ;ws2812.c: 24: if (led & 1) {
  1829  000A1A  A015               	btfss	ws2812_send@led,0,c
  1830  000A1C  D006               	goto	l172
  1831  000A1E  8282               	bsf	3970,1,c	;# 
  1832  000A20  F000               	nop		;# 
  1833  000A22  F000               	nop		;# 
  1834  000A24  F000               	nop		;# 
  1835  000A26  9282               	bcf	3970,1,c	;# 
  1836                           
  1837                           ;ws2812.c: 33: } else {
  1838  000A28  D005               	goto	l173
  1839  000A2A                     l172:
  1840  000A2A  8282               	bsf	3970,1,c	;# 
  1841  000A2C  9282               	bcf	3970,1,c	;# 
  1842  000A2E  F000               	nop		;# 
  1843  000A30  F000               	nop		;# 
  1844  000A32  F000               	nop		;# 
  1845  000A34                     l173:
  1846                           
  1847                           ;ws2812.c: 42: }
  1848                           ;ws2812.c: 45: led = led >> 1L;
  1849  000A34  C015  F019         	movff	ws2812_send@led,??_ws2812_send
  1850  000A38  C016  F01A         	movff	ws2812_send@led+1,??_ws2812_send+1
  1851  000A3C  C017  F01B         	movff	ws2812_send@led+2,??_ws2812_send+2
  1852  000A40  C018  F01C         	movff	ws2812_send@led+3,??_ws2812_send+3
  1853  000A44  90D8               	bcf	status,0,c
  1854  000A46  321C               	rrcf	??_ws2812_send+3,f,c
  1855  000A48  321B               	rrcf	??_ws2812_send+2,f,c
  1856  000A4A  321A               	rrcf	??_ws2812_send+1,f,c
  1857  000A4C  3219               	rrcf	??_ws2812_send,f,c
  1858  000A4E  C019  F015         	movff	??_ws2812_send,ws2812_send@led
  1859  000A52  C01A  F016         	movff	??_ws2812_send+1,ws2812_send@led+1
  1860  000A56  C01B  F017         	movff	??_ws2812_send+2,ws2812_send@led+2
  1861  000A5A  C01C  F018         	movff	??_ws2812_send+3,ws2812_send@led+3
  1862  000A5E  2A1D               	incf	ws2812_send@j,f,c
  1863  000A60  D7D8               	goto	l2058
  1864  000A62                     u1210:
  1865                           
  1866                           ;ws2812.c: 46: }
  1867                           ;ws2812.c: 48: _delay((unsigned long)((50)*(64000000/4000000.0)));
  1868  000A62  0EA0               	movlw	160
  1869  000A64                     u1707:
  1870  000A64  D000               	nop2	
  1871  000A66  2EE8               	decfsz	wreg,f,c
  1872  000A68  D7FD               	bra	u1707
  1873  000A6A  0012               	return		;funcret
  1874  000A6C                     __end_of_ws2812_send:
  1875                           	opt stack 0
  1876                           tblptru	equ	0xFF8
  1877                           tblptrh	equ	0xFF7
  1878                           tblptrl	equ	0xFF6
  1879                           tablat	equ	0xFF5
  1880                           intcon	equ	0xFF2
  1881                           postinc0	equ	0xFEE
  1882                           wreg	equ	0xFE8
  1883                           postdec1	equ	0xFE5
  1884                           fsr1l	equ	0xFE1
  1885                           status	equ	0xFD8
  1886                           
  1887 ;; *************** function _update_status_reg *****************
  1888 ;; Defined at:
  1889 ;;		line 437 in file "main.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      void 
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1903 ;;      Params:         0       0       0       0
  1904 ;;      Locals:         0       0       0       0
  1905 ;;      Temps:          6       0       0       0
  1906 ;;      Totals:         6       0       0       0
  1907 ;;Total ram usage:        6 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    3
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_main
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text2
  1918  000AC2                     __ptext2:
  1919                           	opt stack 0
  1920  000AC2                     _update_status_reg:
  1921                           	opt stack 27
  1922                           
  1923                           ;main.c: 453: reg_status = ((pi_power.power_switch & 1) << 7) |
  1924                           ;main.c: 454: ((PORTDbits.RD2 & 1) << 6) |
  1925                           ;main.c: 455: ((pi_power.running & 1) << 5 ) |
  1926                           ;main.c: 456: ((PORTCbits.RC4 & 1) << 4) |
  1927                           ;main.c: 457: (pi_power.state & 7);
  1928                           
  1929                           ;incstack = 0
  1930  000AC2  C060  F015         	movff	_pi_power,??_update_status_reg
  1931  000AC6  0E07               	movlw	7
  1932  000AC8  1615               	andwf	??_update_status_reg,f,c
  1933  000ACA  A882               	btfss	3970,4,c	;volatile
  1934  000ACC  D003               	goto	u1240
  1935  000ACE  0E10               	movlw	16
  1936  000AD0  6E16               	movwf	(??_update_status_reg+1)& (0+255),c
  1937  000AD2  D001               	goto	u1255
  1938  000AD4                     u1240:
  1939  000AD4  6A16               	clrf	(??_update_status_reg+1)& (0+255),c
  1940  000AD6                     u1255:
  1941  000AD6  C066  F017         	movff	_pi_power+6,??_update_status_reg+2
  1942  000ADA  0E01               	movlw	1
  1943  000ADC  1617               	andwf	??_update_status_reg+2,f,c
  1944  000ADE  0E05               	movlw	5
  1945  000AE0  6E18               	movwf	(??_update_status_reg+3)& (0+255),c
  1946  000AE2                     u1265:
  1947  000AE2  90D8               	bcf	status,0,c
  1948  000AE4  3617               	rlcf	??_update_status_reg+2,f,c
  1949  000AE6  2E18               	decfsz	(??_update_status_reg+3)& (0+255),f,c
  1950  000AE8  D7FC               	goto	u1265
  1951  000AEA  A483               	btfss	3971,2,c	;volatile
  1952  000AEC  D003               	goto	u1270
  1953  000AEE  0E40               	movlw	64
  1954  000AF0  6E19               	movwf	(??_update_status_reg+4)& (0+255),c
  1955  000AF2  D001               	goto	u1285
  1956  000AF4                     u1270:
  1957  000AF4  6A19               	clrf	(??_update_status_reg+4)& (0+255),c
  1958  000AF6                     u1285:
  1959  000AF6  C067  F01A         	movff	_pi_power+7,??_update_status_reg+5
  1960  000AFA  0E01               	movlw	1
  1961  000AFC  161A               	andwf	??_update_status_reg+5,f,c
  1962  000AFE  0E00               	movlw	0
  1963  000B00  B01A               	btfsc	??_update_status_reg+5,0,c
  1964  000B02  0E80               	movlw	128
  1965  000B04  6E1A               	movwf	??_update_status_reg+5,c
  1966  000B06  501A               	movf	??_update_status_reg+5,w,c
  1967  000B08  1019               	iorwf	??_update_status_reg+4,w,c
  1968  000B0A  1017               	iorwf	??_update_status_reg+2,w,c
  1969  000B0C  1016               	iorwf	??_update_status_reg+1,w,c
  1970  000B0E  1015               	iorwf	??_update_status_reg,w,c
  1971  000B10  0100               	movlb	0	; () banked
  1972  000B12  6F73               	movwf	_reg_status& (0+255),b
  1973                           
  1974                           ; BSR set to: 0
  1975  000B14  0012               	return		;funcret
  1976  000B16                     __end_of_update_status_reg:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           intcon	equ	0xFF2
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postdec1	equ	0xFE5
  1986                           fsr1l	equ	0xFE1
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _request_pi_stop *****************
  1990 ;; Defined at:
  1991 ;;		line 478 in file "main.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		None
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2005 ;;      Params:         0       0       0       0
  2006 ;;      Locals:         0       0       0       0
  2007 ;;      Temps:          0       0       0       0
  2008 ;;      Totals:         0       0       0       0
  2009 ;;Total ram usage:        0 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    3
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text3
  2020  000D52                     __ptext3:
  2021                           	opt stack 0
  2022  000D52                     _request_pi_stop:
  2023                           	opt stack 27
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;incstack = 0
  2027                           ;main.c: 481: do { LATCbits.LATC4 = 0; } while(0);
  2028  000D52  988B               	bcf	3979,4,c	;volatile
  2029  000D54  0012               	return	
  2030  000D56                     __end_of_request_pi_stop:
  2031                           	opt stack 0
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           intcon	equ	0xFF2
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           postdec1	equ	0xFE5
  2040                           fsr1l	equ	0xFE1
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function _request_pi_run *****************
  2044 ;; Defined at:
  2045 ;;		line 472 in file "main.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		None
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2059 ;;      Params:         0       0       0       0
  2060 ;;      Locals:         0       0       0       0
  2061 ;;      Temps:          0       0       0       0
  2062 ;;      Totals:         0       0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    3
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text4
  2074  000D56                     __ptext4:
  2075                           	opt stack 0
  2076  000D56                     _request_pi_run:
  2077                           	opt stack 27
  2078                           
  2079                           ;incstack = 0
  2080                           ;main.c: 475: do { LATCbits.LATC4 = 1; } while(0);
  2081  000D56  888B               	bsf	3979,4,c	;volatile
  2082  000D58  0012               	return	
  2083  000D5A                     __end_of_request_pi_run:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           intcon	equ	0xFF2
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           postdec1	equ	0xFE5
  2093                           fsr1l	equ	0xFE1
  2094                           status	equ	0xFD8
  2095                           
  2096 ;; *************** function _printf *****************
  2097 ;; Defined at:
  2098 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;  f               2   42[COMRAM] PTR const unsigned char 
  2101 ;;		 -> STR_13(16), STR_12(17), STR_11(13), STR_10(13), 
  2102 ;;		 -> STR_9(13), STR_8(13), STR_7(13), STR_6(13), 
  2103 ;;		 -> STR_5(13), STR_4(13), STR_3(15), STR_2(15), 
  2104 ;;		 -> STR_1(17), 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  idx             1   52[COMRAM] unsigned char 
  2107 ;;  val             4   57[COMRAM] unsigned long 
  2108 ;;  tmpval          4    0        struct .
  2109 ;;  cp              3    0        PTR const unsigned char 
  2110 ;;  width           2   62[COMRAM] int 
  2111 ;;  prec            2   55[COMRAM] int 
  2112 ;;  ap              2   53[COMRAM] PTR void [1]
  2113 ;;		 -> ?_printf(2), 
  2114 ;;  len             2    0        unsigned int 
  2115 ;;  c               1   64[COMRAM] char 
  2116 ;;  flag            1   61[COMRAM] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  2   42[COMRAM] int 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2126 ;;      Params:         6       0       0       0
  2127 ;;      Locals:        13       0       0       0
  2128 ;;      Temps:          4       0       0       0
  2129 ;;      Totals:        23       0       0       0
  2130 ;;Total ram usage:       23 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    5
  2133 ;; This function calls:
  2134 ;;		___lldiv
  2135 ;;		___llmod
  2136 ;;		___wmul
  2137 ;;		_isdigit
  2138 ;;		_putch
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text5
  2145  000552                     __ptext5:
  2146                           	opt stack 0
  2147  000552                     _printf:
  2148                           	opt stack 25
  2149                           
  2150                           ;doprnt.c: 466: va_list ap;
  2151                           ;doprnt.c: 499: signed char c;
  2152                           ;doprnt.c: 501: int width;
  2153                           ;doprnt.c: 504: int prec;
  2154                           ;doprnt.c: 508: unsigned char flag;
  2155                           ;doprnt.c: 523: union {
  2156                           ;doprnt.c: 524: unsigned long vd;
  2157                           ;doprnt.c: 525: double integ;
  2158                           ;doprnt.c: 526: } tmpval;
  2159                           ;doprnt.c: 528: unsigned long val;
  2160                           ;doprnt.c: 529: unsigned len;
  2161                           ;doprnt.c: 530: const char * cp;
  2162                           ;doprnt.c: 533: *ap = __va_start();
  2163                           
  2164                           ;incstack = 0
  2165  000552  0E2D               	movlw	low (?_printf+2)
  2166  000554  6E36               	movwf	printf@ap,c
  2167  000556  0E00               	movlw	high (?_printf+2)
  2168  000558  6E37               	movwf	printf@ap+1,c
  2169                           
  2170                           ;doprnt.c: 536: while(c = *f++) {
  2171  00055A  D19B               	goto	u1170
  2172  00055C                     
  2173                           ;doprnt.c: 538: if(c != '%')
  2174  00055C  0E25               	movlw	37
  2175  00055E  1841               	xorwf	printf@c,w,c
  2176  000560  B4D8               	btfsc	status,2,c
  2177  000562  D004               	goto	l479
  2178                           
  2179                           ;doprnt.c: 540: {
  2180                           ;doprnt.c: 541: (putch(c) );
  2181  000564  5041               	movf	printf@c,w,c
  2182  000566  EC9F  F006         	call	_putch
  2183                           
  2184                           ;doprnt.c: 542: continue;
  2185  00056A  D193               	goto	u1170
  2186  00056C                     l479:
  2187                           
  2188                           ;doprnt.c: 543: }
  2189                           ;doprnt.c: 546: width = 0;
  2190  00056C  0E00               	movlw	0
  2191  00056E  6E40               	movwf	printf@width+1,c
  2192  000570  0E00               	movlw	0
  2193  000572  6E3F               	movwf	printf@width,c
  2194                           
  2195                           ;doprnt.c: 548: flag = 0;
  2196  000574  0E00               	movlw	0
  2197  000576  6E3E               	movwf	printf@flag,c
  2198                           
  2199                           ;doprnt.c: 551: switch(*f) {
  2200                           
  2201                           ;doprnt.c: 550: for(;;) {
  2202  000578  D003               	goto	l481
  2203  00057A                     
  2204                           ;doprnt.c: 580: flag |= 0x04;
  2205  00057A  843E               	bsf	printf@flag,2,c
  2206                           
  2207                           ;doprnt.c: 581: f++;
  2208  00057C  4A2B               	infsnz	printf@f,f,c
  2209  00057E  2A2C               	incf	printf@f+1,f,c
  2210  000580                     l481:
  2211  000580  C02B  FFF6         	movff	printf@f,tblptrl
  2212  000584  C02C  FFF7         	movff	printf@f+1,tblptrh
  2213  000588                     	if	0	;tblptru may be non-zero
  2214  000588                     	endif
  2215  000588                     	if	0	;tblptru may be non-zero
  2216  000588                     	endif
  2217  000588  0008               	tblrd		*
  2218  00058A  50F5               	movf	tablat,w,c
  2219                           
  2220                           ; Switch size 1, requested type "space"
  2221                           ; Number of cases is 1, Range of values is 48 to 48
  2222                           ; switch strategies available:
  2223                           ; Name         Instructions Cycles
  2224                           ; simple_byte            4     3 (average)
  2225                           ;	Chosen strategy is simple_byte
  2226  00058C  0A30               	xorlw	48	; case 48
  2227  00058E  B4D8               	btfsc	status,2,c
  2228  000590  D7F4               	goto	l482
  2229                           
  2230                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2231                           
  2232                           ;doprnt.c: 586: }
  2233                           
  2234                           ;doprnt.c: 585: break;
  2235  000592  C02B  FFF6         	movff	printf@f,tblptrl
  2236  000596  C02C  FFF7         	movff	printf@f+1,tblptrh
  2237  00059A                     	if	0	;tblptru may be non-zero
  2238  00059A                     	endif
  2239  00059A                     	if	0	;tblptru may be non-zero
  2240  00059A                     	endif
  2241  00059A  0008               	tblrd		*
  2242  00059C  50F5               	movf	tablat,w,c
  2243  00059E  EC3F  F006         	call	_isdigit
  2244  0005A2  A0D8               	btfss	status,0,c
  2245  0005A4  D03A               	goto	l490
  2246                           
  2247                           ;doprnt.c: 598: width = 0;
  2248  0005A6  0E00               	movlw	0
  2249  0005A8  6E40               	movwf	printf@width+1,c
  2250  0005AA  0E00               	movlw	0
  2251  0005AC  6E3F               	movwf	printf@width,c
  2252  0005AE                     
  2253                           ;doprnt.c: 600: width *= 10;
  2254  0005AE  C03F  F015         	movff	printf@width,___wmul@multiplier
  2255  0005B2  C040  F016         	movff	printf@width+1,___wmul@multiplier+1
  2256  0005B6  0E00               	movlw	0
  2257  0005B8  6E18               	movwf	___wmul@multiplicand+1,c
  2258  0005BA  0E0A               	movlw	10
  2259  0005BC  6E17               	movwf	___wmul@multiplicand,c
  2260  0005BE  EC0A  F006         	call	___wmul	;wreg free
  2261  0005C2  C015  F03F         	movff	?___wmul,printf@width
  2262  0005C6  C016  F040         	movff	?___wmul+1,printf@width+1
  2263                           
  2264                           ;doprnt.c: 601: width += *f++ - '0';
  2265  0005CA  0ED0               	movlw	208
  2266  0005CC  6E31               	movwf	??_printf& (0+255),c
  2267  0005CE  0EFF               	movlw	255
  2268  0005D0  6E32               	movwf	(??_printf+1)& (0+255),c
  2269  0005D2  C02B  FFF6         	movff	printf@f,tblptrl
  2270  0005D6  C02C  FFF7         	movff	printf@f+1,tblptrh
  2271  0005DA                     	if	0	;tblptru may be non-zero
  2272  0005DA                     	endif
  2273  0005DA                     	if	0	;tblptru may be non-zero
  2274  0005DA                     	endif
  2275  0005DA  0008               	tblrd		*
  2276  0005DC  50F5               	movf	tablat,w,c
  2277  0005DE  6E33               	movwf	(??_printf+2)& (0+255),c
  2278  0005E0  6A34               	clrf	(??_printf+3)& (0+255),c
  2279  0005E2  5031               	movf	??_printf,w,c
  2280  0005E4  2633               	addwf	??_printf+2,f,c
  2281  0005E6  5032               	movf	??_printf+1,w,c
  2282  0005E8  2234               	addwfc	??_printf+3,f,c
  2283  0005EA  5033               	movf	??_printf+2,w,c
  2284  0005EC  263F               	addwf	printf@width,f,c
  2285  0005EE  5034               	movf	??_printf+3,w,c
  2286  0005F0  2240               	addwfc	printf@width+1,f,c
  2287  0005F2  4A2B               	infsnz	printf@f,f,c
  2288  0005F4  2A2C               	incf	printf@f+1,f,c
  2289                           
  2290                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2291  0005F6  C02B  FFF6         	movff	printf@f,tblptrl
  2292  0005FA  C02C  FFF7         	movff	printf@f+1,tblptrh
  2293  0005FE                     	if	0	;tblptru may be non-zero
  2294  0005FE                     	endif
  2295  0005FE                     	if	0	;tblptru may be non-zero
  2296  0005FE                     	endif
  2297  0005FE  0008               	tblrd		*
  2298  000600  50F5               	movf	tablat,w,c
  2299  000602  EC3F  F006         	call	_isdigit
  2300  000606  A0D8               	btfss	status,0,c
  2301  000608  D008               	goto	l490
  2302  00060A  D7D1               	goto	l487
  2303  00060C                     
  2304                           ;doprnt.c: 643: flag |= 0x10;
  2305  00060C  883E               	bsf	printf@flag,4,c
  2306                           
  2307                           ;doprnt.c: 644: goto loop;
  2308  00060E  D005               	goto	l490
  2309  000610                     
  2310                           ;doprnt.c: 718: case 'x':
  2311                           ;doprnt.c: 721: flag |= 0x80;
  2312  000610  8E3E               	bsf	printf@flag,7,c
  2313                           
  2314                           ;doprnt.c: 723: break;
  2315  000612  D01D               	goto	l496
  2316  000614                     
  2317                           ;doprnt.c: 818: flag |= 0xC0;
  2318  000614  0EC0               	movlw	192
  2319  000616  123E               	iorwf	printf@flag,f,c
  2320                           
  2321                           ;doprnt.c: 822: }
  2322                           
  2323                           ;doprnt.c: 819: break;
  2324  000618  D01A               	goto	l496
  2325  00061A                     l490:
  2326  00061A  C02B  FFF6         	movff	printf@f,tblptrl
  2327  00061E  C02C  FFF7         	movff	printf@f+1,tblptrh
  2328  000622  4A2B               	infsnz	printf@f,f,c
  2329  000624  2A2C               	incf	printf@f+1,f,c
  2330  000626                     	if	0	;tblptru may be non-zero
  2331  000626                     	endif
  2332  000626                     	if	0	;tblptru may be non-zero
  2333  000626                     	endif
  2334  000626  0008               	tblrd		*
  2335  000628  CFF5 F041          	movff	tablat,printf@c
  2336  00062C  5041               	movf	printf@c,w,c
  2337                           
  2338                           ; Switch size 1, requested type "space"
  2339                           ; Number of cases is 5, Range of values is 0 to 120
  2340                           ; switch strategies available:
  2341                           ; Name         Instructions Cycles
  2342                           ; simple_byte           16     9 (average)
  2343                           ;	Chosen strategy is simple_byte
  2344  00062E  0A00               	xorlw	0	; case 0
  2345  000630  B4D8               	btfsc	status,2,c
  2346  000632  0012               	return	
  2347  000634  0A58               	xorlw	88	; case 88
  2348  000636  B4D8               	btfsc	status,2,c
  2349  000638  D7EB               	goto	l494
  2350  00063A  0A34               	xorlw	52	; case 108
  2351  00063C  B4D8               	btfsc	status,2,c
  2352  00063E  D7E6               	goto	l493
  2353  000640  0A19               	xorlw	25	; case 117
  2354  000642  B4D8               	btfsc	status,2,c
  2355  000644  D7E7               	goto	l498
  2356  000646  0A0D               	xorlw	13	; case 120
  2357  000648  B4D8               	btfsc	status,2,c
  2358  00064A  D7E2               	goto	l494
  2359  00064C  D122               	goto	u1170
  2360  00064E                     l496:
  2361                           
  2362                           ;doprnt.c: 1273: {
  2363                           ;doprnt.c: 1281: if(flag & 0x10)
  2364  00064E  A83E               	btfss	printf@flag,4,c
  2365  000650  D00E               	goto	l499
  2366                           
  2367                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2368  000652  C036  FFD9         	movff	printf@ap,fsr2l
  2369  000656  C037  FFDA         	movff	printf@ap+1,fsr2h
  2370  00065A  CFDE F03A          	movff	postinc2,printf@val
  2371  00065E  CFDE F03B          	movff	postinc2,printf@val+1
  2372  000662  CFDE F03C          	movff	postinc2,printf@val+2
  2373  000666  CFDE F03D          	movff	postinc2,printf@val+3
  2374  00066A  0E04               	movlw	4
  2375  00066C  D00F               	goto	L5
  2376  00066E                     l499:
  2377                           
  2378                           ;doprnt.c: 1283: else
  2379                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2380  00066E  C036  FFD9         	movff	printf@ap,fsr2l
  2381  000672  C037  FFDA         	movff	printf@ap+1,fsr2h
  2382  000676  CFDE F031          	movff	postinc2,??_printf
  2383  00067A  CFDD F032          	movff	postdec2,??_printf+1
  2384  00067E  C031  F03A         	movff	??_printf,printf@val
  2385  000682  C032  F03B         	movff	??_printf+1,printf@val+1
  2386  000686  6A3C               	clrf	printf@val+2,c
  2387  000688  6A3D               	clrf	printf@val+3,c
  2388  00068A  0E02               	movlw	2
  2389  00068C                     L5:
  2390  00068C  2636               	addwf	printf@ap,f,c
  2391  00068E  0E00               	movlw	0
  2392  000690  2237               	addwfc	printf@ap+1,f,c
  2393                           
  2394                           ;doprnt.c: 1287: }
  2395                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2396  000692  D03C               	goto	l501
  2397  000694                     
  2398                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2399  000694  0E01               	movlw	1
  2400  000696  6E41               	movwf	printf@c,c
  2401  000698                     l1986:
  2402  000698  0E0A               	movlw	10
  2403  00069A  1841               	xorwf	printf@c,w,c
  2404  00069C  B4D8               	btfsc	status,2,c
  2405  00069E  D03E               	goto	l506
  2406                           
  2407                           ;doprnt.c: 1306: if(val < dpowers[c])
  2408  0006A0  5041               	movf	printf@c,w,c
  2409  0006A2  0D04               	mullw	4
  2410  0006A4  0EED               	movlw	low _dpowers
  2411  0006A6  24F3               	addwf	prodl,w,c
  2412  0006A8  6EF6               	movwf	tblptrl,c
  2413  0006AA  0E3E               	movlw	high _dpowers
  2414  0006AC  20F4               	addwfc	prodh,w,c
  2415  0006AE  6EF7               	movwf	tblptrh,c
  2416  0006B0                     	if	0	;There are less than 3 active tblptr bytes
  2417  0006B0                     	endif
  2418  0006B0  0009               	tblrd		*+
  2419  0006B2  50F5               	movf	tablat,w,c
  2420  0006B4  5C3A               	subwf	printf@val,w,c
  2421  0006B6  0009               	tblrd		*+
  2422  0006B8  50F5               	movf	tablat,w,c
  2423  0006BA  583B               	subwfb	printf@val+1,w,c
  2424  0006BC  0009               	tblrd		*+
  2425  0006BE  50F5               	movf	tablat,w,c
  2426  0006C0  583C               	subwfb	printf@val+2,w,c
  2427  0006C2  0009               	tblrd		*+
  2428  0006C4  50F5               	movf	tablat,w,c
  2429  0006C6  583D               	subwfb	printf@val+3,w,c
  2430  0006C8  A0D8               	btfss	status,0,c
  2431  0006CA  D028               	goto	l506
  2432                           
  2433                           ;doprnt.c: 1307: break;
  2434  0006CC  2A41               	incf	printf@c,f,c
  2435  0006CE  D7E4               	goto	l1986
  2436  0006D0                     
  2437                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2438  0006D0  0E01               	movlw	1
  2439  0006D2  6E41               	movwf	printf@c,c
  2440  0006D4                     l2000:
  2441  0006D4  0E08               	movlw	8
  2442  0006D6  1841               	xorwf	printf@c,w,c
  2443  0006D8  B4D8               	btfsc	status,2,c
  2444  0006DA  D020               	goto	l506
  2445                           
  2446                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2447  0006DC  5041               	movf	printf@c,w,c
  2448  0006DE  0D04               	mullw	4
  2449  0006E0  0E15               	movlw	low _hexpowers
  2450  0006E2  24F3               	addwf	prodl,w,c
  2451  0006E4  6EF6               	movwf	tblptrl,c
  2452  0006E6  0E3F               	movlw	high _hexpowers
  2453  0006E8  20F4               	addwfc	prodh,w,c
  2454  0006EA  6EF7               	movwf	tblptrh,c
  2455  0006EC                     	if	0	;There are less than 3 active tblptr bytes
  2456  0006EC                     	endif
  2457  0006EC  0009               	tblrd		*+
  2458  0006EE  50F5               	movf	tablat,w,c
  2459  0006F0  5C3A               	subwf	printf@val,w,c
  2460  0006F2  0009               	tblrd		*+
  2461  0006F4  50F5               	movf	tablat,w,c
  2462  0006F6  583B               	subwfb	printf@val+1,w,c
  2463  0006F8  0009               	tblrd		*+
  2464  0006FA  50F5               	movf	tablat,w,c
  2465  0006FC  583C               	subwfb	printf@val+2,w,c
  2466  0006FE  0009               	tblrd		*+
  2467  000700  50F5               	movf	tablat,w,c
  2468  000702  583D               	subwfb	printf@val+3,w,c
  2469  000704  A0D8               	btfss	status,0,c
  2470  000706  D00A               	goto	l506
  2471                           
  2472                           ;doprnt.c: 1318: break;
  2473  000708  2A41               	incf	printf@c,f,c
  2474  00070A  D7E4               	goto	l2000
  2475  00070C                     l501:
  2476  00070C  503E               	movf	printf@flag,w,c
  2477  00070E  0BC0               	andlw	192
  2478                           
  2479                           ; Switch size 1, requested type "space"
  2480                           ; Number of cases is 2, Range of values is 128 to 192
  2481                           ; switch strategies available:
  2482                           ; Name         Instructions Cycles
  2483                           ; simple_byte            7     4 (average)
  2484                           ;	Chosen strategy is simple_byte
  2485  000710  0A80               	xorlw	128	; case 128
  2486  000712  B4D8               	btfsc	status,2,c
  2487  000714  D7DD               	goto	l507
  2488  000716  0A40               	xorlw	64	; case 192
  2489  000718  B4D8               	btfsc	status,2,c
  2490  00071A  D7BC               	goto	l502
  2491  00071C                     l506:
  2492                           
  2493                           ;doprnt.c: 1381: if(width > c)
  2494  00071C  0E80               	movlw	128
  2495  00071E  BE41               	btfsc	printf@c,7,c
  2496  000720  0E7F               	movlw	127
  2497  000722  6E31               	movwf	??_printf& (0+255),c
  2498  000724  503F               	movf	printf@width,w,c
  2499  000726  5C41               	subwf	printf@c,w,c
  2500  000728  5040               	movf	printf@width+1,w,c
  2501  00072A  0A80               	xorlw	128
  2502  00072C  5831               	subwfb	??_printf& (0+255),w,c
  2503  00072E  B0D8               	btfsc	status,0,c
  2504  000730  D007               	goto	l511
  2505                           
  2506                           ;doprnt.c: 1382: width -= c;
  2507  000732  5041               	movf	printf@c,w,c
  2508  000734  5E3F               	subwf	printf@width,f,c
  2509  000736  0E00               	movlw	0
  2510  000738  BE41               	btfsc	printf@c,7,c
  2511  00073A  0EFF               	movlw	255
  2512  00073C  5A40               	subwfb	printf@width+1,f,c
  2513  00073E  D004               	goto	l512
  2514  000740                     l511:
  2515                           
  2516                           ;doprnt.c: 1383: else
  2517                           ;doprnt.c: 1384: width = 0;
  2518  000740  0E00               	movlw	0
  2519  000742  6E40               	movwf	printf@width+1,c
  2520  000744  0E00               	movlw	0
  2521  000746  6E3F               	movwf	printf@width,c
  2522  000748                     l512:
  2523                           
  2524                           ;doprnt.c: 1387: if(flag & 0x04) {
  2525  000748  A43E               	btfss	printf@flag,2,c
  2526  00074A  D00B               	goto	l513
  2527  00074C                     
  2528                           ;doprnt.c: 1415: if(width)
  2529  00074C  503F               	movf	printf@width,w,c
  2530  00074E  1040               	iorwf	printf@width+1,w,c
  2531  000750  B4D8               	btfsc	status,2,c
  2532  000752  D015               	goto	u1160
  2533                           
  2534                           ;doprnt.c: 1417: (putch('0') );
  2535                           
  2536                           ;doprnt.c: 1416: do
  2537  000754  0E30               	movlw	48
  2538  000756  EC9F  F006         	call	_putch
  2539                           
  2540                           ;doprnt.c: 1418: while(--width);
  2541  00075A  063F               	decf	printf@width,f,c
  2542  00075C  A0D8               	btfss	status,0,c
  2543  00075E  0640               	decf	printf@width+1,f,c
  2544  000760  D7F5               	goto	L7
  2545  000762                     l513:
  2546                           
  2547                           ;doprnt.c: 1422: {
  2548                           ;doprnt.c: 1424: if(width
  2549                           ;doprnt.c: 1428: )
  2550  000762  503F               	movf	printf@width,w,c
  2551  000764  1040               	iorwf	printf@width+1,w,c
  2552  000766  B4D8               	btfsc	status,2,c
  2553  000768  D00A               	goto	u1160
  2554  00076A                     u1150:
  2555                           
  2556                           ;doprnt.c: 1430: (putch(' ') );
  2557                           
  2558                           ;doprnt.c: 1429: do
  2559  00076A  0E20               	movlw	32
  2560  00076C  EC9F  F006         	call	_putch
  2561                           
  2562                           ;doprnt.c: 1431: while(--width);
  2563  000770  063F               	decf	printf@width,f,c
  2564  000772  A0D8               	btfss	status,0,c
  2565  000774  0640               	decf	printf@width+1,f,c
  2566  000776  503F               	movf	printf@width,w,c
  2567  000778  1040               	iorwf	printf@width+1,w,c
  2568  00077A  A4D8               	btfss	status,2,c
  2569  00077C  D7F6               	goto	u1150
  2570  00077E                     u1160:
  2571                           
  2572                           ;doprnt.c: 1469: }
  2573                           ;doprnt.c: 1472: prec = c;
  2574  00077E  5041               	movf	printf@c,w,c
  2575  000780  6E38               	movwf	printf@prec,c
  2576  000782  6A39               	clrf	printf@prec+1,c
  2577  000784  BE38               	btfsc	printf@prec,7,c
  2578  000786  0639               	decf	printf@prec+1,f,c
  2579                           
  2580                           ;doprnt.c: 1474: while(prec--) {
  2581  000788  D07C               	goto	l521
  2582  00078A                     
  2583                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2584  00078A  C038  F031         	movff	printf@prec,??_printf
  2585  00078E  C039  F032         	movff	printf@prec+1,??_printf+1
  2586  000792  90D8               	bcf	status,0,c
  2587  000794  3631               	rlcf	??_printf,f,c
  2588  000796  3632               	rlcf	??_printf+1,f,c
  2589  000798  90D8               	bcf	status,0,c
  2590  00079A  3631               	rlcf	??_printf,f,c
  2591  00079C  3632               	rlcf	??_printf+1,f,c
  2592  00079E  0EED               	movlw	low _dpowers
  2593  0007A0  2431               	addwf	??_printf,w,c
  2594  0007A2  6EF6               	movwf	tblptrl,c
  2595  0007A4  0E3E               	movlw	high _dpowers
  2596  0007A6  2032               	addwfc	??_printf+1,w,c
  2597  0007A8  6EF7               	movwf	tblptrh,c
  2598  0007AA                     	if	0	;There are less than 3 active tblptr bytes
  2599  0007AA                     	endif
  2600  0007AA  0009               	tblrd		*+
  2601  0007AC  CFF5 F019          	movff	tablat,___lldiv@divisor
  2602  0007B0  0009               	tblrd		*+
  2603  0007B2  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  2604  0007B6  0009               	tblrd		*+
  2605  0007B8  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  2606  0007BC  000A               	tblrd		*-
  2607  0007BE  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  2608  0007C2  C03A  F015         	movff	printf@val,___lldiv@dividend
  2609  0007C6  C03B  F016         	movff	printf@val+1,___lldiv@dividend+1
  2610  0007CA  C03C  F017         	movff	printf@val+2,___lldiv@dividend+2
  2611  0007CE  C03D  F018         	movff	printf@val+3,___lldiv@dividend+3
  2612  0007D2  EC56  F004         	call	___lldiv	;wreg free
  2613  0007D6  C015  F022         	movff	?___lldiv,___llmod@dividend
  2614  0007DA  C016  F023         	movff	?___lldiv+1,___llmod@dividend+1
  2615  0007DE  C017  F024         	movff	?___lldiv+2,___llmod@dividend+2
  2616  0007E2  C018  F025         	movff	?___lldiv+3,___llmod@dividend+3
  2617  0007E6  0E0A               	movlw	10
  2618  0007E8  6E26               	movwf	___llmod@divisor,c
  2619  0007EA  0E00               	movlw	0
  2620  0007EC  6E27               	movwf	___llmod@divisor+1,c
  2621  0007EE  0E00               	movlw	0
  2622  0007F0  6E28               	movwf	___llmod@divisor+2,c
  2623  0007F2  0E00               	movlw	0
  2624  0007F4  6E29               	movwf	___llmod@divisor+3,c
  2625  0007F6  ECD4  F004         	call	___llmod	;wreg free
  2626  0007FA  5022               	movf	?___llmod,w,c
  2627  0007FC  0F30               	addlw	48
  2628  0007FE  6E41               	movwf	printf@c,c
  2629                           
  2630                           ;doprnt.c: 1491: break;
  2631  000800  D03D               	goto	l525
  2632  000802                     
  2633                           ;doprnt.c: 1499: {
  2634                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2635  000802  C03A  F015         	movff	printf@val,___lldiv@dividend
  2636  000806  C03B  F016         	movff	printf@val+1,___lldiv@dividend+1
  2637  00080A  C03C  F017         	movff	printf@val+2,___lldiv@dividend+2
  2638  00080E  C03D  F018         	movff	printf@val+3,___lldiv@dividend+3
  2639  000812  C038  F031         	movff	printf@prec,??_printf
  2640  000816  C039  F032         	movff	printf@prec+1,??_printf+1
  2641  00081A  90D8               	bcf	status,0,c
  2642  00081C  3631               	rlcf	??_printf,f,c
  2643  00081E  3632               	rlcf	??_printf+1,f,c
  2644  000820  90D8               	bcf	status,0,c
  2645  000822  3631               	rlcf	??_printf,f,c
  2646  000824  3632               	rlcf	??_printf+1,f,c
  2647  000826  0E15               	movlw	low _hexpowers
  2648  000828  2431               	addwf	??_printf,w,c
  2649  00082A  6EF6               	movwf	tblptrl,c
  2650  00082C  0E3F               	movlw	high _hexpowers
  2651  00082E  2032               	addwfc	??_printf+1,w,c
  2652  000830  6EF7               	movwf	tblptrh,c
  2653  000832                     	if	0	;There are less than 3 active tblptr bytes
  2654  000832                     	endif
  2655  000832  0009               	tblrd		*+
  2656  000834  CFF5 F019          	movff	tablat,___lldiv@divisor
  2657  000838  0009               	tblrd		*+
  2658  00083A  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  2659  00083E  0009               	tblrd		*+
  2660  000840  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  2661  000844  000A               	tblrd		*-
  2662  000846  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  2663  00084A  EC56  F004         	call	___lldiv	;wreg free
  2664  00084E  5015               	movf	?___lldiv,w,c
  2665  000850  0B0F               	andlw	15
  2666  000852  6E35               	movwf	printf@idx,c
  2667                           
  2668                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2669  000854  5035               	movf	printf@idx,w,c
  2670  000856  0D01               	mullw	1
  2671  000858  0E35               	movlw	low STR_14
  2672  00085A  24F3               	addwf	prodl,w,c
  2673  00085C  6EF6               	movwf	tblptrl,c
  2674  00085E  0E3F               	movlw	high STR_14
  2675  000860  20F4               	addwfc	prodh,w,c
  2676  000862  6EF7               	movwf	tblptrh,c
  2677  000864                     	if	0	;There are less than 3 active tblptr bytes
  2678  000864                     	endif
  2679  000864  0008               	tblrd		*
  2680  000866  CFF5 F041          	movff	tablat,printf@c
  2681                           
  2682                           ;doprnt.c: 1523: }
  2683                           
  2684                           ;doprnt.c: 1508: }
  2685                           ;doprnt.c: 1510: break;
  2686  00086A  D008               	goto	l525
  2687  00086C                     l2046:
  2688  00086C  503E               	movf	printf@flag,w,c
  2689  00086E  0BC0               	andlw	192
  2690                           
  2691                           ; Switch size 1, requested type "space"
  2692                           ; Number of cases is 2, Range of values is 128 to 192
  2693                           ; switch strategies available:
  2694                           ; Name         Instructions Cycles
  2695                           ; simple_byte            7     4 (average)
  2696                           ;	Chosen strategy is simple_byte
  2697  000870  0A80               	xorlw	128	; case 128
  2698  000872  B4D8               	btfsc	status,2,c
  2699  000874  D7C6               	goto	l526
  2700  000876  0A40               	xorlw	64	; case 192
  2701  000878  B4D8               	btfsc	status,2,c
  2702  00087A  D787               	goto	l524
  2703  00087C                     l525:
  2704                           
  2705                           ;doprnt.c: 1524: (putch(c) );
  2706  00087C  5041               	movf	printf@c,w,c
  2707  00087E  EC9F  F006         	call	_putch
  2708  000882                     l521:
  2709  000882  0638               	decf	printf@prec,f,c
  2710  000884  A0D8               	btfss	status,0,c
  2711  000886  0639               	decf	printf@prec+1,f,c
  2712  000888  2838               	incf	printf@prec,w,c
  2713  00088A  E1F0               	bnz	l2046
  2714  00088C  2839               	incf	printf@prec+1,w,c
  2715  00088E  A4D8               	btfss	status,2,c
  2716  000890  D7ED               	goto	l523
  2717  000892                     u1170:
  2718  000892  C02B  FFF6         	movff	printf@f,tblptrl
  2719  000896  C02C  FFF7         	movff	printf@f+1,tblptrh
  2720  00089A  4A2B               	infsnz	printf@f,f,c
  2721  00089C  2A2C               	incf	printf@f+1,f,c
  2722  00089E                     	if	0	;tblptru may be non-zero
  2723  00089E                     	endif
  2724  00089E                     	if	0	;tblptru may be non-zero
  2725  00089E                     	endif
  2726  00089E  0008               	tblrd		*
  2727  0008A0  CFF5 F041          	movff	tablat,printf@c
  2728  0008A4  5041               	movf	printf@c,w,c
  2729  0008A6  B4D8               	btfsc	status,2,c
  2730  0008A8  0012               	return	
  2731  0008AA  D658               	goto	l478
  2732  0008AC                     __end_of_printf:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           intcon	equ	0xFF2
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1l	equ	0xFE1
  2745                           postinc2	equ	0xFDE
  2746                           postdec2	equ	0xFDD
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _putch *****************
  2752 ;; Defined at:
  2753 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  txData          1    wreg     unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  txData          1   21[COMRAM] unsigned char 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2, cstack
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2767 ;;      Params:         0       0       0       0
  2768 ;;      Locals:         1       0       0       0
  2769 ;;      Temps:          0       0       0       0
  2770 ;;      Totals:         1       0       0       0
  2771 ;;Total ram usage:        1 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    4
  2774 ;; This function calls:
  2775 ;;		_EUSART1_Write
  2776 ;; This function is called by:
  2777 ;;		_printf
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text6
  2782  000D3E                     __ptext6:
  2783                           	opt stack 0
  2784  000D3E                     _putch:
  2785                           	opt stack 25
  2786                           
  2787                           ;incstack = 0
  2788                           ;putch@txData stored from wreg
  2789  000D3E  6E16               	movwf	putch@txData,c
  2790                           
  2791                           ;eusart1.c: 112: EUSART1_Write(txData);
  2792  000D40  5016               	movf	putch@txData,w,c
  2793  000D42  EC8D  F006         	call	_EUSART1_Write
  2794  000D46  0012               	return		;funcret
  2795  000D48                     __end_of_putch:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           intcon	equ	0xFF2
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           fsr1l	equ	0xFE1
  2808                           postinc2	equ	0xFDE
  2809                           postdec2	equ	0xFDD
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _EUSART1_Write *****************
  2815 ;; Defined at:
  2816 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  txData          1    wreg     unsigned char 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  txData          1   20[COMRAM] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2830 ;;      Params:         0       0       0       0
  2831 ;;      Locals:         1       0       0       0
  2832 ;;      Temps:          0       0       0       0
  2833 ;;      Totals:         1       0       0       0
  2834 ;;Total ram usage:        1 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    3
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_putch
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text7
  2845  000D1A                     __ptext7:
  2846                           	opt stack 0
  2847  000D1A                     _EUSART1_Write:
  2848                           	opt stack 25
  2849                           
  2850                           ;incstack = 0
  2851                           ;EUSART1_Write@txData stored from wreg
  2852  000D1A  6E15               	movwf	EUSART1_Write@txData,c
  2853  000D1C                     
  2854                           ;eusart1.c: 99: {
  2855                           
  2856                           ;eusart1.c: 98: while(0 == PIR1bits.TX1IF)
  2857  000D1C  A89E               	btfss	3998,4,c	;volatile
  2858  000D1E  D7FE               	goto	l1778
  2859                           
  2860                           ;eusart1.c: 100: }
  2861                           ;eusart1.c: 102: TXREG1 = txData;
  2862  000D20  C015  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2863  000D24  0012               	return		;funcret
  2864  000D26                     __end_of_EUSART1_Write:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           postdec1	equ	0xFE5
  2876                           fsr1l	equ	0xFE1
  2877                           postinc2	equ	0xFDE
  2878                           postdec2	equ	0xFDD
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _isdigit *****************
  2884 ;; Defined at:
  2885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  c               1    wreg     unsigned char 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  c               1   22[COMRAM] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;		None               void
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2899 ;;      Params:         0       0       0       0
  2900 ;;      Locals:         2       0       0       0
  2901 ;;      Temps:          1       0       0       0
  2902 ;;      Totals:         3       0       0       0
  2903 ;;Total ram usage:        3 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    3
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_printf
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text8
  2914  000C7E                     __ptext8:
  2915                           	opt stack 0
  2916  000C7E                     _isdigit:
  2917                           	opt stack 26
  2918                           
  2919                           ;incstack = 0
  2920                           ;isdigit@c stored from wreg
  2921  000C7E  6E17               	movwf	isdigit@c,c
  2922  000C80  0E00               	movlw	0
  2923  000C82  6E16               	movwf	_isdigit$2002,c
  2924  000C84  0E3A               	movlw	58
  2925  000C86  6017               	cpfslt	isdigit@c,c
  2926  000C88  D005               	goto	l859
  2927  000C8A  0E2F               	movlw	47
  2928  000C8C  6417               	cpfsgt	isdigit@c,c
  2929  000C8E  D002               	goto	l859
  2930  000C90  0E01               	movlw	1
  2931  000C92  6E16               	movwf	_isdigit$2002,c
  2932  000C94                     l859:
  2933  000C94  C016  F015         	movff	_isdigit$2002,??_isdigit
  2934  000C98  3015               	rrcf	??_isdigit,w,c
  2935  000C9A  0012               	return	
  2936  000C9C                     __end_of_isdigit:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           intcon	equ	0xFF2
  2945                           postinc0	equ	0xFEE
  2946                           wreg	equ	0xFE8
  2947                           postdec1	equ	0xFE5
  2948                           fsr1l	equ	0xFE1
  2949                           postinc2	equ	0xFDE
  2950                           postdec2	equ	0xFDD
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function ___wmul *****************
  2956 ;; Defined at:
  2957 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  multiplier      2   20[COMRAM] unsigned int 
  2960 ;;  multiplicand    2   22[COMRAM] unsigned int 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  product         2   24[COMRAM] unsigned int 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  2   20[COMRAM] unsigned int 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0, prodl, prodh
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2972 ;;      Params:         4       0       0       0
  2973 ;;      Locals:         2       0       0       0
  2974 ;;      Temps:          0       0       0       0
  2975 ;;      Totals:         6       0       0       0
  2976 ;;Total ram usage:        6 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    3
  2979 ;; This function calls:
  2980 ;;		Nothing
  2981 ;; This function is called by:
  2982 ;;		_printf
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text9
  2987  000C14                     __ptext9:
  2988                           	opt stack 0
  2989  000C14                     ___wmul:
  2990                           	opt stack 26
  2991                           
  2992                           ;incstack = 0
  2993  000C14  5015               	movf	___wmul@multiplier,w,c
  2994  000C16  0217               	mulwf	___wmul@multiplicand,c
  2995  000C18  CFF3 F019          	movff	prodl,___wmul@product
  2996  000C1C  CFF4 F01A          	movff	prodh,___wmul@product+1
  2997  000C20  5015               	movf	___wmul@multiplier,w,c
  2998  000C22  0218               	mulwf	___wmul@multiplicand+1,c
  2999  000C24  50F3               	movf	prodl,w,c
  3000  000C26  261A               	addwf	___wmul@product+1,f,c
  3001  000C28  5016               	movf	___wmul@multiplier+1,w,c
  3002  000C2A  0217               	mulwf	___wmul@multiplicand,c
  3003  000C2C  50F3               	movf	prodl,w,c
  3004  000C2E  261A               	addwf	___wmul@product+1,f,c
  3005  000C30  C019  F015         	movff	___wmul@product,?___wmul
  3006  000C34  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  3007  000C38  0012               	return	
  3008  000C3A                     __end_of___wmul:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           postinc0	equ	0xFEE
  3018                           wreg	equ	0xFE8
  3019                           postdec1	equ	0xFE5
  3020                           fsr1l	equ	0xFE1
  3021                           postinc2	equ	0xFDE
  3022                           postdec2	equ	0xFDD
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function ___llmod *****************
  3028 ;; Defined at:
  3029 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  dividend        4   33[COMRAM] unsigned long 
  3032 ;;  divisor         4   37[COMRAM] unsigned long 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  counter         1   41[COMRAM] unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  4   33[COMRAM] unsigned long 
  3037 ;; Registers used:
  3038 ;;		wreg, status,2, status,0
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3044 ;;      Params:         8       0       0       0
  3045 ;;      Locals:         1       0       0       0
  3046 ;;      Temps:          0       0       0       0
  3047 ;;      Totals:         9       0       0       0
  3048 ;;Total ram usage:        9 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    3
  3051 ;; This function calls:
  3052 ;;		Nothing
  3053 ;; This function is called by:
  3054 ;;		_printf
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text10
  3059  0009A8                     __ptext10:
  3060                           	opt stack 0
  3061  0009A8                     ___llmod:
  3062                           	opt stack 26
  3063                           
  3064                           ;incstack = 0
  3065  0009A8  5026               	movf	___llmod@divisor,w,c
  3066  0009AA  1027               	iorwf	___llmod@divisor+1,w,c
  3067  0009AC  1028               	iorwf	___llmod@divisor+2,w,c
  3068  0009AE  1029               	iorwf	___llmod@divisor+3,w,c
  3069  0009B0  B4D8               	btfsc	status,2,c
  3070  0009B2  D024               	goto	l900
  3071  0009B4  0E01               	movlw	1
  3072  0009B6  6E2A               	movwf	___llmod@counter,c
  3073  0009B8  D006               	goto	l895
  3074  0009BA  90D8               	bcf	status,0,c
  3075  0009BC  3626               	rlcf	___llmod@divisor,f,c
  3076  0009BE  3627               	rlcf	___llmod@divisor+1,f,c
  3077  0009C0  3628               	rlcf	___llmod@divisor+2,f,c
  3078  0009C2  3629               	rlcf	___llmod@divisor+3,f,c
  3079  0009C4  2A2A               	incf	___llmod@counter,f,c
  3080  0009C6                     l895:
  3081  0009C6  AE29               	btfss	___llmod@divisor+3,7,c
  3082  0009C8  D7F8               	goto	l896
  3083  0009CA                     u980:
  3084  0009CA  5026               	movf	___llmod@divisor,w,c
  3085  0009CC  5C22               	subwf	___llmod@dividend,w,c
  3086  0009CE  5027               	movf	___llmod@divisor+1,w,c
  3087  0009D0  5823               	subwfb	___llmod@dividend+1,w,c
  3088  0009D2  5028               	movf	___llmod@divisor+2,w,c
  3089  0009D4  5824               	subwfb	___llmod@dividend+2,w,c
  3090  0009D6  5029               	movf	___llmod@divisor+3,w,c
  3091  0009D8  5825               	subwfb	___llmod@dividend+3,w,c
  3092  0009DA  A0D8               	btfss	status,0,c
  3093  0009DC  D008               	goto	l899
  3094  0009DE  5026               	movf	___llmod@divisor,w,c
  3095  0009E0  5E22               	subwf	___llmod@dividend,f,c
  3096  0009E2  5027               	movf	___llmod@divisor+1,w,c
  3097  0009E4  5A23               	subwfb	___llmod@dividend+1,f,c
  3098  0009E6  5028               	movf	___llmod@divisor+2,w,c
  3099  0009E8  5A24               	subwfb	___llmod@dividend+2,f,c
  3100  0009EA  5029               	movf	___llmod@divisor+3,w,c
  3101  0009EC  5A25               	subwfb	___llmod@dividend+3,f,c
  3102  0009EE                     l899:
  3103  0009EE  90D8               	bcf	status,0,c
  3104  0009F0  3229               	rrcf	___llmod@divisor+3,f,c
  3105  0009F2  3228               	rrcf	___llmod@divisor+2,f,c
  3106  0009F4  3227               	rrcf	___llmod@divisor+1,f,c
  3107  0009F6  3226               	rrcf	___llmod@divisor,f,c
  3108  0009F8  2E2A               	decfsz	___llmod@counter,f,c
  3109  0009FA  D7E7               	goto	u980
  3110  0009FC                     l900:
  3111  0009FC  C022  F022         	movff	___llmod@dividend,?___llmod
  3112  000A00  C023  F023         	movff	___llmod@dividend+1,?___llmod+1
  3113  000A04  C024  F024         	movff	___llmod@dividend+2,?___llmod+2
  3114  000A08  C025  F025         	movff	___llmod@dividend+3,?___llmod+3
  3115  000A0C  0012               	return		;funcret
  3116  000A0E                     __end_of___llmod:
  3117                           	opt stack 0
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           prodh	equ	0xFF4
  3123                           prodl	equ	0xFF3
  3124                           intcon	equ	0xFF2
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec1	equ	0xFE5
  3128                           fsr1l	equ	0xFE1
  3129                           postinc2	equ	0xFDE
  3130                           postdec2	equ	0xFDD
  3131                           fsr2h	equ	0xFDA
  3132                           fsr2l	equ	0xFD9
  3133                           status	equ	0xFD8
  3134                           
  3135 ;; *************** function ___lldiv *****************
  3136 ;; Defined at:
  3137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  dividend        4   20[COMRAM] unsigned long 
  3140 ;;  divisor         4   24[COMRAM] unsigned long 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  quotient        4   28[COMRAM] unsigned long 
  3143 ;;  counter         1   32[COMRAM] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  4   20[COMRAM] unsigned long 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3153 ;;      Params:         8       0       0       0
  3154 ;;      Locals:         5       0       0       0
  3155 ;;      Temps:          0       0       0       0
  3156 ;;      Totals:        13       0       0       0
  3157 ;;Total ram usage:       13 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    3
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_printf
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text11
  3168  0008AC                     __ptext11:
  3169                           	opt stack 0
  3170  0008AC                     ___lldiv:
  3171                           	opt stack 26
  3172                           
  3173                           ;incstack = 0
  3174  0008AC  0E00               	movlw	0
  3175  0008AE  6E1D               	movwf	___lldiv@quotient,c
  3176  0008B0  0E00               	movlw	0
  3177  0008B2  6E1E               	movwf	___lldiv@quotient+1,c
  3178  0008B4  0E00               	movlw	0
  3179  0008B6  6E1F               	movwf	___lldiv@quotient+2,c
  3180  0008B8  0E00               	movlw	0
  3181  0008BA  6E20               	movwf	___lldiv@quotient+3,c
  3182  0008BC  5019               	movf	___lldiv@divisor,w,c
  3183  0008BE  101A               	iorwf	___lldiv@divisor+1,w,c
  3184  0008C0  101B               	iorwf	___lldiv@divisor+2,w,c
  3185  0008C2  101C               	iorwf	___lldiv@divisor+3,w,c
  3186  0008C4  B4D8               	btfsc	status,2,c
  3187  0008C6  D02A               	goto	l890
  3188  0008C8  0E01               	movlw	1
  3189  0008CA  6E21               	movwf	___lldiv@counter,c
  3190  0008CC  D006               	goto	l885
  3191  0008CE  90D8               	bcf	status,0,c
  3192  0008D0  3619               	rlcf	___lldiv@divisor,f,c
  3193  0008D2  361A               	rlcf	___lldiv@divisor+1,f,c
  3194  0008D4  361B               	rlcf	___lldiv@divisor+2,f,c
  3195  0008D6  361C               	rlcf	___lldiv@divisor+3,f,c
  3196  0008D8  2A21               	incf	___lldiv@counter,f,c
  3197  0008DA                     l885:
  3198  0008DA  AE1C               	btfss	___lldiv@divisor+3,7,c
  3199  0008DC  D7F8               	goto	l886
  3200  0008DE                     u950:
  3201  0008DE  90D8               	bcf	status,0,c
  3202  0008E0  361D               	rlcf	___lldiv@quotient,f,c
  3203  0008E2  361E               	rlcf	___lldiv@quotient+1,f,c
  3204  0008E4  361F               	rlcf	___lldiv@quotient+2,f,c
  3205  0008E6  3620               	rlcf	___lldiv@quotient+3,f,c
  3206  0008E8  5019               	movf	___lldiv@divisor,w,c
  3207  0008EA  5C15               	subwf	___lldiv@dividend,w,c
  3208  0008EC  501A               	movf	___lldiv@divisor+1,w,c
  3209  0008EE  5816               	subwfb	___lldiv@dividend+1,w,c
  3210  0008F0  501B               	movf	___lldiv@divisor+2,w,c
  3211  0008F2  5817               	subwfb	___lldiv@dividend+2,w,c
  3212  0008F4  501C               	movf	___lldiv@divisor+3,w,c
  3213  0008F6  5818               	subwfb	___lldiv@dividend+3,w,c
  3214  0008F8  A0D8               	btfss	status,0,c
  3215  0008FA  D009               	goto	l889
  3216  0008FC  5019               	movf	___lldiv@divisor,w,c
  3217  0008FE  5E15               	subwf	___lldiv@dividend,f,c
  3218  000900  501A               	movf	___lldiv@divisor+1,w,c
  3219  000902  5A16               	subwfb	___lldiv@dividend+1,f,c
  3220  000904  501B               	movf	___lldiv@divisor+2,w,c
  3221  000906  5A17               	subwfb	___lldiv@dividend+2,f,c
  3222  000908  501C               	movf	___lldiv@divisor+3,w,c
  3223  00090A  5A18               	subwfb	___lldiv@dividend+3,f,c
  3224  00090C  801D               	bsf	___lldiv@quotient,0,c
  3225  00090E                     l889:
  3226  00090E  90D8               	bcf	status,0,c
  3227  000910  321C               	rrcf	___lldiv@divisor+3,f,c
  3228  000912  321B               	rrcf	___lldiv@divisor+2,f,c
  3229  000914  321A               	rrcf	___lldiv@divisor+1,f,c
  3230  000916  3219               	rrcf	___lldiv@divisor,f,c
  3231  000918  2E21               	decfsz	___lldiv@counter,f,c
  3232  00091A  D7E1               	goto	u950
  3233  00091C                     l890:
  3234  00091C  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  3235  000920  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  3236  000924  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  3237  000928  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  3238  00092C  0012               	return		;funcret
  3239  00092E                     __end_of___lldiv:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1l	equ	0xFE1
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258 ;; *************** function _pi_supply_on *****************
  3259 ;; Defined at:
  3260 ;;		line 466 in file "main.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;		None
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		None
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3274 ;;      Params:         0       0       0       0
  3275 ;;      Locals:         0       0       0       0
  3276 ;;      Temps:          0       0       0       0
  3277 ;;      Totals:         0       0       0       0
  3278 ;;Total ram usage:        0 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    3
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text12
  3289  000D5A                     __ptext12:
  3290                           	opt stack 0
  3291  000D5A                     _pi_supply_on:
  3292                           	opt stack 27
  3293                           
  3294                           ;incstack = 0
  3295                           ;main.c: 469: do { LATDbits.LATD2 = 1; } while(0);
  3296  000D5A  848C               	bsf	3980,2,c	;volatile
  3297  000D5C  0012               	return	
  3298  000D5E                     __end_of_pi_supply_on:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon	equ	0xFF2
  3307                           postinc0	equ	0xFEE
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           fsr1l	equ	0xFE1
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _pi_supply_off *****************
  3318 ;; Defined at:
  3319 ;;		line 460 in file "main.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;		None
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		None
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3333 ;;      Params:         0       0       0       0
  3334 ;;      Locals:         0       0       0       0
  3335 ;;      Temps:          0       0       0       0
  3336 ;;      Totals:         0       0       0       0
  3337 ;;Total ram usage:        0 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    3
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text13
  3348  000D5E                     __ptext13:
  3349                           	opt stack 0
  3350  000D5E                     _pi_supply_off:
  3351                           	opt stack 27
  3352                           
  3353                           ;incstack = 0
  3354                           ;main.c: 463: do { LATDbits.LATD2 = 0; } while(0);
  3355  000D5E  948C               	bcf	3980,2,c	;volatile
  3356  000D60  0012               	return	
  3357  000D62                     __end_of_pi_supply_off:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon	equ	0xFF2
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           postdec1	equ	0xFE5
  3369                           fsr1l	equ	0xFE1
  3370                           postinc2	equ	0xFDE
  3371                           postdec2	equ	0xFDD
  3372                           fsr2h	equ	0xFDA
  3373                           fsr2l	equ	0xFD9
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function ___lmul *****************
  3377 ;; Defined at:
  3378 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  multiplier      4   20[COMRAM] unsigned long 
  3381 ;;  multiplicand    4   24[COMRAM] unsigned long 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  product         4   28[COMRAM] unsigned long 
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  4   20[COMRAM] unsigned long 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2, status,0
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3393 ;;      Params:         8       0       0       0
  3394 ;;      Locals:         4       0       0       0
  3395 ;;      Temps:          0       0       0       0
  3396 ;;      Totals:        12       0       0       0
  3397 ;;Total ram usage:       12 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    3
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_main
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text14
  3408  000A6C                     __ptext14:
  3409                           	opt stack 0
  3410  000A6C                     ___lmul:
  3411                           	opt stack 27
  3412                           
  3413                           ;incstack = 0
  3414  000A6C  0E00               	movlw	0
  3415  000A6E  6E1D               	movwf	___lmul@product,c
  3416  000A70  0E00               	movlw	0
  3417  000A72  6E1E               	movwf	___lmul@product+1,c
  3418  000A74  0E00               	movlw	0
  3419  000A76  6E1F               	movwf	___lmul@product+2,c
  3420  000A78  0E00               	movlw	0
  3421  000A7A  6E20               	movwf	___lmul@product+3,c
  3422  000A7C  A015               	btfss	___lmul@multiplier,0,c
  3423  000A7E  D008               	goto	l542
  3424  000A80  5019               	movf	___lmul@multiplicand,w,c
  3425  000A82  261D               	addwf	___lmul@product,f,c
  3426  000A84  501A               	movf	___lmul@multiplicand+1,w,c
  3427  000A86  221E               	addwfc	___lmul@product+1,f,c
  3428  000A88  501B               	movf	___lmul@multiplicand+2,w,c
  3429  000A8A  221F               	addwfc	___lmul@product+2,f,c
  3430  000A8C  501C               	movf	___lmul@multiplicand+3,w,c
  3431  000A8E  2220               	addwfc	___lmul@product+3,f,c
  3432  000A90                     l542:
  3433  000A90  90D8               	bcf	status,0,c
  3434  000A92  3619               	rlcf	___lmul@multiplicand,f,c
  3435  000A94  361A               	rlcf	___lmul@multiplicand+1,f,c
  3436  000A96  361B               	rlcf	___lmul@multiplicand+2,f,c
  3437  000A98  361C               	rlcf	___lmul@multiplicand+3,f,c
  3438  000A9A  90D8               	bcf	status,0,c
  3439  000A9C  3218               	rrcf	___lmul@multiplier+3,f,c
  3440  000A9E  3217               	rrcf	___lmul@multiplier+2,f,c
  3441  000AA0  3216               	rrcf	___lmul@multiplier+1,f,c
  3442  000AA2  3215               	rrcf	___lmul@multiplier,f,c
  3443  000AA4  5015               	movf	___lmul@multiplier,w,c
  3444  000AA6  1016               	iorwf	___lmul@multiplier+1,w,c
  3445  000AA8  1017               	iorwf	___lmul@multiplier+2,w,c
  3446  000AAA  1018               	iorwf	___lmul@multiplier+3,w,c
  3447  000AAC  A4D8               	btfss	status,2,c
  3448  000AAE  D7E6               	goto	l541
  3449  000AB0  C01D  F015         	movff	___lmul@product,?___lmul
  3450  000AB4  C01E  F016         	movff	___lmul@product+1,?___lmul+1
  3451  000AB8  C01F  F017         	movff	___lmul@product+2,?___lmul+2
  3452  000ABC  C020  F018         	movff	___lmul@product+3,?___lmul+3
  3453  000AC0  0012               	return		;funcret
  3454  000AC2                     __end_of___lmul:
  3455                           	opt stack 0
  3456                           tblptru	equ	0xFF8
  3457                           tblptrh	equ	0xFF7
  3458                           tblptrl	equ	0xFF6
  3459                           tablat	equ	0xFF5
  3460                           prodh	equ	0xFF4
  3461                           prodl	equ	0xFF3
  3462                           intcon	equ	0xFF2
  3463                           postinc0	equ	0xFEE
  3464                           wreg	equ	0xFE8
  3465                           postdec1	equ	0xFE5
  3466                           fsr1l	equ	0xFE1
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _TMR5_HasOverflowOccured *****************
  3474 ;; Defined at:
  3475 ;;		line 153 in file "mcc_generated_files/tmr5.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      unsigned char 
  3482 ;; Registers used:
  3483 ;;		wreg
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3489 ;;      Params:         0       0       0       0
  3490 ;;      Locals:         0       0       0       0
  3491 ;;      Temps:          0       0       0       0
  3492 ;;      Totals:         0       0       0       0
  3493 ;;Total ram usage:        0 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    3
  3496 ;; This function calls:
  3497 ;;		Nothing
  3498 ;; This function is called by:
  3499 ;;		_main
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text15
  3504  000D26                     __ptext15:
  3505                           	opt stack 0
  3506  000D26                     _TMR5_HasOverflowOccured:
  3507                           	opt stack 27
  3508                           
  3509                           ;tmr5.c: 156: return(PIR5bits.TMR5IF);
  3510                           
  3511                           ;incstack = 0
  3512  000D26  A27E               	btfss	3966,1,c	;volatile
  3513  000D28  D002               	goto	u1220
  3514  000D2A  0E01               	movlw	1
  3515  000D2C  0012               	return	
  3516  000D2E                     u1220:
  3517  000D2E  0E00               	movlw	0
  3518  000D30  0012               	return	
  3519  000D32                     __end_of_TMR5_HasOverflowOccured:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           postdec1	equ	0xFE5
  3531                           fsr1l	equ	0xFE1
  3532                           postinc2	equ	0xFDE
  3533                           postdec2	equ	0xFDD
  3534                           fsr2h	equ	0xFDA
  3535                           fsr2l	equ	0xFD9
  3536                           status	equ	0xFD8
  3537                           
  3538 ;; *************** function _TMR0_HasOverflowOccured *****************
  3539 ;; Defined at:
  3540 ;;		line 124 in file "mcc_generated_files/tmr0.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;		None
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      unsigned char 
  3547 ;; Registers used:
  3548 ;;		wreg
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3554 ;;      Params:         0       0       0       0
  3555 ;;      Locals:         0       0       0       0
  3556 ;;      Temps:          0       0       0       0
  3557 ;;      Totals:         0       0       0       0
  3558 ;;Total ram usage:        0 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    3
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_main
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text16
  3569  000D32                     __ptext16:
  3570                           	opt stack 0
  3571  000D32                     _TMR0_HasOverflowOccured:
  3572                           	opt stack 27
  3573                           
  3574                           ;tmr0.c: 127: return(INTCONbits.TMR0IF);
  3575                           
  3576                           ;incstack = 0
  3577  000D32  A4F2               	btfss	intcon,2,c	;volatile
  3578  000D34  D002               	goto	u1230
  3579  000D36  0E01               	movlw	1
  3580  000D38  0012               	return	
  3581  000D3A                     u1230:
  3582  000D3A  0E00               	movlw	0
  3583  000D3C  0012               	return	
  3584  000D3E                     __end_of_TMR0_HasOverflowOccured:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           postinc0	equ	0xFEE
  3594                           wreg	equ	0xFE8
  3595                           postdec1	equ	0xFE5
  3596                           fsr1l	equ	0xFE1
  3597                           postinc2	equ	0xFDE
  3598                           postdec2	equ	0xFDD
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _SYSTEM_Initialize *****************
  3604 ;; Defined at:
  3605 ;;		line 105 in file "mcc_generated_files/mcc.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3619 ;;      Params:         0       0       0       0
  3620 ;;      Locals:         0       0       0       0
  3621 ;;      Temps:          0       0       0       0
  3622 ;;      Totals:         0       0       0       0
  3623 ;;Total ram usage:        0 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    5
  3626 ;; This function calls:
  3627 ;;		_ADC_Initialize
  3628 ;;		_EUSART1_Initialize
  3629 ;;		_I2C2_Initialize
  3630 ;;		_INTERRUPT_Initialize
  3631 ;;		_OSCILLATOR_Initialize
  3632 ;;		_PIN_MANAGER_Initialize
  3633 ;;		_TMR0_Initialize
  3634 ;;		_TMR5_Initialize
  3635 ;; This function is called by:
  3636 ;;		_main
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text17
  3641  000C3A                     __ptext17:
  3642                           	opt stack 0
  3643  000C3A                     _SYSTEM_Initialize:
  3644                           	opt stack 25
  3645                           
  3646                           ;mcc.c: 108: INTERRUPT_Initialize();
  3647                           
  3648                           ;incstack = 0
  3649  000C3A  ECB3  F006         	call	_INTERRUPT_Initialize	;wreg free
  3650                           
  3651                           ;mcc.c: 109: PIN_MANAGER_Initialize();
  3652  000C3E  ECB3  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  3653                           
  3654                           ;mcc.c: 110: OSCILLATOR_Initialize();
  3655  000C42  EC7F  F006         	call	_OSCILLATOR_Initialize	;wreg free
  3656                           
  3657                           ;mcc.c: 111: I2C2_Initialize();
  3658  000C46  EC4E  F006         	call	_I2C2_Initialize	;wreg free
  3659                           
  3660                           ;mcc.c: 112: ADC_Initialize();
  3661  000C4A  EC74  F006         	call	_ADC_Initialize	;wreg free
  3662                           
  3663                           ;mcc.c: 113: TMR5_Initialize();
  3664  000C4E  EC2E  F006         	call	_TMR5_Initialize	;wreg free
  3665                           
  3666                           ;mcc.c: 114: TMR0_Initialize();
  3667  000C52  EC5D  F006         	call	_TMR0_Initialize	;wreg free
  3668                           
  3669                           ;mcc.c: 115: EUSART1_Initialize();
  3670  000C56  EC69  F006         	call	_EUSART1_Initialize	;wreg free
  3671  000C5A  0012               	return		;funcret
  3672  000C5C                     __end_of_SYSTEM_Initialize:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           intcon	equ	0xFF2
  3681                           postinc0	equ	0xFEE
  3682                           wreg	equ	0xFE8
  3683                           postdec1	equ	0xFE5
  3684                           fsr1l	equ	0xFE1
  3685                           postinc2	equ	0xFDE
  3686                           postdec2	equ	0xFDD
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691 ;; *************** function _TMR5_Initialize *****************
  3692 ;; Defined at:
  3693 ;;		line 62 in file "mcc_generated_files/tmr5.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;		None
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;		None
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, status,2, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3707 ;;      Params:         0       0       0       0
  3708 ;;      Locals:         0       0       0       0
  3709 ;;      Temps:          0       0       0       0
  3710 ;;      Totals:         0       0       0       0
  3711 ;;Total ram usage:        0 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    4
  3714 ;; This function calls:
  3715 ;;		_TMR5_StartTimer
  3716 ;; This function is called by:
  3717 ;;		_main
  3718 ;;		_SYSTEM_Initialize
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text18
  3723  000C5C                     __ptext18:
  3724                           	opt stack 0
  3725  000C5C                     _TMR5_Initialize:
  3726                           	opt stack 26
  3727                           
  3728                           ;tmr5.c: 67: T5CON = 0x30;
  3729                           
  3730                           ;incstack = 0
  3731  000C5C  0E30               	movlw	48
  3732  000C5E  010F               	movlb	15	; () banked
  3733  000C60  6F4E               	movwf	78,b	;volatile
  3734                           
  3735                           ;tmr5.c: 70: T5GCON = 0x00;
  3736  000C62  0E00               	movlw	0
  3737  000C64  6F4D               	movwf	77,b	;volatile
  3738                           
  3739                           ;tmr5.c: 73: TMR5H = 0x3C;
  3740  000C66  0E3C               	movlw	60
  3741  000C68  6F50               	movwf	80,b	;volatile
  3742                           
  3743                           ;tmr5.c: 76: TMR5L = 0xB0;
  3744  000C6A  0EB0               	movlw	176
  3745  000C6C  6F4F               	movwf	79,b	;volatile
  3746                           
  3747                           ; BSR set to: 15
  3748                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
  3749  000C6E  CF4F F043          	movff	3919,_timer5ReloadVal	;volatile
  3750  000C72  CF50 F044          	movff	3920,_timer5ReloadVal+1	;volatile
  3751                           
  3752                           ; BSR set to: 15
  3753                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
  3754  000C76  927E               	bcf	3966,1,c	;volatile
  3755                           
  3756                           ; BSR set to: 15
  3757                           ;tmr5.c: 85: TMR5_StartTimer();
  3758  000C78  ECA4  F006         	call	_TMR5_StartTimer	;wreg free
  3759  000C7C  0012               	return		;funcret
  3760  000C7E                     __end_of_TMR5_Initialize:
  3761                           	opt stack 0
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           prodh	equ	0xFF4
  3767                           prodl	equ	0xFF3
  3768                           intcon	equ	0xFF2
  3769                           postinc0	equ	0xFEE
  3770                           wreg	equ	0xFE8
  3771                           postdec1	equ	0xFE5
  3772                           fsr1l	equ	0xFE1
  3773                           postinc2	equ	0xFDE
  3774                           postdec2	equ	0xFDD
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779 ;; *************** function _TMR5_StartTimer *****************
  3780 ;; Defined at:
  3781 ;;		line 88 in file "mcc_generated_files/tmr5.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		None
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3795 ;;      Params:         0       0       0       0
  3796 ;;      Locals:         0       0       0       0
  3797 ;;      Temps:          0       0       0       0
  3798 ;;      Totals:         0       0       0       0
  3799 ;;Total ram usage:        0 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    3
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_TMR5_Initialize
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text19
  3810  000D48                     __ptext19:
  3811                           	opt stack 0
  3812  000D48                     _TMR5_StartTimer:
  3813                           	opt stack 26
  3814                           
  3815                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
  3816                           
  3817                           ;incstack = 0
  3818  000D48  010F               	movlb	15	; () banked
  3819  000D4A  814E               	bsf	78,0,b	;volatile
  3820                           
  3821                           ; BSR set to: 15
  3822  000D4C  0012               	return		;funcret
  3823  000D4E                     __end_of_TMR5_StartTimer:
  3824                           	opt stack 0
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           postdec1	equ	0xFE5
  3835                           fsr1l	equ	0xFE1
  3836                           postinc2	equ	0xFDE
  3837                           postdec2	equ	0xFDD
  3838                           fsr2h	equ	0xFDA
  3839                           fsr2l	equ	0xFD9
  3840                           status	equ	0xFD8
  3841                           
  3842 ;; *************** function _TMR0_Initialize *****************
  3843 ;; Defined at:
  3844 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;		None
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;		None
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3858 ;;      Params:         0       0       0       0
  3859 ;;      Locals:         0       0       0       0
  3860 ;;      Temps:          0       0       0       0
  3861 ;;      Totals:         0       0       0       0
  3862 ;;Total ram usage:        0 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    4
  3865 ;; This function calls:
  3866 ;;		_TMR0_StartTimer
  3867 ;; This function is called by:
  3868 ;;		_main
  3869 ;;		_SYSTEM_Initialize
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text20
  3874  000CBA                     __ptext20:
  3875                           	opt stack 0
  3876  000CBA                     _TMR0_Initialize:
  3877                           	opt stack 26
  3878                           
  3879                           ;tmr0.c: 70: T0CON = 0x7F;
  3880                           
  3881                           ; BSR set to: 15
  3882                           ;incstack = 0
  3883  000CBA  0E7F               	movlw	127
  3884  000CBC  6ED5               	movwf	4053,c	;volatile
  3885                           
  3886                           ;tmr0.c: 73: TMR0H = 0x00;
  3887  000CBE  0E00               	movlw	0
  3888  000CC0  6ED7               	movwf	4055,c	;volatile
  3889                           
  3890                           ;tmr0.c: 76: TMR0L = 0xFC;
  3891  000CC2  0EFC               	movlw	252
  3892  000CC4  6ED6               	movwf	4054,c	;volatile
  3893                           
  3894                           ;tmr0.c: 79: timer0ReloadVal = 252;
  3895  000CC6  0EFC               	movlw	252
  3896  000CC8  6E45               	movwf	_timer0ReloadVal,c	;volatile
  3897                           
  3898                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
  3899  000CCA  94F2               	bcf	intcon,2,c	;volatile
  3900                           
  3901                           ;tmr0.c: 86: TMR0_StartTimer();
  3902  000CCC  ECB1  F006         	call	_TMR0_StartTimer	;wreg free
  3903  000CD0  0012               	return		;funcret
  3904  000CD2                     __end_of_TMR0_Initialize:
  3905                           	opt stack 0
  3906                           tblptru	equ	0xFF8
  3907                           tblptrh	equ	0xFF7
  3908                           tblptrl	equ	0xFF6
  3909                           tablat	equ	0xFF5
  3910                           prodh	equ	0xFF4
  3911                           prodl	equ	0xFF3
  3912                           intcon	equ	0xFF2
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           postdec1	equ	0xFE5
  3916                           fsr1l	equ	0xFE1
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           fsr2h	equ	0xFDA
  3920                           fsr2l	equ	0xFD9
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _TMR0_StartTimer *****************
  3924 ;; Defined at:
  3925 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		None
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3939 ;;      Params:         0       0       0       0
  3940 ;;      Locals:         0       0       0       0
  3941 ;;      Temps:          0       0       0       0
  3942 ;;      Totals:         0       0       0       0
  3943 ;;Total ram usage:        0 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    3
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_TMR0_Initialize
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text21
  3954  000D62                     __ptext21:
  3955                           	opt stack 0
  3956  000D62                     _TMR0_StartTimer:
  3957                           	opt stack 26
  3958                           
  3959                           ;tmr0.c: 92: T0CONbits.TMR0ON = 1;
  3960                           
  3961                           ;incstack = 0
  3962  000D62  8ED5               	bsf	4053,7,c	;volatile
  3963  000D64  0012               	return		;funcret
  3964  000D66                     __end_of_TMR0_StartTimer:
  3965                           	opt stack 0
  3966                           tblptru	equ	0xFF8
  3967                           tblptrh	equ	0xFF7
  3968                           tblptrl	equ	0xFF6
  3969                           tablat	equ	0xFF5
  3970                           prodh	equ	0xFF4
  3971                           prodl	equ	0xFF3
  3972                           intcon	equ	0xFF2
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           postdec1	equ	0xFE5
  3976                           fsr1l	equ	0xFE1
  3977                           postinc2	equ	0xFDE
  3978                           postdec2	equ	0xFDD
  3979                           fsr2h	equ	0xFDA
  3980                           fsr2l	equ	0xFD9
  3981                           status	equ	0xFD8
  3982                           
  3983 ;; *************** function _PIN_MANAGER_Initialize *****************
  3984 ;; Defined at:
  3985 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;		None
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;		None
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  1    wreg      void 
  3992 ;; Registers used:
  3993 ;;		wreg, status,2
  3994 ;; Tracked objects:
  3995 ;;		On entry : 0/0
  3996 ;;		On exit  : 0/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3999 ;;      Params:         0       0       0       0
  4000 ;;      Locals:         0       0       0       0
  4001 ;;      Temps:          0       0       0       0
  4002 ;;      Totals:         0       0       0       0
  4003 ;;Total ram usage:        0 bytes
  4004 ;; Hardware stack levels used:    1
  4005 ;; Hardware stack levels required when called:    3
  4006 ;; This function calls:
  4007 ;;		Nothing
  4008 ;; This function is called by:
  4009 ;;		_main
  4010 ;;		_SYSTEM_Initialize
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text22
  4015  000B66                     __ptext22:
  4016                           	opt stack 0
  4017  000B66                     _PIN_MANAGER_Initialize:
  4018                           	opt stack 26
  4019                           
  4020                           ;pin_manager.c: 57: LATE = 0x00;
  4021                           
  4022                           ;incstack = 0
  4023  000B66  0E00               	movlw	0
  4024  000B68  6E8D               	movwf	3981,c	;volatile
  4025                           
  4026                           ;pin_manager.c: 58: LATD = 0x00;
  4027  000B6A  0E00               	movlw	0
  4028  000B6C  6E8C               	movwf	3980,c	;volatile
  4029                           
  4030                           ;pin_manager.c: 59: LATA = 0x00;
  4031  000B6E  0E00               	movlw	0
  4032  000B70  6E89               	movwf	3977,c	;volatile
  4033                           
  4034                           ;pin_manager.c: 60: LATB = 0x00;
  4035  000B72  0E00               	movlw	0
  4036  000B74  6E8A               	movwf	3978,c	;volatile
  4037                           
  4038                           ;pin_manager.c: 61: LATC = 0x01;
  4039  000B76  0E01               	movlw	1
  4040  000B78  6E8B               	movwf	3979,c	;volatile
  4041                           
  4042                           ;pin_manager.c: 66: TRISE = 0x07;
  4043  000B7A  0E07               	movlw	7
  4044  000B7C  6E96               	movwf	3990,c	;volatile
  4045                           
  4046                           ;pin_manager.c: 67: TRISA = 0xFF;
  4047  000B7E  6892               	setf	3986,c	;volatile
  4048                           
  4049                           ;pin_manager.c: 68: TRISB = 0xFF;
  4050  000B80  6893               	setf	3987,c	;volatile
  4051                           
  4052                           ;pin_manager.c: 69: TRISC = 0x88;
  4053  000B82  0E88               	movlw	136
  4054  000B84  6E94               	movwf	3988,c	;volatile
  4055                           
  4056                           ;pin_manager.c: 70: TRISD = 0xFB;
  4057  000B86  0EFB               	movlw	251
  4058  000B88  6E95               	movwf	3989,c	;volatile
  4059                           
  4060                           ;pin_manager.c: 75: ANSELC = 0x08;
  4061  000B8A  0E08               	movlw	8
  4062  000B8C  010F               	movlb	15	; () banked
  4063  000B8E  6F3A               	movwf	58,b	;volatile
  4064                           
  4065                           ;pin_manager.c: 76: ANSELB = 0x3F;
  4066  000B90  0E3F               	movlw	63
  4067  000B92  6F39               	movwf	57,b	;volatile
  4068                           
  4069                           ;pin_manager.c: 77: ANSELD = 0xF0;
  4070  000B94  0EF0               	movlw	240
  4071  000B96  6F3B               	movwf	59,b	;volatile
  4072                           
  4073                           ;pin_manager.c: 78: ANSELE = 0x07;
  4074  000B98  0E07               	movlw	7
  4075  000B9A  6F3C               	movwf	60,b	;volatile
  4076                           
  4077                           ;pin_manager.c: 79: ANSELA = 0x2F;
  4078  000B9C  0E2F               	movlw	47
  4079  000B9E  6F38               	movwf	56,b	;volatile
  4080                           
  4081                           ; BSR set to: 15
  4082                           ;pin_manager.c: 84: WPUB = 0xFF;
  4083  000BA0  6861               	setf	3937,c	;volatile
  4084                           
  4085                           ; BSR set to: 15
  4086                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  4087  000BA2  9EF1               	bcf	intcon2,7,c	;volatile
  4088                           
  4089                           ; BSR set to: 15
  4090  000BA4  0012               	return		;funcret
  4091  000BA6                     __end_of_PIN_MANAGER_Initialize:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodh	equ	0xFF4
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           intcon2	equ	0xFF1
  4101                           postinc0	equ	0xFEE
  4102                           wreg	equ	0xFE8
  4103                           postdec1	equ	0xFE5
  4104                           fsr1l	equ	0xFE1
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           fsr2h	equ	0xFDA
  4108                           fsr2l	equ	0xFD9
  4109                           status	equ	0xFD8
  4110                           
  4111 ;; *************** function _OSCILLATOR_Initialize *****************
  4112 ;; Defined at:
  4113 ;;		line 128 in file "mcc_generated_files/mcc.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4127 ;;      Params:         0       0       0       0
  4128 ;;      Locals:         0       0       0       0
  4129 ;;      Temps:          0       0       0       0
  4130 ;;      Totals:         0       0       0       0
  4131 ;;Total ram usage:        0 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    3
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_main
  4138 ;;		_SYSTEM_Initialize
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text23
  4143  000CFE                     __ptext23:
  4144                           	opt stack 0
  4145  000CFE                     _OSCILLATOR_Initialize:
  4146                           	opt stack 26
  4147                           
  4148                           ;mcc.c: 131: OSCCON = 0x70;
  4149                           
  4150                           ; BSR set to: 15
  4151                           ;incstack = 0
  4152  000CFE  0E70               	movlw	112
  4153  000D00  6ED3               	movwf	4051,c	;volatile
  4154                           
  4155                           ;mcc.c: 133: OSCCON2 = 0x04;
  4156  000D02  0E04               	movlw	4
  4157  000D04  6ED2               	movwf	4050,c	;volatile
  4158                           
  4159                           ;mcc.c: 135: OSCTUNE = 0x00;
  4160  000D06  0E00               	movlw	0
  4161  000D08  6E9B               	movwf	3995,c	;volatile
  4162  000D0A  0012               	return		;funcret
  4163  000D0C                     __end_of_OSCILLATOR_Initialize:
  4164                           	opt stack 0
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           intcon2	equ	0xFF1
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           postdec1	equ	0xFE5
  4176                           fsr1l	equ	0xFE1
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function _INTERRUPT_Initialize *****************
  4184 ;; Defined at:
  4185 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		None
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4199 ;;      Params:         0       0       0       0
  4200 ;;      Locals:         0       0       0       0
  4201 ;;      Temps:          0       0       0       0
  4202 ;;      Totals:         0       0       0       0
  4203 ;;Total ram usage:        0 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    3
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_SYSTEM_Initialize
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text24
  4214  000D66                     __ptext24:
  4215                           	opt stack 0
  4216  000D66                     _INTERRUPT_Initialize:
  4217                           	opt stack 26
  4218                           
  4219                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  4220                           
  4221                           ;incstack = 0
  4222  000D66  9ED0               	bcf	4048,7,c	;volatile
  4223  000D68  0012               	return		;funcret
  4224  000D6A                     __end_of_INTERRUPT_Initialize:
  4225                           	opt stack 0
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodh	equ	0xFF4
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           intcon2	equ	0xFF1
  4234                           postinc0	equ	0xFEE
  4235                           wreg	equ	0xFE8
  4236                           postdec1	equ	0xFE5
  4237                           fsr1l	equ	0xFE1
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _I2C2_Initialize *****************
  4245 ;; Defined at:
  4246 ;;		line 81 in file "mcc_generated_files/i2c2.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4260 ;;      Params:         0       0       0       0
  4261 ;;      Locals:         0       0       0       0
  4262 ;;      Temps:          0       0       0       0
  4263 ;;      Totals:         0       0       0       0
  4264 ;;Total ram usage:        0 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    3
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_SYSTEM_Initialize
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text25
  4275  000C9C                     __ptext25:
  4276                           	opt stack 0
  4277  000C9C                     _I2C2_Initialize:
  4278                           	opt stack 26
  4279                           
  4280                           ;i2c2.c: 85: SSP2STAT = 0x00;
  4281                           
  4282                           ;incstack = 0
  4283  000C9C  0E00               	movlw	0
  4284  000C9E  6E6D               	movwf	3949,c	;volatile
  4285                           
  4286                           ;i2c2.c: 87: SSP2CON1 = 0x26;
  4287  000CA0  0E26               	movlw	38
  4288  000CA2  6E6C               	movwf	3948,c	;volatile
  4289                           
  4290                           ;i2c2.c: 89: SSP2CON2 = 0x01;
  4291  000CA4  0E01               	movlw	1
  4292  000CA6  6E6B               	movwf	3947,c	;volatile
  4293                           
  4294                           ;i2c2.c: 91: SSP2CON3 = 0x00;
  4295  000CA8  0E00               	movlw	0
  4296  000CAA  6E69               	movwf	3945,c	;volatile
  4297                           
  4298                           ;i2c2.c: 93: SSP2MSK = (0x7F << 1);
  4299  000CAC  0EFE               	movlw	254
  4300  000CAE  6E6A               	movwf	3946,c	;volatile
  4301                           
  4302                           ;i2c2.c: 95: SSP2ADD = (0x44 << 1);
  4303  000CB0  0E88               	movlw	136
  4304  000CB2  6E6E               	movwf	3950,c	;volatile
  4305                           
  4306                           ;i2c2.c: 98: PIR3bits.SSP2IF = 0;
  4307  000CB4  9EA4               	bcf	4004,7,c	;volatile
  4308                           
  4309                           ;i2c2.c: 100: PIE3bits.SSP2IE = 1;
  4310  000CB6  8EA3               	bsf	4003,7,c	;volatile
  4311  000CB8  0012               	return		;funcret
  4312  000CBA                     __end_of_I2C2_Initialize:
  4313                           	opt stack 0
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           intcon2	equ	0xFF1
  4322                           postinc0	equ	0xFEE
  4323                           wreg	equ	0xFE8
  4324                           postdec1	equ	0xFE5
  4325                           fsr1l	equ	0xFE1
  4326                           postinc2	equ	0xFDE
  4327                           postdec2	equ	0xFDD
  4328                           fsr2h	equ	0xFDA
  4329                           fsr2l	equ	0xFD9
  4330                           status	equ	0xFD8
  4331                           
  4332 ;; *************** function _EUSART1_Initialize *****************
  4333 ;; Defined at:
  4334 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4348 ;;      Params:         0       0       0       0
  4349 ;;      Locals:         0       0       0       0
  4350 ;;      Temps:          0       0       0       0
  4351 ;;      Totals:         0       0       0       0
  4352 ;;Total ram usage:        0 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    3
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_SYSTEM_Initialize
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text26
  4363  000CD2                     __ptext26:
  4364                           	opt stack 0
  4365  000CD2                     _EUSART1_Initialize:
  4366                           	opt stack 26
  4367                           
  4368                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  4369                           
  4370                           ;incstack = 0
  4371  000CD2  0E08               	movlw	8
  4372  000CD4  6EB8               	movwf	4024,c	;volatile
  4373                           
  4374                           ;eusart1.c: 63: RCSTA1 = 0x90;
  4375  000CD6  0E90               	movlw	144
  4376  000CD8  6EAB               	movwf	4011,c	;volatile
  4377                           
  4378                           ;eusart1.c: 66: TXSTA1 = 0x24;
  4379  000CDA  0E24               	movlw	36
  4380  000CDC  6EAC               	movwf	4012,c	;volatile
  4381                           
  4382                           ;eusart1.c: 69: SPBRG1 = 0x44;
  4383  000CDE  0E44               	movlw	68
  4384  000CE0  6EAF               	movwf	4015,c	;volatile
  4385                           
  4386                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  4387  000CE2  0E00               	movlw	0
  4388  000CE4  6EB0               	movwf	4016,c	;volatile
  4389  000CE6  0012               	return		;funcret
  4390  000CE8                     __end_of_EUSART1_Initialize:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           intcon2	equ	0xFF1
  4400                           postinc0	equ	0xFEE
  4401                           wreg	equ	0xFE8
  4402                           postdec1	equ	0xFE5
  4403                           fsr1l	equ	0xFE1
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _ADC_Initialize *****************
  4411 ;; Defined at:
  4412 ;;		line 58 in file "mcc_generated_files/adc.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4426 ;;      Params:         0       0       0       0
  4427 ;;      Locals:         0       0       0       0
  4428 ;;      Temps:          0       0       0       0
  4429 ;;      Totals:         0       0       0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    3
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;;		_SYSTEM_Initialize
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           	psect	text27
  4442  000CE8                     __ptext27:
  4443                           	opt stack 0
  4444  000CE8                     _ADC_Initialize:
  4445                           	opt stack 26
  4446                           
  4447                           ;adc.c: 63: ADCON0 = 0x01;
  4448                           
  4449                           ;incstack = 0
  4450  000CE8  0E01               	movlw	1
  4451  000CEA  6EC2               	movwf	4034,c	;volatile
  4452                           
  4453                           ;adc.c: 66: ADCON1 = 0x00;
  4454  000CEC  0E00               	movlw	0
  4455  000CEE  6EC1               	movwf	4033,c	;volatile
  4456                           
  4457                           ;adc.c: 69: ADCON2 = 0x12;
  4458  000CF0  0E12               	movlw	18
  4459  000CF2  6EC0               	movwf	4032,c	;volatile
  4460                           
  4461                           ;adc.c: 72: ADRESL = 0x00;
  4462  000CF4  0E00               	movlw	0
  4463  000CF6  6EC3               	movwf	4035,c	;volatile
  4464                           
  4465                           ;adc.c: 75: ADRESH = 0x00;
  4466  000CF8  0E00               	movlw	0
  4467  000CFA  6EC4               	movwf	4036,c	;volatile
  4468  000CFC  0012               	return		;funcret
  4469  000CFE                     __end_of_ADC_Initialize:
  4470                           	opt stack 0
  4471                           tblptru	equ	0xFF8
  4472                           tblptrh	equ	0xFF7
  4473                           tblptrl	equ	0xFF6
  4474                           tablat	equ	0xFF5
  4475                           prodh	equ	0xFF4
  4476                           prodl	equ	0xFF3
  4477                           intcon	equ	0xFF2
  4478                           intcon2	equ	0xFF1
  4479                           postinc0	equ	0xFEE
  4480                           wreg	equ	0xFE8
  4481                           postdec1	equ	0xFE5
  4482                           fsr1l	equ	0xFE1
  4483                           postinc2	equ	0xFDE
  4484                           postdec2	equ	0xFDD
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489 ;; *************** function _OSCILLATOR_FastClock *****************
  4490 ;; Defined at:
  4491 ;;		line 118 in file "mcc_generated_files/mcc.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4505 ;;      Params:         0       0       0       0
  4506 ;;      Locals:         0       0       0       0
  4507 ;;      Temps:          0       0       0       0
  4508 ;;      Totals:         0       0       0       0
  4509 ;;Total ram usage:        0 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    3
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text28
  4520  000D0C                     __ptext28:
  4521                           	opt stack 0
  4522  000D0C                     _OSCILLATOR_FastClock:
  4523                           	opt stack 27
  4524                           
  4525                           ;mcc.c: 121: OSCCON = 0x70;
  4526                           
  4527                           ;incstack = 0
  4528  000D0C  0E70               	movlw	112
  4529  000D0E  6ED3               	movwf	4051,c	;volatile
  4530                           
  4531                           ;mcc.c: 123: OSCCON2 = 0x04;
  4532  000D10  0E04               	movlw	4
  4533  000D12  6ED2               	movwf	4050,c	;volatile
  4534                           
  4535                           ;mcc.c: 125: OSCTUNE = 0x40;
  4536  000D14  0E40               	movlw	64
  4537  000D16  6E9B               	movwf	3995,c	;volatile
  4538  000D18  0012               	return		;funcret
  4539  000D1A                     __end_of_OSCILLATOR_FastClock:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           intcon	equ	0xFF2
  4548                           intcon2	equ	0xFF1
  4549                           postinc0	equ	0xFEE
  4550                           wreg	equ	0xFE8
  4551                           postdec1	equ	0xFE5
  4552                           fsr1l	equ	0xFE1
  4553                           postinc2	equ	0xFDE
  4554                           postdec2	equ	0xFDD
  4555                           fsr2h	equ	0xFDA
  4556                           fsr2l	equ	0xFD9
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function _ADC_GetConversion *****************
  4560 ;; Defined at:
  4561 ;;		line 106 in file "mcc_generated_files/adc.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  channel         1    wreg     enum E6975
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  channel         1   24[COMRAM] enum E6975
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  2   20[COMRAM] unsigned int 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4575 ;;      Params:         2       0       0       0
  4576 ;;      Locals:         1       0       0       0
  4577 ;;      Temps:          2       0       0       0
  4578 ;;      Totals:         5       0       0       0
  4579 ;;Total ram usage:        5 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    3
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           	psect	text29
  4590  000BE4                     __ptext29:
  4591                           	opt stack 0
  4592  000BE4                     _ADC_GetConversion:
  4593                           	opt stack 27
  4594                           
  4595                           ;incstack = 0
  4596                           ;ADC_GetConversion@channel stored from wreg
  4597  000BE4  6E19               	movwf	ADC_GetConversion@channel,c
  4598                           
  4599                           ;adc.c: 109: ADCON0bits.CHS = channel;
  4600  000BE6  C019  F017         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  4601  000BEA  4617               	rlncf	??_ADC_GetConversion,f,c
  4602  000BEC  4617               	rlncf	??_ADC_GetConversion,f,c
  4603  000BEE  50C2               	movf	4034,w,c	;volatile
  4604  000BF0  1817               	xorwf	??_ADC_GetConversion,w,c
  4605  000BF2  0B83               	andlw	-125
  4606  000BF4  1817               	xorwf	??_ADC_GetConversion,w,c
  4607  000BF6  6EC2               	movwf	4034,c	;volatile
  4608                           
  4609                           ;adc.c: 112: ADCON0bits.ADON = 1;
  4610  000BF8  80C2               	bsf	4034,0,c	;volatile
  4611                           
  4612                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  4613  000BFA  82C2               	bsf	4034,1,c	;volatile
  4614  000BFC                     
  4615                           ;adc.c: 119: {
  4616  000BFC  B2C2               	btfsc	4034,1,c	;volatile
  4617  000BFE  D7FE               	goto	l205
  4618                           
  4619                           ;adc.c: 120: }
  4620                           ;adc.c: 123: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4621  000C00  50C4               	movf	4036,w,c	;volatile
  4622  000C02  6E18               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  4623  000C04  6A17               	clrf	??_ADC_GetConversion& (0+255),c
  4624  000C06  50C3               	movf	4035,w,c	;volatile
  4625  000C08  2417               	addwf	??_ADC_GetConversion,w,c
  4626  000C0A  6E15               	movwf	?_ADC_GetConversion,c
  4627  000C0C  0E00               	movlw	0
  4628  000C0E  2018               	addwfc	??_ADC_GetConversion+1,w,c
  4629  000C10  6E16               	movwf	?_ADC_GetConversion+1,c
  4630  000C12  0012               	return	
  4631  000C14                     __end_of_ADC_GetConversion:
  4632                           	opt stack 0
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           intcon2	equ	0xFF1
  4641                           postinc0	equ	0xFEE
  4642                           wreg	equ	0xFE8
  4643                           postdec1	equ	0xFE5
  4644                           fsr1l	equ	0xFE1
  4645                           postinc2	equ	0xFDE
  4646                           postdec2	equ	0xFDD
  4647                           fsr2h	equ	0xFDA
  4648                           fsr2l	equ	0xFD9
  4649                           status	equ	0xFD8
  4650                           
  4651 ;; *************** function _INTERRUPT_InterruptManager *****************
  4652 ;; Defined at:
  4653 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;		None
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;		None
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  1    wreg      void 
  4660 ;; Registers used:
  4661 ;;		wreg, status,2, status,0, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4667 ;;      Params:         0       0       0       0
  4668 ;;      Locals:         0       0       0       0
  4669 ;;      Temps:         18       0       0       0
  4670 ;;      Totals:        18       0       0       0
  4671 ;;Total ram usage:       18 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    2
  4674 ;; This function calls:
  4675 ;;		_I2C2_ISR
  4676 ;; This function is called by:
  4677 ;;		Interrupt level 2
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	intcode
  4682  000008                     __pintcode:
  4683                           	opt stack 0
  4684  000008                     _INTERRUPT_InterruptManager:
  4685                           	opt stack 25
  4686                           
  4687                           ;incstack = 0
  4688  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4689  00000A  CFFA F003          	movff	pclath,??_INTERRUPT_InterruptManager
  4690  00000E  CFFB F004          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4691  000012  CFE9 F005          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4692  000016  CFEA F006          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4693  00001A  CFE1 F007          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4694  00001E  CFE2 F008          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4695  000022  CFD9 F009          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4696  000026  CFDA F00A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4697  00002A  CFF3 F00B          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4698  00002E  CFF4 F00C          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4699  000032  CFF6 F00D          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4700  000036  CFF7 F00E          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4701  00003A  CFF8 F00F          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4702  00003E  CFF5 F010          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4703  000042  C049  F011         	movff	btemp,??_INTERRUPT_InterruptManager+14
  4704  000046  C04A  F012         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  4705  00004A  C04B  F013         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  4706  00004E  C04C  F014         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  4707                           
  4708                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE3bits.SSP2IE == 1 && PIR3bits.SS
      +                          P2IF == 1)
  4709  000052  BCF2               	btfsc	intcon,6,c	;volatile
  4710  000054  AEA3               	btfss	4003,7,c	;volatile
  4711  000056  D003               	goto	i2l460
  4712  000058  BEA4               	btfsc	4004,7,c	;volatile
  4713                           
  4714                           ;interrupt_manager.c: 61: {
  4715                           ;interrupt_manager.c: 62: I2C2_ISR();
  4716  00005A  ECD3  F005         	call	_I2C2_ISR	;wreg free
  4717  00005E                     i2l460:
  4718                           
  4719                           ;interrupt_manager.c: 64: else
  4720                           ;interrupt_manager.c: 65: {
  4721  00005E  C014  F04C         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  4722  000062  C013  F04B         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  4723  000066  C012  F04A         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  4724  00006A  C011  F049         	movff	??_INTERRUPT_InterruptManager+14,btemp
  4725  00006E  C010  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4726  000072  C00F  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4727  000076  C00E  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4728  00007A  C00D  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4729  00007E  C00C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4730  000082  C00B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4731  000086  C00A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4732  00008A  C009  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4733  00008E  C008  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4734  000092  C007  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4735  000096  C006  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4736  00009A  C005  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4737  00009E  C004  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4738  0000A2  C003  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4739  0000A6  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4740  0000A8  0011               	retfie		f
  4741  0000AA                     __end_of_INTERRUPT_InterruptManager:
  4742                           	opt stack 0
  4743                           pclatu	equ	0xFFB
  4744                           pclath	equ	0xFFA
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           intcon2	equ	0xFF1
  4753                           postinc0	equ	0xFEE
  4754                           fsr0h	equ	0xFEA
  4755                           fsr0l	equ	0xFE9
  4756                           wreg	equ	0xFE8
  4757                           postdec1	equ	0xFE5
  4758                           fsr1h	equ	0xFE2
  4759                           fsr1l	equ	0xFE1
  4760                           postinc2	equ	0xFDE
  4761                           postdec2	equ	0xFDD
  4762                           fsr2h	equ	0xFDA
  4763                           fsr2l	equ	0xFD9
  4764                           status	equ	0xFD8
  4765                           
  4766 ;; *************** function _I2C2_ISR *****************
  4767 ;; Defined at:
  4768 ;;		line 104 in file "mcc_generated_files/i2c2.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  i2c_data        1    1[COMRAM] unsigned char 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4782 ;;      Params:         0       0       0       0
  4783 ;;      Locals:         1       0       0       0
  4784 ;;      Temps:          0       0       0       0
  4785 ;;      Totals:         1       0       0       0
  4786 ;;Total ram usage:        1 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    1
  4789 ;; This function calls:
  4790 ;;		_I2C2_StatusCallback
  4791 ;; This function is called by:
  4792 ;;		_INTERRUPT_InterruptManager
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text31
  4797  000BA6                     __ptext31:
  4798                           	opt stack 0
  4799  000BA6                     _I2C2_ISR:
  4800                           	opt stack 25
  4801                           
  4802                           ;i2c2.c: 106: uint8_t i2c_data = 0x55;
  4803                           
  4804                           ;incstack = 0
  4805  000BA6  0E55               	movlw	85
  4806  000BA8  6E02               	movwf	I2C2_ISR@i2c_data,c
  4807                           
  4808                           ;i2c2.c: 112: PIR3bits.SSP2IF = 0;
  4809  000BAA  9EA4               	bcf	4004,7,c	;volatile
  4810                           
  4811                           ;i2c2.c: 113: i2c_data = SSP2BUF;
  4812  000BAC  CF6F F002          	movff	3951,I2C2_ISR@i2c_data	;volatile
  4813                           
  4814                           ;i2c2.c: 114: if(1 == SSP2STATbits.R_nW)
  4815  000BB0  A46D               	btfss	3949,2,c	;volatile
  4816  000BB2  D00B               	goto	i2l396
  4817                           
  4818                           ;i2c2.c: 115: {
  4819                           ;i2c2.c: 116: if((1 == SSP2STATbits.D_nA) && (1 == SSP2CON2bits.ACKSTAT))
  4820  000BB4  BA6D               	btfsc	3949,5,c	;volatile
  4821  000BB6  AC6B               	btfss	3947,6,c	;volatile
  4822  000BB8  D004               	goto	i2l397
  4823                           
  4824                           ;i2c2.c: 117: {
  4825                           ;i2c2.c: 119: I2C2_StatusCallback(I2C2_SLAVE_READ_COMPLETED);
  4826  000BBA  0E03               	movlw	3
  4827  000BBC  EC97  F004         	call	_I2C2_StatusCallback
  4828                           
  4829                           ;i2c2.c: 120: }
  4830  000BC0  D00F               	goto	i2l401
  4831  000BC2                     i2l397:
  4832                           
  4833                           ;i2c2.c: 121: else
  4834                           ;i2c2.c: 122: {
  4835                           ;i2c2.c: 124: I2C2_StatusCallback(I2C2_SLAVE_READ_REQUEST);
  4836  000BC2  0E01               	movlw	1
  4837  000BC4  EC97  F004         	call	_I2C2_StatusCallback
  4838                           
  4839                           ;i2c2.c: 125: }
  4840                           ;i2c2.c: 126: }
  4841  000BC8  D00B               	goto	i2l401
  4842  000BCA                     i2l396:
  4843                           
  4844                           ;i2c2.c: 127: else if(0 == SSP2STATbits.D_nA)
  4845  000BCA  BA6D               	btfsc	3949,5,c	;volatile
  4846  000BCC  D004               	goto	i2l400
  4847                           
  4848                           ;i2c2.c: 128: {
  4849                           ;i2c2.c: 132: I2C2_StatusCallback(I2C2_SLAVE_WRITE_REQUEST);
  4850  000BCE  0E00               	movlw	0
  4851  000BD0  EC97  F004         	call	_I2C2_StatusCallback
  4852                           
  4853                           ;i2c2.c: 133: }
  4854  000BD4  D005               	goto	i2l401
  4855  000BD6                     i2l400:
  4856                           
  4857                           ;i2c2.c: 134: else
  4858                           ;i2c2.c: 135: {
  4859                           ;i2c2.c: 136: I2C2_slaveWriteData = i2c_data;
  4860  000BD6  C002  F048         	movff	I2C2_ISR@i2c_data,_I2C2_slaveWriteData	;volatile
  4861                           
  4862                           ;i2c2.c: 139: I2C2_StatusCallback(I2C2_SLAVE_WRITE_COMPLETED);
  4863  000BDA  0E02               	movlw	2
  4864  000BDC  EC97  F004         	call	_I2C2_StatusCallback
  4865  000BE0                     i2l401:
  4866                           
  4867                           ;i2c2.c: 140: }
  4868                           ;i2c2.c: 142: SSP2CON1bits.CKP = 1;
  4869  000BE0  886C               	bsf	3948,4,c	;volatile
  4870  000BE2  0012               	return		;funcret
  4871  000BE4                     __end_of_I2C2_ISR:
  4872                           	opt stack 0
  4873                           pclatu	equ	0xFFB
  4874                           pclath	equ	0xFFA
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           intcon	equ	0xFF2
  4882                           intcon2	equ	0xFF1
  4883                           postinc0	equ	0xFEE
  4884                           fsr0h	equ	0xFEA
  4885                           fsr0l	equ	0xFE9
  4886                           wreg	equ	0xFE8
  4887                           postdec1	equ	0xFE5
  4888                           fsr1h	equ	0xFE2
  4889                           fsr1l	equ	0xFE1
  4890                           postinc2	equ	0xFDE
  4891                           postdec2	equ	0xFDD
  4892                           fsr2h	equ	0xFDA
  4893                           fsr2l	equ	0xFD9
  4894                           status	equ	0xFD8
  4895                           
  4896 ;; *************** function _I2C2_StatusCallback *****************
  4897 ;; Defined at:
  4898 ;;		line 530 in file "main.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;  i2c_bus_stat    1    wreg     enum E7163
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  i2c_bus_stat    1    0[COMRAM] enum E7163
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  1    wreg      void 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4912 ;;      Params:         0       0       0       0
  4913 ;;      Locals:         1       0       0       0
  4914 ;;      Temps:          0       0       0       0
  4915 ;;      Totals:         1       0       0       0
  4916 ;;Total ram usage:        1 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_I2C2_ISR
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text32
  4926  00092E                     __ptext32:
  4927                           	opt stack 0
  4928  00092E                     _I2C2_StatusCallback:
  4929                           	opt stack 25
  4930                           
  4931                           ;incstack = 0
  4932                           ;I2C2_StatusCallback@i2c_bus_state stored from wreg
  4933  00092E  6E01               	movwf	I2C2_StatusCallback@i2c_bus_state,c
  4934                           
  4935                           ;main.c: 532: static uint8_t RegAddress = 0;
  4936                           ;main.c: 533: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  4937                           ;main.c: 535: switch (i2c_bus_state)
  4938  000930  D02F               	goto	i2l147
  4939  000932                     
  4940                           ;main.c: 539: slaveWriteType = SLAVE_DATA_ADDRESS;
  4941  000932  0E01               	movlw	1
  4942  000934  6E46               	movwf	I2C2_StatusCallback@slaveWriteType,c
  4943                           
  4944                           ;main.c: 540: break;
  4945  000936  0012               	return	
  4946  000938                     i2l152:
  4947                           
  4948                           ;main.c: 547: RegAddress = I2C2_slaveWriteData;
  4949  000938  C048  F047         	movff	_I2C2_slaveWriteData,I2C2_StatusCallback@RegAddress	;volatile
  4950                           
  4951                           ;main.c: 548: break;
  4952  00093C  D00C               	goto	i2l153
  4953  00093E                     
  4954                           ;main.c: 554: RegAddress += 1;
  4955                           
  4956                           ;main.c: 551: default:
  4957  00093E  2A47               	incf	I2C2_StatusCallback@RegAddress,f,c
  4958                           
  4959                           ;main.c: 555: RegAddress &= 3;
  4960  000940  0E03               	movlw	3
  4961  000942  1647               	andwf	I2C2_StatusCallback@RegAddress,f,c
  4962                           
  4963                           ;main.c: 557: }
  4964                           
  4965                           ;main.c: 556: break;
  4966  000944  D008               	goto	i2l153
  4967  000946  5046               	movf	I2C2_StatusCallback@slaveWriteType,w,c
  4968                           
  4969                           ; Switch size 1, requested type "space"
  4970                           ; Number of cases is 2, Range of values is 0 to 1
  4971                           ; switch strategies available:
  4972                           ; Name         Instructions Cycles
  4973                           ; simple_byte            7     4 (average)
  4974                           ;	Chosen strategy is simple_byte
  4975  000948  0A00               	xorlw	0	; case 0
  4976  00094A  B4D8               	btfsc	status,2,c
  4977  00094C  D7F8               	goto	i2l154
  4978  00094E  0A01               	xorlw	1	; case 1
  4979  000950  B4D8               	btfsc	status,2,c
  4980  000952  D7F2               	goto	i2l152
  4981  000954  D7F4               	goto	i2l154
  4982  000956                     i2l153:
  4983                           
  4984                           ;main.c: 559: slaveWriteType = SLAVE_NORMAL_DATA;
  4985  000956  0E00               	movlw	0
  4986  000958  6E46               	movwf	I2C2_StatusCallback@slaveWriteType,c
  4987                           
  4988                           ;main.c: 560: break;
  4989  00095A  0012               	return	
  4990  00095C                     
  4991                           ;main.c: 565: if (RegAddress == 0)
  4992  00095C  5047               	movf	I2C2_StatusCallback@RegAddress,w,c
  4993  00095E  B4D8               	btfsc	status,2,c
  4994                           
  4995                           ;main.c: 566: {
  4996                           ;main.c: 567: SSP2BUF = reg_status;
  4997  000960  C073  FF6F         	movff	_reg_status,3951	;volatile
  4998                           
  4999                           ;main.c: 568: }
  5000                           ;main.c: 570: if (RegAddress == 1)
  5001  000964  0447               	decf	I2C2_StatusCallback@RegAddress,w,c
  5002  000966  A4D8               	btfss	status,2,c
  5003  000968  D003               	goto	i2l158
  5004                           
  5005                           ;main.c: 571: {
  5006                           ;main.c: 572: SSP2BUF = meas_tune;
  5007  00096A  C070  FF6F         	movff	_meas_tune,3951	;volatile
  5008                           
  5009                           ;main.c: 573: }
  5010  00096E  D00C               	goto	i2l162
  5011  000970                     i2l158:
  5012                           
  5013                           ;main.c: 575: else if (RegAddress == 2)
  5014  000970  0E02               	movlw	2
  5015  000972  1847               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5016  000974  A4D8               	btfss	status,2,c
  5017  000976  D003               	goto	i2l160
  5018                           
  5019                           ;main.c: 576: {
  5020                           ;main.c: 577: SSP2BUF = meas_band;
  5021  000978  C06E  FF6F         	movff	_meas_band,3951	;volatile
  5022                           
  5023                           ;main.c: 578: }
  5024  00097C  D005               	goto	i2l162
  5025  00097E                     i2l160:
  5026                           
  5027                           ;main.c: 580: else if (RegAddress == 3)
  5028  00097E  0E03               	movlw	3
  5029  000980  1847               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5030  000982  B4D8               	btfsc	status,2,c
  5031                           
  5032                           ;main.c: 581: {
  5033                           ;main.c: 582: SSP2BUF = meas_vol;
  5034  000984  C06C  FF6F         	movff	_meas_vol,3951	;volatile
  5035  000988                     i2l162:
  5036                           
  5037                           ;main.c: 583: }
  5038                           ;main.c: 585: RegAddress += 1;
  5039  000988  2A47               	incf	I2C2_StatusCallback@RegAddress,f,c
  5040                           
  5041                           ;main.c: 586: RegAddress &= 3;
  5042  00098A  0E03               	movlw	3
  5043  00098C  1647               	andwf	I2C2_StatusCallback@RegAddress,f,c
  5044                           
  5045                           ;main.c: 592: }
  5046                           
  5047                           ;main.c: 590: default:;
  5048                           
  5049                           ;main.c: 589: case I2C2_SLAVE_READ_COMPLETED:
  5050                           
  5051                           ;main.c: 587: break;
  5052  00098E  0012               	return	
  5053  000990                     i2l147:
  5054  000990  5001               	movf	I2C2_StatusCallback@i2c_bus_state,w,c
  5055                           
  5056                           ; Switch size 1, requested type "space"
  5057                           ; Number of cases is 4, Range of values is 0 to 3
  5058                           ; switch strategies available:
  5059                           ; Name         Instructions Cycles
  5060                           ; simple_byte           13     7 (average)
  5061                           ;	Chosen strategy is simple_byte
  5062  000992  0A00               	xorlw	0	; case 0
  5063  000994  B4D8               	btfsc	status,2,c
  5064  000996  D7CD               	goto	i2l148
  5065  000998  0A01               	xorlw	1	; case 1
  5066  00099A  B4D8               	btfsc	status,2,c
  5067  00099C  D7DF               	goto	i2l156
  5068  00099E  0A03               	xorlw	3	; case 2
  5069  0009A0  B4D8               	btfsc	status,2,c
  5070  0009A2  D7D1               	goto	i2l151
  5071  0009A4  0A01               	xorlw	1	; case 3
  5072  0009A6  0012               	return	
  5073  0009A8                     __end_of_I2C2_StatusCallback:
  5074                           	opt stack 0
  5075                           pclatu	equ	0xFFB
  5076                           pclath	equ	0xFFA
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           intcon	equ	0xFF2
  5084                           intcon2	equ	0xFF1
  5085                           postinc0	equ	0xFEE
  5086                           fsr0h	equ	0xFEA
  5087                           fsr0l	equ	0xFE9
  5088                           wreg	equ	0xFE8
  5089                           postdec1	equ	0xFE5
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           postinc2	equ	0xFDE
  5093                           postdec2	equ	0xFDD
  5094                           fsr2h	equ	0xFDA
  5095                           fsr2l	equ	0xFD9
  5096                           status	equ	0xFD8
  5097                           pclatu	equ	0xFFB
  5098                           pclath	equ	0xFFA
  5099                           tblptru	equ	0xFF8
  5100                           tblptrh	equ	0xFF7
  5101                           tblptrl	equ	0xFF6
  5102                           tablat	equ	0xFF5
  5103                           prodh	equ	0xFF4
  5104                           prodl	equ	0xFF3
  5105                           intcon	equ	0xFF2
  5106                           intcon2	equ	0xFF1
  5107                           postinc0	equ	0xFEE
  5108                           fsr0h	equ	0xFEA
  5109                           fsr0l	equ	0xFE9
  5110                           wreg	equ	0xFE8
  5111                           postdec1	equ	0xFE5
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           postinc2	equ	0xFDE
  5115                           postdec2	equ	0xFDD
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120                           	psect	rparam
  5121  0000                     pclatu	equ	0xFFB
  5122                           pclath	equ	0xFFA
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           prodh	equ	0xFF4
  5128                           prodl	equ	0xFF3
  5129                           intcon	equ	0xFF2
  5130                           intcon2	equ	0xFF1
  5131                           postinc0	equ	0xFEE
  5132                           fsr0h	equ	0xFEA
  5133                           fsr0l	equ	0xFE9
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           fsr1h	equ	0xFE2
  5137                           fsr1l	equ	0xFE1
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144                           	psect	temp
  5145  000049                     btemp:
  5146                           	opt stack 0
  5147  000049                     	ds	1
  5148  0000                     int$flags	set	btemp
  5149  0000                     wtemp6	set	btemp+1
  5150                           pclatu	equ	0xFFB
  5151                           pclath	equ	0xFFA
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           intcon	equ	0xFF2
  5159                           intcon2	equ	0xFF1
  5160                           postinc0	equ	0xFEE
  5161                           fsr0h	equ	0xFEA
  5162                           fsr0l	equ	0xFE9
  5163                           wreg	equ	0xFE8
  5164                           postdec1	equ	0xFE5
  5165                           fsr1h	equ	0xFE2
  5166                           fsr1l	equ	0xFE1
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           fsr2h	equ	0xFDA
  5170                           fsr2l	equ	0xFD9
  5171                           status	equ	0xFD8


Data Sizes:
    Strings     201
    Constant    72
    Data        5
    BSS         22
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      72
    BANK0           160      9      33
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[16]), STR_12(CODE[17]), STR_11(CODE[13]), STR_10(CODE[13]), 
		 -> STR_9(CODE[13]), STR_8(CODE[13]), STR_7(CODE[13]), STR_6(CODE[13]), 
		 -> STR_5(CODE[13]), STR_4(CODE[13]), STR_3(CODE[15]), STR_2(CODE[15]), 
		 -> STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_EUSART1_Write
    ___llmod->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_StatusCallback

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3882
                                             65 COMRAM     1     1      0
                                              0 BANK0      9     9      0
                  _ADC_GetConversion
                     _ADC_Initialize
               _OSCILLATOR_FastClock
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
            _TMR0_HasOverflowOccured
                    _TMR0_Initialize
            _TMR5_HasOverflowOccured
                    _TMR5_Initialize
                             ___lmul
                      _pi_supply_off
                       _pi_supply_on
                             _printf
                     _request_pi_run
                    _request_pi_stop
                  _update_status_reg
                        _ws2812_send
 ---------------------------------------------------------------------------------
 (1) _ws2812_send                                          9     5      4     167
                                             20 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _update_status_reg                                    6     6      0       0
                                             20 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _request_pi_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _request_pi_run                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    26      6    3052
                                             42 COMRAM    23    17      6
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             33 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pi_supply_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pi_supply_off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     522
                                             20 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _TMR5_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                    _I2C2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (1) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_FastClock                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             20 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0      46
                                              2 COMRAM    18    18      0
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C2_ISR                                             1     1      0      46
                                              1 COMRAM     1     1      0
                _I2C2_StatusCallback
 ---------------------------------------------------------------------------------
 (6) _I2C2_StatusCallback                                  1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _OSCILLATOR_FastClock
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _I2C2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_HasOverflowOccured
   _TMR0_Initialize
     _TMR0_StartTimer
   _TMR5_HasOverflowOccured
   _TMR5_Initialize
     _TMR5_StartTimer
   ___lmul
   _pi_supply_off
   _pi_supply_on
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART1_Write
   _request_pi_run
   _request_pi_stop
   _update_status_reg
   _ws2812_send

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_ISR
     _I2C2_StatusCallback

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      9      21       4       20.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      48       1       76.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      69       8        0.0%
DATA                 0      0      69      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 12 09:50:31 2017

       __end_of_OSCILLATOR_FastClock 0D1A      __end_of_TMR0_HasOverflowOccured 0D3E  
                                 l70 00F2                                   l71 0118  
                                 l80 0180                                   l81 01A4  
                                 l73 0120                                   l90 021A  
                                 l74 0164                                   l75 0140  
                                 l84 01FE                                   l93 02A2  
                                 l85 01CA                                   l69 00D2  
                                 l94 025E                                   l86 01F4  
                                 l95 028A                                   l79 01AE  
                                 l89 0242                                   l98 02FC  
                ___wmul@multiplicand 0017                      _timer0ReloadVal 0045  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                                l110 0510                                  l112 0544  
                                l108 050C                                  l205 0BFC  
                                l170 0A1A                                  l172 0A2A  
                                l501 070C                                  l173 0A34  
                                l502 0694                                  l511 0740  
                                l512 0748                                  l521 0882  
                                l513 0762                                  l506 071C  
                                l523 086C                                  l507 06D0  
                                l524 078A                                  l541 0A7C  
                                l525 087C                                  l542 0A90  
                                l526 0802                                  l481 0580  
                                l490 061A                                  l482 057A  
                                l900 09FC                                  l493 060C  
                                l494 0610                                  l478 055C  
                                l487 05AE                                  l479 056C  
                                l496 064E                                  l498 0614  
                                l499 066E                                  l890 091C  
                                l859 0C94                                  l885 08DA  
                                l886 08CE                                  l895 09C6  
                                l896 09BA                                  l889 090E  
                                l899 09EE                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                                  u950 08DE  
                                u980 09CA          __end_of_I2C2_StatusCallback 09A8  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                   __end_of_I2C2_ISR 0BE4                                 l2000 06D4  
                               PORTC 000F82                                 l2220 028A  
                               l2046 086C                                 l2058 0A12  
                               l1778 0D1C                                 l1986 0698  
                               STR_1 3F57                                 STR_2 3F87  
                               STR_3 3F78                                 STR_4 3FF1  
                               STR_5 3FE4                                 STR_6 3FB0  
                               STR_7 3FBD                                 STR_8 3FD7  
                               STR_9 3FA3                                 u1210 0A62  
                               u1220 0D2E                                 u1230 0D3A  
                               u1150 076A                                 u1160 077E  
                               u1240 0AD4                                 u1170 0892  
                               _LATA 000F89                                 u1270 0AF4  
                               _LATB 000F8A                                 u1255 0AD6  
                               _LATC 000F8B                                 u1360 00FA  
                               _LATD 000F8C                                 u1265 0AE2  
                               _LATE 000F8D                                 u1610 0368  
                               u1370 00FC                                 u1620 03B0  
                               u1285 0AF6                                 u1630 04DC  
                               u1615 035E                                 u1625 03A6  
                               u1707 0A64                                 u1660 0530  
                               u1580 0296                                 u1666 0532  
                               _TMR5 000F4F                                 _WPUB 000F61  
                      _EUSART1_Write 0D1A                                 _main 00AE  
                    _TMR0_StartTimer 0D62                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0049  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AA  
                    _timer5ReloadVal 0043                        __CFG_IESO$OFF 000000  
                       ___param_bank 000000              __end_of_TMR0_Initialize 0CD2  
              __end_of_pi_supply_off 0D62       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 0D0C                                ?_main 0001  
                              STR_10 3F96                                STR_11 3FCA  
                              STR_12 3F46                                STR_13 3F68  
                              STR_14 3F35                      __end_of___lldiv 092E  
                              _T0CON 000FD5                      __end_of___llmod 0A0E  
                              _T5CON 000F4E                       __CFG_DEBUG$OFF 000000  
                              i2l151 0946                                i2l160 097E  
                              i2l152 0938                                i2l400 0BD6  
                              i2l153 0956                                i2l401 0BE0  
                              i2l162 0988                                i2l154 093E  
                              i2l147 0990                                i2l156 095C  
                              i2l148 0932                                i2l158 0970  
                              i2l460 005E                                i2l396 0BCA  
                              i2l397 0BC2                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _TMR5H 000F50  
                              _TMR5L 000F4F                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                ___lmul@multiplicand 0019                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers 3F15                      __end_of_isdigit 0C9C  
                 __CFG_MCLRE$EXTMCLR 000000                                _putch 0D3E  
                     ?_EUSART1_Write 0001                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                              wtemp6 004A                       __CFG_HFOFST$ON 000000  
                     __CFG_PBADEN$ON 000000                      _TMR5_Initialize 0C5C  
                  ??_I2C2_Initialize 0015                      __initialization 0B16  
         __end_of_EUSART1_Initialize 0CE8                         __end_of_main 0552  
               __size_of_ws2812_send 005E          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 0042                        __activetblptr 000002  
            __end_of_TMR0_StartTimer 0D66                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   ___llmod@dividend 0022                               _ADRESH 000FC4  
                             _ADRESL 000FC3                 _OSCILLATOR_FastClock 0D0C  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                      main@meas_pi3v 007A                        main@meas_pi5v 0078  
                             _T5GCON 000F4D                       __CFG_WDTEN$OFF 000000  
                             _RCREG1 000FAE                               _RCSTA1 000FAB  
                             _OSCCON 000FD3     __size_of_TMR0_HasOverflowOccured 000C  
                             _SPBRG1 000FAF                               _TXREG1 000FAD  
                             _TXSTA1 000FAC                       ws2812_send@led 0015  
                     __CFG_XINST$OFF 000000                               ___lmul 0A6C  
                             ___wmul 0C14                       __CFG_STVREN$ON 000000  
                          ??___lldiv 001D                            ??___llmod 002A  
                   ?_TMR0_Initialize 0001                            ?_I2C2_ISR 0001  
                             clear_0 0B4E    I2C2_StatusCallback@slaveWriteType 0046  
                             _printf 0552                      _TMR5_StartTimer 0D48  
           ?_TMR5_HasOverflowOccured 0001                         __pdataCOMRAM 0048  
                          ??_isdigit 0015                      _request_pi_stop 0D52  
                       __mediumconst 3EEC                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0019                      ??_EUSART1_Write 0015  
              ?_OSCILLATOR_FastClock 0001        __size_of_INTERRUPT_Initialize 0004  
            __end_of_TMR5_Initialize 0C7E                    _SYSTEM_Initialize 0C3A  
                         __accesstop 0060              __end_of__initialization 0B58  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                     __pcstackCOMRAM 0001                         __pidataBANK0 0D4E  
                ??_SYSTEM_Initialize 0015                    _update_status_reg 0AC2  
                      __end_of_putch 0D48                           ??_I2C2_ISR 0002  
                 ?_update_status_reg 0001                  _I2C2_slaveWriteData 0048  
                ??_update_status_reg 0015                     ?_TMR0_StartTimer 0001  
          __end_of_SYSTEM_Initialize 0C5C                        ?_pi_supply_on 0001  
                            ??_putch 0016                           __pbssBANK0 0060  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 0043  
                 __CFG_CCP2MX$PORTC1 000000            __end_of_update_status_reg 0B16  
                            ?___lmul 0015                              ?___wmul 0015  
            __end_of_TMR5_StartTimer 0D4E                   __CFG_CCP3MX$PORTB5 000000  
    __end_of_TMR5_HasOverflowOccured 0D32              __end_of_request_pi_stop 0D56  
                     ___lmul@product 001D                              ?_printf 002B  
            __size_of_ADC_Initialize 0016                              _OSCCON2 000FD2  
             ??_OSCILLATOR_FastClock 0015                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                              _SSP2ADD 000F6E  
                     ??_pi_supply_on 0015                              _SSP2BUF 000F6F  
                            _SSP2MSK 000F6A         __size_of_I2C2_StatusCallback 007A  
                    _I2C2_Initialize 0C9C              _TMR0_HasOverflowOccured 0D32  
                   ?_TMR5_Initialize 0001                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                    __size_of___lmul 0056                              ___lldiv 08AC  
                    __size_of___wmul 0026                              ___llmod 09A8  
                            __pcinit 0B16                              __ramtop 0300  
            __size_of_request_pi_run 0004                              __ptext0 00AE  
                            __ptext1 0A0E                              __ptext2 0AC2  
                            __ptext3 0D52                              __ptext4 0D56  
                            __ptext5 0552                              __ptext6 0D3E  
                            __ptext7 0D1A                              __ptext8 0C7E  
                            __ptext9 0C14                      __size_of_printf 035A  
                          _T0CONbits 000FD5                    __end_of_hexpowers 3F35  
                            _dpowers 3EED                _OSCILLATOR_Initialize 0CFE  
                            _isdigit 0C7E                   _EUSART1_Initialize 0CD2  
           ??_PIN_MANAGER_Initialize 0015                            _T5CONbits 000F4E  
                         _reg_status 0073           __size_of_SYSTEM_Initialize 0022  
               end_of_initialization 0B58                  ?_EUSART1_Initialize 0001  
             __size_of_pi_supply_off 0004                        __Lmediumconst 3EEC  
                    ___lldiv@divisor 0019                      ___lldiv@counter 0021  
                      ??_ws2812_send 0019           __size_of_update_status_reg 0054  
                            printf@c 0041                              printf@f 002B  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                   ?_TMR5_StartTimer 0001                 ??_EUSART1_Initialize 0015  
                   ?_request_pi_stop 0001                           _prev_color 007D  
                          _PORTCbits 000F82                            _PORTDbits 000F83  
                  __size_of_I2C2_ISR 003E              __end_of_I2C2_Initialize 0CBA  
          ??_TMR0_HasOverflowOccured 0015                  EUSART1_Write@txData 0015  
   __size_of_TMR5_HasOverflowOccured 000C                          printf@width 003F  
               __end_of_pi_supply_on 0D5E         __end_of_INTERRUPT_Initialize 0D6A  
                     __end_of___lmul 0AC2                       __end_of___wmul 0C3A  
                      __pidataCOMRAM 0D6A                  __end_of_ws2812_send 0A6C  
                     _ADC_Initialize 0CE8                        _pi_supply_off 0D5E  
             ?_OSCILLATOR_Initialize 0001                       __end_of_printf 08AC  
   I2C2_StatusCallback@i2c_bus_state 0001                  start_initialization 0B16  
           __size_of_TMR0_Initialize 0018      __size_of_PIN_MANAGER_Initialize 0040  
                        putch@txData 0016                __end_of_EUSART1_Write 0D26  
                    ___llmod@divisor 0026                      ___llmod@counter 002A  
                           ??___lmul 001D                             ??___wmul 0019  
             __end_of_ADC_Initialize 0CFE                          __pdataBANK0 007D  
                _I2C2_StatusCallback 092E                       ?_pi_supply_off 0001  
                     _request_pi_run 0D56                             ??_printf 0031  
                        __pbssCOMRAM 0046                     ?_I2C2_Initialize 0001  
                      __pcstackBANK0 0074                         _isdigit$2002 0016  
               ?_I2C2_StatusCallback 0001             __size_of_TMR0_StartTimer 0004  
             _PIN_MANAGER_Initialize 0B66                          _ws2812_send 0A0E  
                          __pintcode 0008                        __pmediumconst 3EEC  
             __end_of_request_pi_run 0D5A                             ?___lldiv 0015  
                           ?___llmod 0022                      ?_ADC_Initialize 0001  
                    main@led_counter 007C                             _I2C2_ISR 0BA6  
       ??_INTERRUPT_InterruptManager 0003                     __CFG_PRICLKEN$ON 000000  
                          _led_color 0068                             _BAUDCON1 000FB8  
                           ?_isdigit 0001                            _meas_band 006E  
                          _meas_tune 0070                            _hexpowers 3F15  
              ??_I2C2_StatusCallback 0001        __size_of_OSCILLATOR_FastClock 000E  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 0D66  
            _TMR5_HasOverflowOccured 0D26                    ??_TMR0_Initialize 0015  
                     ___wmul@product 0019                             _LATCbits 000F8B  
                           _LATDbits 000F8C                             _PIE3bits 000FA3  
              __size_of_pi_supply_on 0004  __size_of_INTERRUPT_InterruptManager 00A2  
                           _PIR1bits 000F9E                             _PIR3bits 000FA4  
                           _PIR5bits 000F7E             __size_of_TMR5_Initialize 0022  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                    ??_pi_supply_off 0015                             _SSP2CON1 000F6C  
                           _SSP2CON2 000F6B                             _SSP2CON3 000F69  
                   I2C2_ISR@i2c_data 0002                      ?_request_pi_run 0001  
                           _SSP2STAT 000F6D                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0015                           printf@flag 003E  
                         printf@prec 0038                    ___lmul@multiplier 0015  
                        _INTCON2bits 000FF1                            copy_data0 0B2A  
                       _pi_supply_on 0D5A                ?_INTERRUPT_Initialize 0001  
                           __Hrparam 0000                         ws2812_send@j 001D  
                           __Lrparam 0000                    _ADC_GetConversion 0BE4  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0015                   ?_ADC_GetConversion 0015  
                  ??_TMR0_StartTimer 0015                     __size_of___lldiv 0082  
                   __size_of___llmod 0066          __size_of_EUSART1_Initialize 0016  
                ??_ADC_GetConversion 0017             __size_of_TMR5_StartTimer 0006  
                   __size_of_isdigit 001E             __size_of_request_pi_stop 0004  
          ??_TMR5_HasOverflowOccured 0015                             __ptext10 09A8  
                           __ptext11 08AC                             __ptext20 0CBA  
                           __ptext12 0D5A                             __ptext21 0D62  
                           __ptext13 0D5E                             __ptext22 0B66  
                           __ptext14 0A6C                             __ptext31 0BA6  
                           __ptext23 0CFE                             __ptext15 0D26  
                           __ptext32 092E                             __ptext24 0D66  
                           __ptext16 0D32                             __ptext25 0C9C  
                           __ptext17 0C3A                             __ptext26 0CD2  
                           __ptext18 0C5C                             __ptext27 0CE8  
                           __ptext19 0D48                             __ptext28 0D0C  
                           __ptext29 0BE4                         _SSP2CON1bits 000F6C  
                       _SSP2CON2bits 000F6B                             _meas_vol 006C  
                      __size_of_main 04A4                           _T5GCONbits 000F4D  
                           _pi_power 0060            __end_of_ADC_GetConversion 0C14  
                        _reg_control 0072                             int$flags 0049  
 __end_of_INTERRUPT_InterruptManager 00AA           _INTERRUPT_InterruptManager 0008  
                          printf@idx 0035                             main@pi3v 0074  
                           main@pi5v 0076                            printf@val 003A  
                       _SSP2STATbits 000F6D                    ??_TMR5_Initialize 0015  
           ?_TMR0_HasOverflowOccured 0001                           _INTCONbits 000FF2  
      I2C2_StatusCallback@RegAddress 0047                             isdigit@c 0017  
             ??_INTERRUPT_Initialize 0015                             intlevel2 0000  
                   ___lldiv@dividend 0015              ?_PIN_MANAGER_Initialize 0001  
                         _RCSTA1bits 000FAB                     ??_ADC_Initialize 0015  
                       ?_ws2812_send 0015                             printf@ap 0036  
             __size_of_EUSART1_Write 000C                     ___lldiv@quotient 001D  
                    _TMR0_Initialize 0CBA                    __CFG_T3CMX$PORTC0 000000  
                  ??_TMR5_StartTimer 0015       __end_of_PIN_MANAGER_Initialize 0BA6  
           __size_of_I2C2_Initialize 001E                    ??_request_pi_stop 0015  
                  __CFG_FOSC$INTIO67 000000                     ??_request_pi_run 0015  
         __size_of_ADC_GetConversion 0030  
