

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Nov 25 20:37:12 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F44K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	idataCOMRAM
    53  000E70                     __pidataCOMRAM:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _I2C2_slaveWriteData
    57  000E70  55                 	db	85
    58                           
    59                           	psect	idataBANK0
    60  000E68                     __pidataBANK0:
    61                           	opt stack 0
    62                           
    63                           ;initializer for _prev_color
    64  000E68  0001               	dw	1
    65  000E6A  0000               	dw	0
    66                           
    67                           	psect	mediumconst
    68  003EEC                     __pmediumconst:
    69                           	opt stack 0
    70  003EEC  00                 	db	0
    71  003EED                     _dpowers:
    72                           	opt stack 0
    73  003EED  0001               	dw	1
    74  003EEF  0000               	dw	0
    75  003EF1  000A               	dw	10
    76  003EF3  0000               	dw	0
    77  003EF5  0064               	dw	100
    78  003EF7  0000               	dw	0
    79  003EF9  03E8               	dw	1000
    80  003EFB  0000               	dw	0
    81  003EFD  2710               	dw	10000
    82  003EFF  0000               	dw	0
    83  003F01  86A0               	dw	34464
    84  003F03  0001               	dw	1
    85  003F05  4240               	dw	16960
    86  003F07  000F               	dw	15
    87  003F09  9680               	dw	38528
    88  003F0B  0098               	dw	152
    89  003F0D  E100               	dw	57600
    90  003F0F  05F5               	dw	1525
    91  003F11  CA00               	dw	51712
    92  003F13  3B9A               	dw	15258
    93  003F15                     __end_of_dpowers:
    94                           	opt stack 0
    95  003F15                     _hexpowers:
    96                           	opt stack 0
    97  003F15  0001               	dw	1
    98  003F17  0000               	dw	0
    99  003F19  0010               	dw	16
   100  003F1B  0000               	dw	0
   101  003F1D  0100               	dw	256
   102  003F1F  0000               	dw	0
   103  003F21  1000               	dw	4096
   104  003F23  0000               	dw	0
   105  003F25  0000               	dw	0
   106  003F27  0001               	dw	1
   107  003F29  0000               	dw	0
   108  003F2B  0010               	dw	16
   109  003F2D  0000               	dw	0
   110  003F2F  0100               	dw	256
   111  003F31  0000               	dw	0
   112  003F33  1000               	dw	4096
   113  003F35                     __end_of_hexpowers:
   114                           	opt stack 0
   115  003F35                     STR_14:
   116  003F35  30                 	db	48	;'0'
   117  003F36  31                 	db	49	;'1'
   118  003F37  32                 	db	50	;'2'
   119  003F38  33                 	db	51	;'3'
   120  003F39  34                 	db	52	;'4'
   121  003F3A  35                 	db	53	;'5'
   122  003F3B  36                 	db	54	;'6'
   123  003F3C  37                 	db	55	;'7'
   124  003F3D  38                 	db	56	;'8'
   125  003F3E  39                 	db	57	;'9'
   126  003F3F  41                 	db	65	;'A'
   127  003F40  42                 	db	66	;'B'
   128  003F41  43                 	db	67	;'C'
   129  003F42  44                 	db	68	;'D'
   130  003F43  45                 	db	69	;'E'
   131  003F44  46                 	db	70	;'F'
   132  003F45  00                 	db	0
   133  003F46                     STR_12:
   134  003F46  0A                 	db	10
   135  003F47  0A                 	db	10
   136  003F48  0D                 	db	13
   137  003F49  50                 	db	80	;'P'
   138  003F4A  69                 	db	105	;'i'
   139  003F4B  33                 	db	51	;'3'
   140  003F4C  56                 	db	86	;'V'
   141  003F4D  20                 	db	32
   142  003F4E  20                 	db	32
   143  003F4F  20                 	db	32
   144  003F50  20                 	db	32
   145  003F51  25                 	db	37
   146  003F52  75                 	db	117	;'u'
   147  003F53  20                 	db	32
   148  003F54  6D                 	db	109	;'m'
   149  003F55  56                 	db	86	;'V'
   150  003F56  00                 	db	0
   151  003F57                     STR_1:
   152  003F57  0A                 	db	10
   153  003F58  0A                 	db	10
   154  003F59  0D                 	db	13
   155  003F5A  4C                 	db	76	;'L'
   156  003F5B  45                 	db	69	;'E'
   157  003F5C  44                 	db	68	;'D'
   158  003F5D  20                 	db	32
   159  003F5E  20                 	db	32
   160  003F5F  20                 	db	32
   161  003F60  30                 	db	48	;'0'
   162  003F61  78                 	db	120	;'x'
   163  003F62  25                 	db	37
   164  003F63  30                 	db	48	;'0'
   165  003F64  38                 	db	56	;'8'
   166  003F65  6C                 	db	108	;'l'
   167  003F66  58                 	db	88	;'X'
   168  003F67  00                 	db	0
   169  003F68                     STR_13:
   170  003F68  0A                 	db	10
   171  003F69  0D                 	db	13
   172  003F6A  50                 	db	80	;'P'
   173  003F6B  69                 	db	105	;'i'
   174  003F6C  35                 	db	53	;'5'
   175  003F6D  56                 	db	86	;'V'
   176  003F6E  20                 	db	32
   177  003F6F  20                 	db	32
   178  003F70  20                 	db	32
   179  003F71  20                 	db	32
   180  003F72  25                 	db	37
   181  003F73  75                 	db	117	;'u'
   182  003F74  20                 	db	32
   183  003F75  6D                 	db	109	;'m'
   184  003F76  56                 	db	86	;'V'
   185  003F77  00                 	db	0
   186  003F78                     STR_3:
   187  003F78  0A                 	db	10
   188  003F79  0D                 	db	13
   189  003F7A  43                 	db	67	;'C'
   190  003F7B  54                 	db	84	;'T'
   191  003F7C  52                 	db	82	;'R'
   192  003F7D  4C                 	db	76	;'L'
   193  003F7E  20                 	db	32
   194  003F7F  20                 	db	32
   195  003F80  30                 	db	48	;'0'
   196  003F81  78                 	db	120	;'x'
   197  003F82  25                 	db	37
   198  003F83  30                 	db	48	;'0'
   199  003F84  32                 	db	50	;'2'
   200  003F85  58                 	db	88	;'X'
   201  003F86  00                 	db	0
   202  003F87                     STR_2:
   203  003F87  0A                 	db	10
   204  003F88  0D                 	db	13
   205  003F89  53                 	db	83	;'S'
   206  003F8A  54                 	db	84	;'T'
   207  003F8B  41                 	db	65	;'A'
   208  003F8C  54                 	db	84	;'T'
   209  003F8D  20                 	db	32
   210  003F8E  20                 	db	32
   211  003F8F  30                 	db	48	;'0'
   212  003F90  78                 	db	120	;'x'
   213  003F91  25                 	db	37
   214  003F92  30                 	db	48	;'0'
   215  003F93  32                 	db	50	;'2'
   216  003F94  58                 	db	88	;'X'
   217  003F95  00                 	db	0
   218  003F96                     STR_10:
   219  003F96  0A                 	db	10
   220  003F97  0D                 	db	13
   221  003F98  42                 	db	66	;'B'
   222  003F99  41                 	db	65	;'A'
   223  003F9A  4E                 	db	78	;'N'
   224  003F9B  44                 	db	68	;'D'
   225  003F9C  20                 	db	32
   226  003F9D  20                 	db	32
   227  003F9E  20                 	db	32
   228  003F9F  20                 	db	32
   229  003FA0  25                 	db	37
   230  003FA1  75                 	db	117	;'u'
   231  003FA2  00                 	db	0
   232  003FA3                     STR_9:
   233  003FA3  0A                 	db	10
   234  003FA4  0D                 	db	13
   235  003FA5  54                 	db	84	;'T'
   236  003FA6  55                 	db	85	;'U'
   237  003FA7  4E                 	db	78	;'N'
   238  003FA8  45                 	db	69	;'E'
   239  003FA9  20                 	db	32
   240  003FAA  20                 	db	32
   241  003FAB  20                 	db	32
   242  003FAC  20                 	db	32
   243  003FAD  25                 	db	37
   244  003FAE  75                 	db	117	;'u'
   245  003FAF  00                 	db	0
   246  003FB0                     STR_6:
   247  003FB0  0A                 	db	10
   248  003FB1  0D                 	db	13
   249  003FB2  53                 	db	83	;'S'
   250  003FB3  54                 	db	84	;'T'
   251  003FB4  41                 	db	65	;'A'
   252  003FB5  54                 	db	84	;'T'
   253  003FB6  45                 	db	69	;'E'
   254  003FB7  20                 	db	32
   255  003FB8  20                 	db	32
   256  003FB9  20                 	db	32
   257  003FBA  25                 	db	37
   258  003FBB  75                 	db	117	;'u'
   259  003FBC  00                 	db	0
   260  003FBD                     STR_7:
   261  003FBD  0A                 	db	10
   262  003FBE  0D                 	db	13
   263  003FBF  41                 	db	65	;'A'
   264  003FC0  43                 	db	67	;'C'
   265  003FC1  5F                 	db	95	;'_'
   266  003FC2  4F                 	db	79	;'O'
   267  003FC3  4E                 	db	78	;'N'
   268  003FC4  20                 	db	32
   269  003FC5  20                 	db	32
   270  003FC6  20                 	db	32
   271  003FC7  25                 	db	37
   272  003FC8  75                 	db	117	;'u'
   273  003FC9  00                 	db	0
   274  003FCA                     STR_11:
   275  003FCA  0A                 	db	10
   276  003FCB  0D                 	db	13
   277  003FCC  56                 	db	86	;'V'
   278  003FCD  4F                 	db	79	;'O'
   279  003FCE  4C                 	db	76	;'L'
   280  003FCF  55                 	db	85	;'U'
   281  003FD0  4D                 	db	77	;'M'
   282  003FD1  45                 	db	69	;'E'
   283  003FD2  20                 	db	32
   284  003FD3  20                 	db	32
   285  003FD4  25                 	db	37
   286  003FD5  75                 	db	117	;'u'
   287  003FD6  00                 	db	0
   288  003FD7                     STR_8:
   289  003FD7  0A                 	db	10
   290  003FD8  0D                 	db	13
   291  003FD9  50                 	db	80	;'P'
   292  003FDA  49                 	db	73	;'I'
   293  003FDB  5F                 	db	95	;'_'
   294  003FDC  52                 	db	82	;'R'
   295  003FDD  55                 	db	85	;'U'
   296  003FDE  4E                 	db	78	;'N'
   297  003FDF  20                 	db	32
   298  003FE0  20                 	db	32
   299  003FE1  25                 	db	37
   300  003FE2  75                 	db	117	;'u'
   301  003FE3  00                 	db	0
   302  003FE4                     STR_5:
   303  003FE4  0A                 	db	10
   304  003FE5  0D                 	db	13
   305  003FE6  53                 	db	83	;'S'
   306  003FE7  50                 	db	80	;'P'
   307  003FE8  5F                 	db	95	;'_'
   308  003FE9  43                 	db	67	;'C'
   309  003FEA  4E                 	db	78	;'N'
   310  003FEB  54                 	db	84	;'T'
   311  003FEC  20                 	db	32
   312  003FED  20                 	db	32
   313  003FEE  25                 	db	37
   314  003FEF  75                 	db	117	;'u'
   315  003FF0  00                 	db	0
   316  003FF1                     STR_4:
   317  003FF1  0A                 	db	10
   318  003FF2  0D                 	db	13
   319  003FF3  53                 	db	83	;'S'
   320  003FF4  54                 	db	84	;'T'
   321  003FF5  5F                 	db	95	;'_'
   322  003FF6  43                 	db	67	;'C'
   323  003FF7  4E                 	db	78	;'N'
   324  003FF8  54                 	db	84	;'T'
   325  003FF9  20                 	db	32
   326  003FFA  20                 	db	32
   327  003FFB  25                 	db	37
   328  003FFC  75                 	db	117	;'u'
   329  003FFD  00                 	db	0
   330                           
   331                           ; #config settings
   332  003FFE  00                 	db	0	; dummy byte at the end
   333  0000                     
   334                           	psect	nvCOMRAM
   335  000048                     __pnvCOMRAM:
   336                           	opt stack 0
   337  000048                     _timer0ReloadVal8bit:
   338                           	opt stack 0
   339  000048                     	ds	1
   340                           
   341                           	psect	nvBANK0
   342  00007A                     __pnvBANK0:
   343                           	opt stack 0
   344  00007A                     _timer5ReloadVal:
   345                           	opt stack 0
   346  00007A                     	ds	2
   347  0000                     _TMR5	set	3919
   348  0000                     _ANSELA	set	3896
   349  0000                     _ANSELB	set	3897
   350  0000                     _ANSELC	set	3898
   351  0000                     _ANSELD	set	3899
   352  0000                     _ANSELE	set	3900
   353  0000                     _T5CON	set	3918
   354  0000                     _T5CONbits	set	3918
   355  0000                     _T5GCON	set	3917
   356  0000                     _T5GCONbits	set	3917
   357  0000                     _TMR5H	set	3920
   358  0000                     _TMR5L	set	3919
   359  0000                     _ADCON0	set	4034
   360  0000                     _ADCON0bits	set	4034
   361  0000                     _ADCON1	set	4033
   362  0000                     _ADCON2	set	4032
   363  0000                     _ADRESH	set	4036
   364  0000                     _ADRESL	set	4035
   365  0000                     _BAUD1CON	set	4024
   366  0000                     _INTCON2bits	set	4081
   367  0000                     _INTCONbits	set	4082
   368  0000                     _IPR3bits	set	4005
   369  0000                     _LATA	set	3977
   370  0000                     _LATB	set	3978
   371  0000                     _LATC	set	3979
   372  0000                     _LATD	set	3980
   373  0000                     _LATE	set	3981
   374  0000                     _OSCCON	set	4051
   375  0000                     _OSCCON2	set	4050
   376  0000                     _OSCTUNE	set	3995
   377  0000                     _PIE3bits	set	4003
   378  0000                     _PIR1bits	set	3998
   379  0000                     _PIR3bits	set	4004
   380  0000                     _PIR5bits	set	3966
   381  0000                     _PORTCbits	set	3970
   382  0000                     _PORTDbits	set	3971
   383  0000                     _RC1STA	set	4011
   384  0000                     _RC1STAbits	set	4011
   385  0000                     _RCONbits	set	4048
   386  0000                     _RCREG1	set	4014
   387  0000                     _SPBRG1	set	4015
   388  0000                     _SPBRGH1	set	4016
   389  0000                     _SSP2ADD	set	3950
   390  0000                     _SSP2BUF	set	3951
   391  0000                     _SSP2CON1	set	3948
   392  0000                     _SSP2CON1bits	set	3948
   393  0000                     _SSP2CON2	set	3947
   394  0000                     _SSP2CON2bits	set	3947
   395  0000                     _SSP2CON3	set	3945
   396  0000                     _SSP2MSK	set	3946
   397  0000                     _SSP2STAT	set	3949
   398  0000                     _SSP2STATbits	set	3949
   399  0000                     _T0CON	set	4053
   400  0000                     _T0CONbits	set	4053
   401  0000                     _TMR0H	set	4055
   402  0000                     _TMR0L	set	4054
   403  0000                     _TRISA	set	3986
   404  0000                     _TRISB	set	3987
   405  0000                     _TRISC	set	3988
   406  0000                     _TRISD	set	3989
   407  0000                     _TRISE	set	3990
   408  0000                     _TX1STA	set	4012
   409  0000                     _TXREG1	set	4013
   410  0000                     _WPUB	set	3937
   411  0000                     _LATC0	set	31832
   412  0000                     _LATC2	set	31834
   413  0000                     _LATC4	set	31836
   414  0000                     _LATC5	set	31837
   415  0000                     _LATD2	set	31842
   416                           
   417                           	psect	cinit
   418  000C44                     __pcinit:
   419                           	opt stack 0
   420  000C44                     start_initialization:
   421                           	opt stack 0
   422  000C44                     __initialization:
   423                           	opt stack 0
   424                           
   425                           ; Clear objects allocated to COMRAM (22 bytes)
   426  000C44  EE00  F032         	lfsr	0,__pbssCOMRAM
   427  000C48  0E16               	movlw	22
   428  000C4A                     clear_0:
   429  000C4A  6AEE               	clrf	postinc0,c
   430  000C4C  06E8               	decf	wreg,f,c
   431  000C4E  E1FD               	bnz	clear_0
   432                           
   433                           ; Initialize objects allocated to BANK0 (4 bytes)
   434                           ; load TBLPTR registers with __pidataBANK0
   435  000C50  0E68               	movlw	low __pidataBANK0
   436  000C52  6EF6               	movwf	tblptrl,c
   437  000C54  0E0E               	movlw	high __pidataBANK0
   438  000C56  6EF7               	movwf	tblptrh,c
   439  000C58  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   440  000C5A  6EF8               	movwf	tblptru,c
   441  000C5C  EE00  F076         	lfsr	0,__pdataBANK0
   442  000C60  EE10 F004          	lfsr	1,4
   443  000C64                     copy_data0:
   444  000C64  0009               	tblrd		*+
   445  000C66  CFF5 FFEE          	movff	tablat,postinc0
   446  000C6A  50E5               	movf	postdec1,w,c
   447  000C6C  50E1               	movf	fsr1l,w,c
   448  000C6E  E1FA               	bnz	copy_data0
   449                           
   450                           ; Initialize objects allocated to COMRAM (1 bytes)
   451                           ; load TBLPTR registers with __pidataCOMRAM
   452  000C70  0E70               	movlw	low __pidataCOMRAM
   453  000C72  6EF6               	movwf	tblptrl,c
   454  000C74  0E0E               	movlw	high __pidataCOMRAM
   455  000C76  6EF7               	movwf	tblptrh,c
   456  000C78  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   457  000C7A  6EF8               	movwf	tblptru,c
   458  000C7C  0009               	tblrd		*+	;fetch initializer
   459  000C7E  CFF5 F049          	movff	tablat,__pdataCOMRAM
   460  000C82                     end_of_initialization:
   461                           	opt stack 0
   462  000C82                     __end_of__initialization:
   463                           	opt stack 0
   464  000C82  0E00               	movlw	low (__Lmediumconst shr (0+16))
   465  000C84  6EF8               	movwf	tblptru,c
   466  000C86  0100               	movlb	0
   467  000C88  EF45  F000         	goto	_main	;jump to C main() function
   468                           tblptru	equ	0xFF8
   469                           tblptrh	equ	0xFF7
   470                           tblptrl	equ	0xFF6
   471                           tablat	equ	0xFF5
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           postdec1	equ	0xFE5
   475                           fsr1l	equ	0xFE1
   476                           
   477                           	psect	bssCOMRAM
   478  000032                     __pbssCOMRAM:
   479                           	opt stack 0
   480  000032                     _pi_power:
   481                           	opt stack 0
   482  000032                     	ds	8
   483  00003A                     _led_color:
   484                           	opt stack 0
   485  00003A                     	ds	4
   486  00003E                     _meas_band:
   487                           	opt stack 0
   488  00003E                     	ds	2
   489  000040                     _meas_tune:
   490                           	opt stack 0
   491  000040                     	ds	2
   492  000042                     _meas_vol:
   493                           	opt stack 0
   494  000042                     	ds	2
   495  000044                     I2C2_StatusCallback@RegAddress:
   496                           	opt stack 0
   497  000044                     	ds	1
   498  000045                     I2C2_StatusCallback@slaveWriteType:
   499                           	opt stack 0
   500  000045                     	ds	1
   501  000046                     _reg_control:
   502                           	opt stack 0
   503  000046                     	ds	1
   504  000047                     _reg_status:
   505                           	opt stack 0
   506  000047                     	ds	1
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           postdec1	equ	0xFE5
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	dataCOMRAM
   517  000049                     __pdataCOMRAM:
   518                           	opt stack 0
   519  000049                     _I2C2_slaveWriteData:
   520                           	opt stack 0
   521  000049                     	ds	1
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           postdec1	equ	0xFE5
   529                           fsr1l	equ	0xFE1
   530                           
   531                           	psect	dataBANK0
   532  000076                     __pdataBANK0:
   533                           	opt stack 0
   534  000076                     _prev_color:
   535                           	opt stack 0
   536  000076                     	ds	4
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec1	equ	0xFE5
   544                           fsr1l	equ	0xFE1
   545                           
   546                           	psect	cstackBANK0
   547  000060                     __pcstackBANK0:
   548                           	opt stack 0
   549  000060                     printf@idx:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x0
   553  000060                     	ds	1
   554  000061                     printf@ap:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x1
   558  000061                     	ds	2
   559  000063                     printf@prec:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x3
   563  000063                     	ds	2
   564  000065                     printf@val:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0x5
   568  000065                     	ds	4
   569  000069                     printf@flag:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x9
   573  000069                     	ds	1
   574  00006A                     printf@width:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0xA
   578  00006A                     	ds	2
   579  00006C                     printf@c:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0xC
   583  00006C                     	ds	1
   584  00006D                     main@pi3v:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xD
   588  00006D                     	ds	2
   589  00006F                     main@pi5v:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0xF
   593  00006F                     	ds	2
   594  000071                     main@meas_pi5v:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x11
   598  000071                     	ds	2
   599  000073                     main@meas_pi3v:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x13
   603  000073                     	ds	2
   604  000075                     main@led_counter:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x15
   608  000075                     	ds	1
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1l	equ	0xFE1
   617                           
   618                           	psect	cstackCOMRAM
   619  000001                     __pcstackCOMRAM:
   620                           	opt stack 0
   621  000001                     I2C2_StatusCallback@i2c_bus_state:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x0
   625  000001                     	ds	1
   626  000002                     I2C2_ISR@i2c_data:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x1
   630  000002                     	ds	1
   631  000003                     ??_INTERRUPT_InterruptManager:
   632                           
   633                           ; 0 bytes @ 0x2
   634  000003                     	ds	14
   635  000011                     ??_update_status_reg:
   636  000011                     ??_isdigit:
   637  000011                     ?_ADC_GetConversion:
   638                           	opt stack 0
   639  000011                     ?___wmul:
   640                           	opt stack 0
   641  000011                     ?___lmul:
   642                           	opt stack 0
   643  000011                     ?___lldiv:
   644                           	opt stack 0
   645  000011                     EUSART1_Write@txData:
   646                           	opt stack 0
   647  000011                     ___wmul@multiplier:
   648                           	opt stack 0
   649  000011                     ws2812_send@led:
   650                           	opt stack 0
   651  000011                     ___lmul@multiplier:
   652                           	opt stack 0
   653  000011                     ___lldiv@dividend:
   654                           	opt stack 0
   655                           
   656                           ; 4 bytes @ 0x10
   657  000011                     	ds	1
   658  000012                     putch@txData:
   659                           	opt stack 0
   660  000012                     _isdigit$2180:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x11
   664  000012                     	ds	1
   665  000013                     ??_ADC_GetConversion:
   666  000013                     isdigit@c:
   667                           	opt stack 0
   668  000013                     ___wmul@multiplicand:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x12
   672  000013                     	ds	2
   673  000015                     ??_ws2812_send:
   674  000015                     ADC_GetConversion@channel:
   675                           	opt stack 0
   676  000015                     ___wmul@product:
   677                           	opt stack 0
   678  000015                     ___lmul@multiplicand:
   679                           	opt stack 0
   680  000015                     ___lldiv@divisor:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x14
   684  000015                     	ds	4
   685  000019                     ws2812_send@j:
   686                           	opt stack 0
   687  000019                     ___lmul@product:
   688                           	opt stack 0
   689  000019                     ___lldiv@quotient:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x18
   693  000019                     	ds	4
   694  00001D                     ___lldiv@counter:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x1C
   698  00001D                     	ds	1
   699  00001E                     ?___llmod:
   700                           	opt stack 0
   701  00001E                     ___llmod@dividend:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0x1D
   705  00001E                     	ds	4
   706  000022                     ___llmod@divisor:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x21
   710  000022                     	ds	4
   711  000026                     ___llmod@counter:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x25
   715  000026                     	ds	1
   716  000027                     ?_printf:
   717                           	opt stack 0
   718  000027                     printf@f:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x26
   722  000027                     	ds	6
   723  00002D                     ??_printf:
   724                           
   725                           ; 0 bytes @ 0x2C
   726  00002D                     	ds	4
   727  000031                     ??_main:
   728                           
   729                           ; 0 bytes @ 0x30
   730  000031                     	ds	1
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           postinc0	equ	0xFEE
   736                           wreg	equ	0xFE8
   737                           postdec1	equ	0xFE5
   738                           fsr1l	equ	0xFE1
   739                           
   740 ;;
   741 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   742 ;;
   743 ;; *************** function _main *****************
   744 ;; Defined at:
   745 ;;		line 65 in file "main.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  meas_pi3v       2   19[BANK0 ] unsigned int 
   750 ;;  meas_pi5v       2   17[BANK0 ] unsigned int 
   751 ;;  pi5v            2   15[BANK0 ] unsigned int 
   752 ;;  pi3v            2   13[BANK0 ] unsigned int 
   753 ;;  led_counter     1   21[BANK0 ] unsigned char 
   754 ;; Return value:  Size  Location     Type
   755 ;;		None               void
   756 ;; Registers used:
   757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   763 ;;      Params:         0       0       0       0
   764 ;;      Locals:         0       9       0       0
   765 ;;      Temps:          1       0       0       0
   766 ;;      Totals:         1       9       0       0
   767 ;;Total ram usage:       10 bytes
   768 ;; Hardware stack levels required when called:    6
   769 ;; This function calls:
   770 ;;		_ADC_GetConversion
   771 ;;		_ADC_Initialize
   772 ;;		_OSCILLATOR_FastClock
   773 ;;		_OSCILLATOR_Initialize
   774 ;;		_PIN_MANAGER_Initialize
   775 ;;		_SYSTEM_Initialize
   776 ;;		_TMR0_HasOverflowOccured
   777 ;;		_TMR0_Initialize
   778 ;;		_TMR5_HasOverflowOccured
   779 ;;		_TMR5_Initialize
   780 ;;		___lmul
   781 ;;		_pi_supply_off
   782 ;;		_pi_supply_on
   783 ;;		_printf
   784 ;;		_request_pi_run
   785 ;;		_request_pi_stop
   786 ;;		_update_status_reg
   787 ;;		_ws2812_send
   788 ;; This function is called by:
   789 ;;		Startup code after reset
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text0
   794  00008A                     __ptext0:
   795                           	opt stack 0
   796  00008A                     _main:
   797                           	opt stack 25
   798                           
   799                           ;main.c: 67: uint16_t meas_pi5v = 0;
   800                           
   801                           ;incstack = 0
   802  00008A  0E00               	movlw	0
   803  00008C  0100               	movlb	0	; () banked
   804  00008E  6F72               	movwf	(main@meas_pi5v+1)& (0+255),b
   805  000090  0E00               	movlw	0
   806  000092  6F71               	movwf	main@meas_pi5v& (0+255),b
   807                           
   808                           ;main.c: 68: uint16_t meas_pi3v = 0;
   809  000094  0E00               	movlw	0
   810  000096  0100               	movlb	0	; () banked
   811  000098  6F74               	movwf	(main@meas_pi3v+1)& (0+255),b
   812  00009A  0E00               	movlw	0
   813  00009C  6F73               	movwf	main@meas_pi3v& (0+255),b
   814                           
   815                           ;main.c: 69: uint16_t pi3v;
   816                           ;main.c: 70: uint16_t pi5v;
   817                           ;main.c: 71: uint8_t led_counter = 0;
   818  00009E  0E00               	movlw	0
   819  0000A0  0100               	movlb	0	; () banked
   820  0000A2  6F75               	movwf	main@led_counter& (0+255),b
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 74: SYSTEM_Initialize();
   824  0000A4  ECB9  F006         	call	_SYSTEM_Initialize	;wreg free
   825                           
   826                           ;main.c: 77: pi_power.state = RESET;
   827  0000A8  0E00               	movlw	0
   828  0000AA  6E32               	movwf	_pi_power,c
   829                           
   830                           ;main.c: 80: led_counter = 0;
   831  0000AC  0E00               	movlw	0
   832  0000AE  0100               	movlb	0	; () banked
   833  0000B0  6F75               	movwf	main@led_counter& (0+255),b
   834  0000B2  D000               	goto	l2512
   835  0000B4                     l2512:
   836                           
   837                           ;main.c: 84: {
   838                           ;main.c: 86: OSCILLATOR_Initialize();
   839  0000B4  EC0F  F007         	call	_OSCILLATOR_Initialize	;wreg free
   840                           
   841                           ;main.c: 89: TMR5_Initialize();
   842  0000B8  EC94  F006         	call	_TMR5_Initialize	;wreg free
   843                           
   844                           ;main.c: 96: TMR0_Initialize();
   845  0000BC  ECD9  F006         	call	_TMR0_Initialize	;wreg free
   846                           
   847                           ;main.c: 99: pi_power.count += 1;
   848  0000C0  4A34               	infsnz	_pi_power+2,f,c
   849  0000C2  2A35               	incf	_pi_power+3,f,c
   850                           
   851                           ;main.c: 100: if (pi_power.count == 0)
   852  0000C4  5034               	movf	_pi_power+2,w,c
   853  0000C6  1035               	iorwf	_pi_power+3,w,c
   854  0000C8  A4D8               	btfss	status,2,c
   855  0000CA  D004               	goto	l2524
   856                           
   857                           ;main.c: 101: pi_power.count -= 1;
   858  0000CC  0634               	decf	_pi_power+2,f,c
   859  0000CE  A0D8               	btfss	status,0,c
   860  0000D0  0635               	decf	_pi_power+3,f,c
   861  0000D2  D000               	goto	l2524
   862  0000D4                     l2524:
   863                           
   864                           ;main.c: 104: pi_power.running = (PORTDbits.RD3 == 0);
   865  0000D4  B683               	btfsc	3971,3,c	;volatile
   866  0000D6  D002               	goto	u1970
   867  0000D8  0E01               	movlw	1
   868  0000DA  D001               	goto	u1980
   869  0000DC                     u1970:
   870  0000DC  0E00               	movlw	0
   871  0000DE                     u1980:
   872  0000DE  6E38               	movwf	_pi_power+6,c
   873                           
   874                           ;main.c: 107: if (pi_power.running == (0))
   875  0000E0  5038               	movf	_pi_power+6,w,c
   876  0000E2  A4D8               	btfss	status,2,c
   877  0000E4  D00A               	goto	l2534
   878                           
   879                           ;main.c: 108: {
   880                           ;main.c: 109: pi_power.stopped_count += 1;
   881  0000E6  4A36               	infsnz	_pi_power+4,f,c
   882  0000E8  2A37               	incf	_pi_power+5,f,c
   883                           
   884                           ;main.c: 110: if (pi_power.stopped_count == 0)
   885  0000EA  5036               	movf	_pi_power+4,w,c
   886  0000EC  1037               	iorwf	_pi_power+5,w,c
   887  0000EE  A4D8               	btfss	status,2,c
   888  0000F0  D009               	goto	l2536
   889                           
   890                           ;main.c: 111: pi_power.stopped_count -= 1;
   891  0000F2  0636               	decf	_pi_power+4,f,c
   892  0000F4  A0D8               	btfss	status,0,c
   893  0000F6  0637               	decf	_pi_power+5,f,c
   894                           
   895                           ;main.c: 112: }
   896  0000F8  D005               	goto	l2536
   897  0000FA                     l2534:
   898                           
   899                           ;main.c: 113: else
   900                           ;main.c: 114: pi_power.stopped_count = 0;
   901  0000FA  0E00               	movlw	0
   902  0000FC  6E37               	movwf	_pi_power+5,c
   903  0000FE  0E00               	movlw	0
   904  000100  6E36               	movwf	_pi_power+4,c
   905  000102  D000               	goto	l2536
   906  000104                     l2536:
   907                           
   908                           ;main.c: 127: if (STANDBY == pi_power.state)
   909  000104  0432               	decf	_pi_power,w,c
   910  000106  A4D8               	btfss	status,2,c
   911  000108  D021               	goto	l2550
   912                           
   913                           ;main.c: 128: {
   914                           ;main.c: 130: if (pi_power.prev != STANDBY)
   915  00010A  0433               	decf	_pi_power+1,w,c
   916  00010C  B4D8               	btfsc	status,2,c
   917  00010E  D00B               	goto	l2542
   918                           
   919                           ;main.c: 131: {
   920                           ;main.c: 132: pi_power.count = 0;
   921  000110  0E00               	movlw	0
   922  000112  6E35               	movwf	_pi_power+3,c
   923  000114  0E00               	movlw	0
   924  000116  6E34               	movwf	_pi_power+2,c
   925                           
   926                           ;main.c: 133: pi_power.stopped_count = 0;
   927  000118  0E00               	movlw	0
   928  00011A  6E37               	movwf	_pi_power+5,c
   929  00011C  0E00               	movlw	0
   930  00011E  6E36               	movwf	_pi_power+4,c
   931                           
   932                           ;main.c: 134: pi_power.prev = STANDBY;
   933  000120  0E01               	movlw	1
   934  000122  6E33               	movwf	_pi_power+1,c
   935  000124  D000               	goto	l2542
   936  000126                     l2542:
   937                           
   938                           ;main.c: 135: }
   939                           ;main.c: 138: pi_supply_off();
   940  000126  EC2B  F007         	call	_pi_supply_off	;wreg free
   941                           
   942                           ;main.c: 141: request_pi_stop();
   943  00012A  EC22  F007         	call	_request_pi_stop	;wreg free
   944                           
   945                           ;main.c: 144: led_color = (0);
   946  00012E  0E00               	movlw	0
   947  000130  6E3A               	movwf	_led_color,c
   948  000132  0E00               	movlw	0
   949  000134  6E3B               	movwf	_led_color+1,c
   950  000136  0E00               	movlw	0
   951  000138  6E3C               	movwf	_led_color+2,c
   952  00013A  0E00               	movlw	0
   953  00013C  6E3D               	movwf	_led_color+3,c
   954                           
   955                           ;main.c: 151: if (pi_power.power_switch)
   956  00013E  5039               	movf	_pi_power+7,w,c
   957  000140  B4D8               	btfsc	status,2,c
   958  000142  D072               	goto	u2140
   959                           
   960                           ;main.c: 152: pi_power.state = BOOTING;
   961  000144  0E02               	movlw	2
   962  000146  D071               	goto	L4
   963  000148  D06F               	goto	u2140
   964                           
   965                           ;main.c: 156: }
   966                           
   967                           ;main.c: 153: else
   968                           ;main.c: 154: pi_power.state = STANDBY;
   969  00014A  D0D1               	goto	l2636
   970  00014C                     l2550:
   971                           
   972                           ;main.c: 164: else if (BOOTING == pi_power.state)
   973  00014C  0E02               	movlw	2
   974  00014E  1832               	xorwf	_pi_power,w,c
   975  000150  A4D8               	btfss	status,2,c
   976  000152  D022               	goto	l2566
   977                           
   978                           ;main.c: 165: {
   979                           ;main.c: 167: if (pi_power.prev != BOOTING)
   980  000154  0E02               	movlw	2
   981  000156  1833               	xorwf	_pi_power+1,w,c
   982  000158  B4D8               	btfsc	status,2,c
   983  00015A  D006               	goto	l373
   984                           
   985                           ;main.c: 168: {
   986                           ;main.c: 169: pi_power.count = 0;
   987  00015C  0E00               	movlw	0
   988  00015E  6E35               	movwf	_pi_power+3,c
   989  000160  0E00               	movlw	0
   990  000162  6E34               	movwf	_pi_power+2,c
   991                           
   992                           ;main.c: 170: pi_power.prev = BOOTING;
   993  000164  0E02               	movlw	2
   994  000166  6E33               	movwf	_pi_power+1,c
   995  000168                     l373:
   996                           
   997                           ;main.c: 171: }
   998                           ;main.c: 174: led_color = (0x0000c8e4);
   999  000168  0EE4               	movlw	228
  1000  00016A  6E3A               	movwf	_led_color,c
  1001  00016C  0EC8               	movlw	200
  1002  00016E  6E3B               	movwf	_led_color+1,c
  1003  000170  0E00               	movlw	0
  1004  000172  6E3C               	movwf	_led_color+2,c
  1005  000174  0E00               	movlw	0
  1006  000176  6E3D               	movwf	_led_color+3,c
  1007                           
  1008                           ;main.c: 177: pi_supply_on();
  1009  000178  EC28  F007         	call	_pi_supply_on	;wreg free
  1010                           
  1011                           ;main.c: 180: request_pi_run();
  1012  00017C  EC25  F007         	call	_request_pi_run	;wreg free
  1013                           
  1014                           ;main.c: 184: if (pi_power.power_switch == (0))
  1015  000180  5039               	movf	_pi_power+7,w,c
  1016  000182  A4D8               	btfss	status,2,c
  1017  000184  D003               	goto	l2562
  1018                           
  1019                           ;main.c: 185: pi_power.state = STANDBY;
  1020  000186  0E01               	movlw	1
  1021  000188  6E32               	movwf	_pi_power,c
  1022  00018A  D000               	goto	l2562
  1023  00018C                     l2562:
  1024                           
  1025                           ;main.c: 189: if (pi_power.running == (1))
  1026  00018C  0438               	decf	_pi_power+6,w,c
  1027  00018E  A4D8               	btfss	status,2,c
  1028  000190  D0AE               	goto	l2636
  1029                           
  1030                           ;main.c: 190: pi_power.state = OPERATE;
  1031  000192  0E03               	movlw	3
  1032  000194  D04A               	goto	L4
  1033                           
  1034                           ;main.c: 192: }
  1035  000196  D0AB               	goto	l2636
  1036  000198                     l2566:
  1037                           
  1038                           ;main.c: 203: else if (OPERATE == pi_power.state)
  1039  000198  0E03               	movlw	3
  1040  00019A  1832               	xorwf	_pi_power,w,c
  1041  00019C  A4D8               	btfss	status,2,c
  1042  00019E  D024               	goto	l2584
  1043                           
  1044                           ;main.c: 204: {
  1045                           ;main.c: 206: if (pi_power.prev != OPERATE)
  1046  0001A0  0E03               	movlw	3
  1047  0001A2  1833               	xorwf	_pi_power+1,w,c
  1048  0001A4  B4D8               	btfsc	status,2,c
  1049  0001A6  D006               	goto	l378
  1050                           
  1051                           ;main.c: 207: {
  1052                           ;main.c: 208: pi_power.count = 0;
  1053  0001A8  0E00               	movlw	0
  1054  0001AA  6E35               	movwf	_pi_power+3,c
  1055  0001AC  0E00               	movlw	0
  1056  0001AE  6E34               	movwf	_pi_power+2,c
  1057                           
  1058                           ;main.c: 209: pi_power.prev = OPERATE;
  1059  0001B0  0E03               	movlw	3
  1060  0001B2  6E33               	movwf	_pi_power+1,c
  1061  0001B4                     l378:
  1062                           
  1063                           ;main.c: 210: }
  1064                           ;main.c: 213: led_color = (0x00f8f8f8);
  1065  0001B4  0EF8               	movlw	248
  1066  0001B6  6E3A               	movwf	_led_color,c
  1067  0001B8  0EF8               	movlw	248
  1068  0001BA  6E3B               	movwf	_led_color+1,c
  1069  0001BC  0EF8               	movlw	248
  1070  0001BE  6E3C               	movwf	_led_color+2,c
  1071  0001C0  0E00               	movlw	0
  1072  0001C2  6E3D               	movwf	_led_color+3,c
  1073                           
  1074                           ;main.c: 216: pi_supply_on();
  1075  0001C4  EC28  F007         	call	_pi_supply_on	;wreg free
  1076                           
  1077                           ;main.c: 219: request_pi_run();
  1078  0001C8  EC25  F007         	call	_request_pi_run	;wreg free
  1079                           
  1080                           ;main.c: 224: if (pi_power.power_switch == 0)
  1081  0001CC  5039               	movf	_pi_power+7,w,c
  1082  0001CE  A4D8               	btfss	status,2,c
  1083  0001D0  D005               	goto	l2580
  1084                           
  1085                           ;main.c: 225: {
  1086                           ;main.c: 226: request_pi_stop();
  1087  0001D2  EC22  F007         	call	_request_pi_stop	;wreg free
  1088                           
  1089                           ;main.c: 227: pi_power.state = SHUTDOWN;
  1090  0001D6  0E04               	movlw	4
  1091  0001D8  6E32               	movwf	_pi_power,c
  1092  0001DA  D000               	goto	l2580
  1093  0001DC                     l2580:
  1094                           
  1095                           ;main.c: 228: }
  1096                           ;main.c: 233: if (pi_power.running == (0))
  1097  0001DC  5038               	movf	_pi_power+6,w,c
  1098  0001DE  A4D8               	btfss	status,2,c
  1099  0001E0  D086               	goto	l2636
  1100                           
  1101                           ;main.c: 234: {
  1102                           ;main.c: 235: pi_power.state = PI_CONTROL;
  1103  0001E2  0E05               	movlw	5
  1104  0001E4  D022               	goto	L4
  1105                           
  1106                           ;main.c: 236: }
  1107                           ;main.c: 238: }
  1108  0001E6  D083               	goto	l2636
  1109  0001E8                     l2584:
  1110                           
  1111                           ;main.c: 247: else if (SHUTDOWN == pi_power.state)
  1112  0001E8  0E04               	movlw	4
  1113  0001EA  1832               	xorwf	_pi_power,w,c
  1114  0001EC  A4D8               	btfss	status,2,c
  1115  0001EE  D01F               	goto	l2598
  1116                           
  1117                           ;main.c: 248: {
  1118                           ;main.c: 250: if (pi_power.prev != SHUTDOWN)
  1119  0001F0  0E04               	movlw	4
  1120  0001F2  1833               	xorwf	_pi_power+1,w,c
  1121  0001F4  B4D8               	btfsc	status,2,c
  1122  0001F6  D006               	goto	l383
  1123                           
  1124                           ;main.c: 251: {
  1125                           ;main.c: 252: pi_power.count = 0;
  1126  0001F8  0E00               	movlw	0
  1127  0001FA  6E35               	movwf	_pi_power+3,c
  1128  0001FC  0E00               	movlw	0
  1129  0001FE  6E34               	movwf	_pi_power+2,c
  1130                           
  1131                           ;main.c: 253: pi_power.prev = SHUTDOWN;
  1132  000200  0E04               	movlw	4
  1133  000202  6E33               	movwf	_pi_power+1,c
  1134  000204                     l383:
  1135                           
  1136                           ;main.c: 254: }
  1137                           ;main.c: 257: led_color = (0x000000fc);
  1138  000204  0EFC               	movlw	252
  1139  000206  6E3A               	movwf	_led_color,c
  1140  000208  0E00               	movlw	0
  1141  00020A  6E3B               	movwf	_led_color+1,c
  1142  00020C  0E00               	movlw	0
  1143  00020E  6E3C               	movwf	_led_color+2,c
  1144  000210  0E00               	movlw	0
  1145  000212  6E3D               	movwf	_led_color+3,c
  1146                           
  1147                           ;main.c: 260: pi_supply_on();
  1148  000214  EC28  F007         	call	_pi_supply_on	;wreg free
  1149                           
  1150                           ;main.c: 263: request_pi_stop();
  1151  000218  EC22  F007         	call	_request_pi_stop	;wreg free
  1152                           
  1153                           ;main.c: 267: if (pi_power.stopped_count > (100u))
  1154  00021C  5037               	movf	_pi_power+5,w,c
  1155  00021E  E104               	bnz	u2140
  1156  000220  0E65               	movlw	101
  1157  000222  5C36               	subwf	_pi_power+4,w,c
  1158  000224  A0D8               	btfss	status,0,c
  1159  000226  D063               	goto	l2636
  1160  000228                     u2140:
  1161                           
  1162                           ;main.c: 268: pi_power.state = STANDBY;
  1163  000228  0E01               	movlw	1
  1164  00022A                     L4:
  1165  00022A  6E32               	movwf	_pi_power,c
  1166                           
  1167                           ;main.c: 270: }
  1168  00022C  D060               	goto	l2636
  1169  00022E                     l2598:
  1170                           
  1171                           ;main.c: 277: else if (PI_CONTROL == pi_power.state)
  1172  00022E  0E05               	movlw	5
  1173  000230  1832               	xorwf	_pi_power,w,c
  1174  000232  A4D8               	btfss	status,2,c
  1175  000234  D02C               	goto	l2618
  1176                           
  1177                           ;main.c: 278: {
  1178                           ;main.c: 280: if (pi_power.prev != PI_CONTROL)
  1179  000236  0E05               	movlw	5
  1180  000238  1833               	xorwf	_pi_power+1,w,c
  1181  00023A  B4D8               	btfsc	status,2,c
  1182  00023C  D006               	goto	l387
  1183                           
  1184                           ;main.c: 281: {
  1185                           ;main.c: 282: pi_power.count = 0;
  1186  00023E  0E00               	movlw	0
  1187  000240  6E35               	movwf	_pi_power+3,c
  1188  000242  0E00               	movlw	0
  1189  000244  6E34               	movwf	_pi_power+2,c
  1190                           
  1191                           ;main.c: 283: pi_power.prev = PI_CONTROL;
  1192  000246  0E05               	movlw	5
  1193  000248  6E33               	movwf	_pi_power+1,c
  1194  00024A                     l387:
  1195                           
  1196                           ;main.c: 284: }
  1197                           ;main.c: 287: led_color = (0x00f800f0);
  1198  00024A  0EF0               	movlw	240
  1199  00024C  6E3A               	movwf	_led_color,c
  1200  00024E  0E00               	movlw	0
  1201  000250  6E3B               	movwf	_led_color+1,c
  1202  000252  0EF8               	movlw	248
  1203  000254  6E3C               	movwf	_led_color+2,c
  1204  000256  0E00               	movlw	0
  1205  000258  6E3D               	movwf	_led_color+3,c
  1206                           
  1207                           ;main.c: 290: pi_supply_on();
  1208  00025A  EC28  F007         	call	_pi_supply_on	;wreg free
  1209                           
  1210                           ;main.c: 292: if ((pi_power.count < (200u)) && (pi_power.running))
  1211  00025E  5035               	movf	_pi_power+3,w,c
  1212  000260  E10A               	bnz	l2612
  1213  000262  0EC8               	movlw	200
  1214  000264  5C34               	subwf	_pi_power+2,w,c
  1215  000266  B0D8               	btfsc	status,0,c
  1216  000268  D006               	goto	l2612
  1217  00026A  5038               	movf	_pi_power+6,w,c
  1218  00026C  B4D8               	btfsc	status,2,c
  1219  00026E  D003               	goto	l2612
  1220                           
  1221                           ;main.c: 293: pi_power.state = OPERATE;
  1222  000270  0E03               	movlw	3
  1223  000272  6E32               	movwf	_pi_power,c
  1224  000274  D000               	goto	l2612
  1225  000276                     l2612:
  1226                           
  1227                           ;main.c: 295: if ((pi_power.count > (200u)) && (pi_power.running == (0)))
  1228  000276  5035               	movf	_pi_power+3,w,c
  1229  000278  E104               	bnz	u2190
  1230  00027A  0EC9               	movlw	201
  1231  00027C  5C34               	subwf	_pi_power+2,w,c
  1232  00027E  A0D8               	btfss	status,0,c
  1233  000280  D036               	goto	l2636
  1234  000282                     u2190:
  1235  000282  5038               	movf	_pi_power+6,w,c
  1236  000284  A4D8               	btfss	status,2,c
  1237  000286  D033               	goto	l2636
  1238                           
  1239                           ;main.c: 296: pi_power.state = STANDBY;
  1240  000288  0E01               	movlw	1
  1241  00028A  6E32               	movwf	_pi_power,c
  1242                           
  1243                           ;main.c: 298: }
  1244  00028C  D030               	goto	l2636
  1245  00028E                     l2618:
  1246                           
  1247                           ;main.c: 305: else if (RESET == pi_power.state)
  1248  00028E  5032               	movf	_pi_power,w,c
  1249  000290  A4D8               	btfss	status,2,c
  1250  000292  D02D               	goto	l2636
  1251                           
  1252                           ;main.c: 306: {
  1253                           ;main.c: 307: pi_power.state = STANDBY;
  1254  000294  0E01               	movlw	1
  1255  000296  6E32               	movwf	_pi_power,c
  1256                           
  1257                           ;main.c: 308: pi_power.prev = RESET;
  1258  000298  0E00               	movlw	0
  1259  00029A  6E33               	movwf	_pi_power+1,c
  1260                           
  1261                           ;main.c: 309: pi_power.count = 0;
  1262  00029C  0E00               	movlw	0
  1263  00029E  6E35               	movwf	_pi_power+3,c
  1264  0002A0  0E00               	movlw	0
  1265  0002A2  6E34               	movwf	_pi_power+2,c
  1266                           
  1267                           ;main.c: 310: pi_power.stopped_count = 0;
  1268  0002A4  0E00               	movlw	0
  1269  0002A6  6E37               	movwf	_pi_power+5,c
  1270  0002A8  0E00               	movlw	0
  1271  0002AA  6E36               	movwf	_pi_power+4,c
  1272                           
  1273                           ;main.c: 313: PIN_MANAGER_Initialize();
  1274  0002AC  ECFD  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  1275                           
  1276                           ;main.c: 315: led_color = (0x00f80000);
  1277  0002B0  0E00               	movlw	0
  1278  0002B2  6E3A               	movwf	_led_color,c
  1279  0002B4  0E00               	movlw	0
  1280  0002B6  6E3B               	movwf	_led_color+1,c
  1281  0002B8  0EF8               	movlw	248
  1282  0002BA  6E3C               	movwf	_led_color+2,c
  1283  0002BC  0E00               	movlw	0
  1284  0002BE  6E3D               	movwf	_led_color+3,c
  1285                           
  1286                           ;main.c: 316: prev_color = (0);
  1287  0002C0  0E00               	movlw	0
  1288  0002C2  0100               	movlb	0	; () banked
  1289  0002C4  6F76               	movwf	_prev_color& (0+255),b
  1290  0002C6  0E00               	movlw	0
  1291  0002C8  6F77               	movwf	(_prev_color+1)& (0+255),b
  1292  0002CA  0E00               	movlw	0
  1293  0002CC  6F78               	movwf	(_prev_color+2)& (0+255),b
  1294  0002CE  0E00               	movlw	0
  1295  0002D0  6F79               	movwf	(_prev_color+3)& (0+255),b
  1296                           
  1297                           ;main.c: 319: pi_supply_off();
  1298  0002D2  EC2B  F007         	call	_pi_supply_off	;wreg free
  1299                           
  1300                           ;main.c: 322: request_pi_run();
  1301  0002D6  EC25  F007         	call	_request_pi_run	;wreg free
  1302  0002DA  D000               	goto	l2628
  1303  0002DC                     l2628:
  1304  0002DC  948B               	bcf	3979,2,c	;volatile
  1305  0002DE  D000               	goto	l2630
  1306  0002E0                     l2630:
  1307  0002E0  908B               	bcf	3979,0,c	;volatile
  1308  0002E2  D000               	goto	l2632
  1309  0002E4                     l2632:
  1310                           
  1311                           ;main.c: 331: reg_status = 0;
  1312  0002E4  0E00               	movlw	0
  1313  0002E6  6E47               	movwf	_reg_status,c
  1314                           
  1315                           ;main.c: 332: reg_control = 0;
  1316  0002E8  0E00               	movlw	0
  1317  0002EA  6E46               	movwf	_reg_control,c
  1318  0002EC  D000               	goto	l2636
  1319  0002EE                     l2636:
  1320  0002EE  8A8B               	bsf	3979,5,c	;volatile
  1321  0002F0  D000               	goto	l2638
  1322  0002F2                     l2638:
  1323                           
  1324                           ;main.c: 348: ADC_Initialize();
  1325  0002F2  ECEF  F006         	call	_ADC_Initialize	;wreg free
  1326                           
  1327                           ;main.c: 351: meas_tune = ADC_GetConversion(channel_TUNE);
  1328  0002F6  0E00               	movlw	0
  1329  0002F8  EC66  F006         	call	_ADC_GetConversion
  1330  0002FC  C011  F040         	movff	?_ADC_GetConversion,_meas_tune
  1331  000300  C012  F041         	movff	?_ADC_GetConversion+1,_meas_tune+1
  1332                           
  1333                           ;main.c: 352: meas_band = ADC_GetConversion(channel_BAND);
  1334  000304  0E01               	movlw	1
  1335  000306  EC66  F006         	call	_ADC_GetConversion
  1336  00030A  C011  F03E         	movff	?_ADC_GetConversion,_meas_band
  1337  00030E  C012  F03F         	movff	?_ADC_GetConversion+1,_meas_band+1
  1338                           
  1339                           ;main.c: 353: meas_vol = ADC_GetConversion(channel_VOL);
  1340  000312  0E02               	movlw	2
  1341  000314  EC66  F006         	call	_ADC_GetConversion
  1342  000318  C011  F042         	movff	?_ADC_GetConversion,_meas_vol
  1343  00031C  C012  F043         	movff	?_ADC_GetConversion+1,_meas_vol+1
  1344                           
  1345                           ;main.c: 356: meas_pi3v = ADC_GetConversion(channel_PI3V);
  1346  000320  0E19               	movlw	25
  1347  000322  EC66  F006         	call	_ADC_GetConversion
  1348  000326  C011  F073         	movff	?_ADC_GetConversion,main@meas_pi3v
  1349  00032A  C012  F074         	movff	?_ADC_GetConversion+1,main@meas_pi3v+1
  1350                           
  1351                           ;main.c: 357: pi3v = ((uint32_t)meas_pi3v * (uint32_t)5000 / (uint32_t)1024);
  1352  00032E  C073  F011         	movff	main@meas_pi3v,___lmul@multiplier
  1353  000332  C074  F012         	movff	main@meas_pi3v+1,___lmul@multiplier+1
  1354  000336  6A13               	clrf	___lmul@multiplier+2,c
  1355  000338  6A14               	clrf	___lmul@multiplier+3,c
  1356  00033A  0E88               	movlw	136
  1357  00033C  6E15               	movwf	___lmul@multiplicand,c
  1358  00033E  0E13               	movlw	19
  1359  000340  6E16               	movwf	___lmul@multiplicand+1,c
  1360  000342  0E00               	movlw	0
  1361  000344  6E17               	movwf	___lmul@multiplicand+2,c
  1362  000346  0E00               	movlw	0
  1363  000348  6E18               	movwf	___lmul@multiplicand+3,c
  1364  00034A  ECA7  F005         	call	___lmul	;wreg free
  1365  00034E  0E0B               	movlw	11
  1366  000350  D005               	goto	u2220
  1367  000352                     u2225:
  1368  000352  90D8               	bcf	status,0,c
  1369  000354  3214               	rrcf	?___lmul+3,f,c
  1370  000356  3213               	rrcf	?___lmul+2,f,c
  1371  000358  3212               	rrcf	?___lmul+1,f,c
  1372  00035A  3211               	rrcf	?___lmul,f,c
  1373  00035C                     u2220:
  1374  00035C  2EE8               	decfsz	wreg,f,c
  1375  00035E  D7F9               	goto	u2225
  1376  000360  C011  F06D         	movff	?___lmul,main@pi3v
  1377  000364  C012  F06E         	movff	?___lmul+1,main@pi3v+1
  1378                           
  1379                           ;main.c: 359: meas_pi5v = ADC_GetConversion(channel_PI5V);
  1380  000368  0E0F               	movlw	15
  1381  00036A  EC66  F006         	call	_ADC_GetConversion
  1382  00036E  C011  F071         	movff	?_ADC_GetConversion,main@meas_pi5v
  1383  000372  C012  F072         	movff	?_ADC_GetConversion+1,main@meas_pi5v+1
  1384                           
  1385                           ;main.c: 360: pi5v = ((uint32_t)meas_pi5v * (uint32_t)5000 / (uint32_t)512);
  1386  000376  C071  F011         	movff	main@meas_pi5v,___lmul@multiplier
  1387  00037A  C072  F012         	movff	main@meas_pi5v+1,___lmul@multiplier+1
  1388  00037E  6A13               	clrf	___lmul@multiplier+2,c
  1389  000380  6A14               	clrf	___lmul@multiplier+3,c
  1390  000382  0E88               	movlw	136
  1391  000384  6E15               	movwf	___lmul@multiplicand,c
  1392  000386  0E13               	movlw	19
  1393  000388  6E16               	movwf	___lmul@multiplicand+1,c
  1394  00038A  0E00               	movlw	0
  1395  00038C  6E17               	movwf	___lmul@multiplicand+2,c
  1396  00038E  0E00               	movlw	0
  1397  000390  6E18               	movwf	___lmul@multiplicand+3,c
  1398  000392  ECA7  F005         	call	___lmul	;wreg free
  1399  000396  0E0A               	movlw	10
  1400  000398  D005               	goto	u2230
  1401  00039A                     u2235:
  1402  00039A  90D8               	bcf	status,0,c
  1403  00039C  3214               	rrcf	?___lmul+3,f,c
  1404  00039E  3213               	rrcf	?___lmul+2,f,c
  1405  0003A0  3212               	rrcf	?___lmul+1,f,c
  1406  0003A2  3211               	rrcf	?___lmul,f,c
  1407  0003A4                     u2230:
  1408  0003A4  2EE8               	decfsz	wreg,f,c
  1409  0003A6  D7F9               	goto	u2235
  1410  0003A8  C011  F06F         	movff	?___lmul,main@pi5v
  1411  0003AC  C012  F070         	movff	?___lmul+1,main@pi5v+1
  1412  0003B0  D000               	goto	l2654
  1413  0003B2                     l2654:
  1414  0003B2  9A8B               	bcf	3979,5,c	;volatile
  1415  0003B4  D000               	goto	l2656
  1416  0003B6                     l2656:
  1417                           
  1418                           ;main.c: 371: {
  1419                           ;main.c: 372: printf("\n\n\rLED   0x%08lX",led_color);
  1420  0003B6  0E57               	movlw	low STR_1
  1421  0003B8  6E27               	movwf	printf@f,c
  1422  0003BA  0E3F               	movlw	high STR_1
  1423  0003BC  6E28               	movwf	printf@f+1,c
  1424  0003BE  C03A  F029         	movff	_led_color,?_printf+2
  1425  0003C2  C03B  F02A         	movff	_led_color+1,?_printf+3
  1426  0003C6  C03C  F02B         	movff	_led_color+2,?_printf+4
  1427  0003CA  C03D  F02C         	movff	_led_color+3,?_printf+5
  1428  0003CE  ECA4  F002         	call	_printf	;wreg free
  1429                           
  1430                           ;main.c: 373: printf("\n\rSTAT  0x%02X",reg_status);
  1431  0003D2  0E87               	movlw	low STR_2
  1432  0003D4  6E27               	movwf	printf@f,c
  1433  0003D6  0E3F               	movlw	high STR_2
  1434  0003D8  6E28               	movwf	printf@f+1,c
  1435  0003DA  C047  F029         	movff	_reg_status,?_printf+2
  1436  0003DE  6A2A               	clrf	?_printf+3,c
  1437  0003E0  ECA4  F002         	call	_printf	;wreg free
  1438                           
  1439                           ;main.c: 374: printf("\n\rCTRL  0x%02X",reg_control);
  1440  0003E4  0E78               	movlw	low STR_3
  1441  0003E6  6E27               	movwf	printf@f,c
  1442  0003E8  0E3F               	movlw	high STR_3
  1443  0003EA  6E28               	movwf	printf@f+1,c
  1444  0003EC  C046  F029         	movff	_reg_control,?_printf+2
  1445  0003F0  6A2A               	clrf	?_printf+3,c
  1446  0003F2  ECA4  F002         	call	_printf	;wreg free
  1447                           
  1448                           ;main.c: 375: printf("\n\rST_CNT  %u",pi_power.count);
  1449  0003F6  0EF1               	movlw	low STR_4
  1450  0003F8  6E27               	movwf	printf@f,c
  1451  0003FA  0E3F               	movlw	high STR_4
  1452  0003FC  6E28               	movwf	printf@f+1,c
  1453  0003FE  C034  F029         	movff	_pi_power+2,?_printf+2
  1454  000402  C035  F02A         	movff	_pi_power+3,?_printf+3
  1455  000406  ECA4  F002         	call	_printf	;wreg free
  1456                           
  1457                           ;main.c: 376: printf("\n\rSP_CNT  %u",pi_power.stopped_count);
  1458  00040A  0EE4               	movlw	low STR_5
  1459  00040C  6E27               	movwf	printf@f,c
  1460  00040E  0E3F               	movlw	high STR_5
  1461  000410  6E28               	movwf	printf@f+1,c
  1462  000412  C036  F029         	movff	_pi_power+4,?_printf+2
  1463  000416  C037  F02A         	movff	_pi_power+5,?_printf+3
  1464  00041A  ECA4  F002         	call	_printf	;wreg free
  1465                           
  1466                           ;main.c: 377: printf("\n\rSTATE   %u",pi_power.state);
  1467  00041E  0EB0               	movlw	low STR_6
  1468  000420  6E27               	movwf	printf@f,c
  1469  000422  0E3F               	movlw	high STR_6
  1470  000424  6E28               	movwf	printf@f+1,c
  1471  000426  C032  F029         	movff	_pi_power,?_printf+2
  1472  00042A  6A2A               	clrf	?_printf+3,c
  1473  00042C  ECA4  F002         	call	_printf	;wreg free
  1474                           
  1475                           ;main.c: 378: printf("\n\rAC_ON   %u",pi_power.power_switch);
  1476  000430  0EBD               	movlw	low STR_7
  1477  000432  6E27               	movwf	printf@f,c
  1478  000434  0E3F               	movlw	high STR_7
  1479  000436  6E28               	movwf	printf@f+1,c
  1480  000438  C039  F029         	movff	_pi_power+7,?_printf+2
  1481  00043C  6A2A               	clrf	?_printf+3,c
  1482  00043E  ECA4  F002         	call	_printf	;wreg free
  1483                           
  1484                           ;main.c: 379: printf("\n\rPI_RUN  %u",pi_power.running);
  1485  000442  0ED7               	movlw	low STR_8
  1486  000444  6E27               	movwf	printf@f,c
  1487  000446  0E3F               	movlw	high STR_8
  1488  000448  6E28               	movwf	printf@f+1,c
  1489  00044A  C038  F029         	movff	_pi_power+6,?_printf+2
  1490  00044E  6A2A               	clrf	?_printf+3,c
  1491  000450  ECA4  F002         	call	_printf	;wreg free
  1492                           
  1493                           ;main.c: 380: printf("\n\rTUNE    %u",meas_tune);
  1494  000454  0EA3               	movlw	low STR_9
  1495  000456  6E27               	movwf	printf@f,c
  1496  000458  0E3F               	movlw	high STR_9
  1497  00045A  6E28               	movwf	printf@f+1,c
  1498  00045C  C040  F029         	movff	_meas_tune,?_printf+2
  1499  000460  C041  F02A         	movff	_meas_tune+1,?_printf+3
  1500  000464  ECA4  F002         	call	_printf	;wreg free
  1501                           
  1502                           ;main.c: 381: printf("\n\rBAND    %u",meas_band);
  1503  000468  0E96               	movlw	low STR_10
  1504  00046A  6E27               	movwf	printf@f,c
  1505  00046C  0E3F               	movlw	high STR_10
  1506  00046E  6E28               	movwf	printf@f+1,c
  1507  000470  C03E  F029         	movff	_meas_band,?_printf+2
  1508  000474  C03F  F02A         	movff	_meas_band+1,?_printf+3
  1509  000478  ECA4  F002         	call	_printf	;wreg free
  1510                           
  1511                           ;main.c: 382: printf("\n\rVOLUME  %u",meas_vol);
  1512  00047C  0ECA               	movlw	low STR_11
  1513  00047E  6E27               	movwf	printf@f,c
  1514  000480  0E3F               	movlw	high STR_11
  1515  000482  6E28               	movwf	printf@f+1,c
  1516  000484  C042  F029         	movff	_meas_vol,?_printf+2
  1517  000488  C043  F02A         	movff	_meas_vol+1,?_printf+3
  1518  00048C  ECA4  F002         	call	_printf	;wreg free
  1519                           
  1520                           ;main.c: 383: printf("\n\n\rPi3V    %u mV",pi3v);
  1521  000490  0E46               	movlw	low STR_12
  1522  000492  6E27               	movwf	printf@f,c
  1523  000494  0E3F               	movlw	high STR_12
  1524  000496  6E28               	movwf	printf@f+1,c
  1525  000498  C06D  F029         	movff	main@pi3v,?_printf+2
  1526  00049C  C06E  F02A         	movff	main@pi3v+1,?_printf+3
  1527  0004A0  ECA4  F002         	call	_printf	;wreg free
  1528                           
  1529                           ;main.c: 384: printf("\n\rPi5V    %u mV",pi5v);
  1530  0004A4  0E68               	movlw	low STR_13
  1531  0004A6  6E27               	movwf	printf@f,c
  1532  0004A8  0E3F               	movlw	high STR_13
  1533  0004AA  6E28               	movwf	printf@f+1,c
  1534  0004AC  C06F  F029         	movff	main@pi5v,?_printf+2
  1535  0004B0  C070  F02A         	movff	main@pi5v+1,?_printf+3
  1536  0004B4  ECA4  F002         	call	_printf	;wreg free
  1537  0004B8  D000               	goto	l2682
  1538  0004BA                     l2682:
  1539                           
  1540                           ;main.c: 385: }
  1541                           ;main.c: 390: if (prev_color != led_color)
  1542  0004BA  503A               	movf	_led_color,w,c
  1543  0004BC  0100               	movlb	0	; () banked
  1544  0004BE  1976               	xorwf	_prev_color& (0+255),w,b
  1545  0004C0  E10D               	bnz	u2240
  1546  0004C2  503B               	movf	_led_color+1,w,c
  1547  0004C4  0100               	movlb	0	; () banked
  1548  0004C6  1977               	xorwf	(_prev_color+1)& (0+255),w,b
  1549  0004C8  E109               	bnz	u2240
  1550  0004CA  503C               	movf	_led_color+2,w,c
  1551  0004CC  0100               	movlb	0	; () banked
  1552  0004CE  1978               	xorwf	(_prev_color+2)& (0+255),w,b
  1553  0004D0  E105               	bnz	u2240
  1554  0004D2  503D               	movf	_led_color+3,w,c
  1555  0004D4  0100               	movlb	0	; () banked
  1556  0004D6  1979               	xorwf	(_prev_color+3)& (0+255),w,b
  1557  0004D8  B4D8               	btfsc	status,2,c
  1558  0004DA  D019               	goto	l2694
  1559  0004DC                     u2240:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;main.c: 391: {
  1563                           ;main.c: 394: (INTCONbits.GIE = 0);
  1564  0004DC  9EF2               	bcf	intcon,7,c	;volatile
  1565                           
  1566                           ;main.c: 396: (INTCONbits.PEIE = 0);
  1567  0004DE  9CF2               	bcf	intcon,6,c	;volatile
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 399: OSCILLATOR_FastClock();
  1571  0004E0  EC16  F007         	call	_OSCILLATOR_FastClock	;wreg free
  1572                           
  1573                           ;main.c: 400: ws2812_send(led_color);
  1574  0004E4  C03A  F011         	movff	_led_color,ws2812_send@led
  1575  0004E8  C03B  F012         	movff	_led_color+1,ws2812_send@led+1
  1576  0004EC  C03C  F013         	movff	_led_color+2,ws2812_send@led+2
  1577  0004F0  C03D  F014         	movff	_led_color+3,ws2812_send@led+3
  1578  0004F4  EC77  F005         	call	_ws2812_send	;wreg free
  1579                           
  1580                           ;main.c: 403: OSCILLATOR_Initialize();
  1581  0004F8  EC0F  F007         	call	_OSCILLATOR_Initialize	;wreg free
  1582                           
  1583                           ;main.c: 405: prev_color = led_color;
  1584  0004FC  C03A  F076         	movff	_led_color,_prev_color
  1585  000500  C03B  F077         	movff	_led_color+1,_prev_color+1
  1586  000504  C03C  F078         	movff	_led_color+2,_prev_color+2
  1587  000508  C03D  F079         	movff	_led_color+3,_prev_color+3
  1588  00050C  D000               	goto	l2694
  1589  00050E                     l2694:
  1590                           
  1591                           ;main.c: 406: }
  1592                           ;main.c: 409: (INTCONbits.GIE = 1);
  1593  00050E  8EF2               	bsf	intcon,7,c	;volatile
  1594                           
  1595                           ;main.c: 411: (INTCONbits.PEIE = 1);
  1596  000510  8CF2               	bsf	intcon,6,c	;volatile
  1597                           
  1598                           ;main.c: 414: while (0 == TMR5_HasOverflowOccured());
  1599  000512  D000               	goto	l2698
  1600  000514                     l2698:
  1601  000514  EC01  F007         	call	_TMR5_HasOverflowOccured	;wreg free
  1602  000518  0900               	iorlw	0
  1603  00051A  B4D8               	btfsc	status,2,c
  1604  00051C  D7FB               	goto	l2698
  1605                           
  1606                           ;main.c: 421: if (led_counter++ >= 4)
  1607  00051E  0100               	movlb	0	; () banked
  1608  000520  2B75               	incf	main@led_counter& (0+255),f,b
  1609  000522  0575               	decf	main@led_counter& (0+255),w,b
  1610  000524  6E31               	movwf	??_main& (0+255),c
  1611  000526  0E03               	movlw	3
  1612  000528  6431               	cpfsgt	??_main,c
  1613  00052A  D006               	goto	l2704
  1614                           
  1615                           ; BSR set to: 0
  1616                           
  1617                           ;main.c: 422: {
  1618                           ;main.c: 423: do { LATC0 = ~LATC0; } while(0);
  1619  00052C  708B               	btg	3979,0,c	;volatile
  1620  00052E  D000               	goto	l2702
  1621  000530                     l2702:
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;main.c: 424: led_counter = 0;
  1625  000530  0E00               	movlw	0
  1626  000532  0100               	movlb	0	; () banked
  1627  000534  6F75               	movwf	main@led_counter& (0+255),b
  1628  000536  D000               	goto	l2704
  1629  000538                     l2704:
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;main.c: 425: }
  1633                           ;main.c: 429: pi_power.power_switch = TMR0_HasOverflowOccured();
  1634  000538  EC08  F007         	call	_TMR0_HasOverflowOccured	;wreg free
  1635  00053C  6E39               	movwf	_pi_power+7,c
  1636                           
  1637                           ;main.c: 432: update_status_reg();
  1638  00053E  ECD4  F005         	call	_update_status_reg	;wreg free
  1639  000542  D5B8               	goto	l2512
  1640  000544  EF43  F000         	goto	start
  1641  000548                     __end_of_main:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           tblptrh	equ	0xFF7
  1645                           tblptrl	equ	0xFF6
  1646                           tablat	equ	0xFF5
  1647                           intcon	equ	0xFF2
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           postdec1	equ	0xFE5
  1651                           fsr1l	equ	0xFE1
  1652                           status	equ	0xFD8
  1653                           
  1654 ;; *************** function _ws2812_send *****************
  1655 ;; Defined at:
  1656 ;;		line 7 in file "ws2812.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;  led             4   16[COMRAM] unsigned long 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  j               1   24[COMRAM] unsigned char 
  1661 ;; Return value:  Size  Location     Type
  1662 ;;		None               void
  1663 ;; Registers used:
  1664 ;;		wreg, status,2, status,0
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1670 ;;      Params:         4       0       0       0
  1671 ;;      Locals:         1       0       0       0
  1672 ;;      Temps:          4       0       0       0
  1673 ;;      Totals:         9       0       0       0
  1674 ;;Total ram usage:        9 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    3
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text1
  1685  000AEE                     __ptext1:
  1686                           	opt stack 0
  1687  000AEE                     _ws2812_send:
  1688                           	opt stack 27
  1689                           
  1690                           ;ws2812.c: 9: unsigned char j;
  1691                           ;ws2812.c: 20: for(j = 0; j < 24; j++) {
  1692                           
  1693                           ;incstack = 0
  1694  000AEE  0E00               	movlw	0
  1695  000AF0  6E19               	movwf	ws2812_send@j,c
  1696  000AF2                     l2366:
  1697  000AF2  0E17               	movlw	23
  1698  000AF4  6419               	cpfsgt	ws2812_send@j,c
  1699  000AF6  D001               	goto	l285
  1700  000AF8  D025               	goto	l2376
  1701  000AFA                     l285:
  1702                           
  1703                           ;ws2812.c: 24: if (led & 1) {
  1704  000AFA  A011               	btfss	ws2812_send@led,0,c
  1705  000AFC  D006               	goto	l287
  1706  000AFE  8282               	bsf	3970,1,c	;# 
  1707  000B00  F000               	nop		;# 
  1708  000B02  F000               	nop		;# 
  1709  000B04  F000               	nop		;# 
  1710  000B06  9282               	bcf	3970,1,c	;# 
  1711                           
  1712                           ;ws2812.c: 33: } else {
  1713  000B08  D006               	goto	l2372
  1714  000B0A                     l287:
  1715  000B0A  8282               	bsf	3970,1,c	;# 
  1716  000B0C  9282               	bcf	3970,1,c	;# 
  1717  000B0E  F000               	nop		;# 
  1718  000B10  F000               	nop		;# 
  1719  000B12  F000               	nop		;# 
  1720  000B14  D000               	goto	l2372
  1721  000B16                     l2372:
  1722                           
  1723                           ;ws2812.c: 42: }
  1724                           ;ws2812.c: 45: led = led >> 1L;
  1725  000B16  C011  F015         	movff	ws2812_send@led,??_ws2812_send
  1726  000B1A  C012  F016         	movff	ws2812_send@led+1,??_ws2812_send+1
  1727  000B1E  C013  F017         	movff	ws2812_send@led+2,??_ws2812_send+2
  1728  000B22  C014  F018         	movff	ws2812_send@led+3,??_ws2812_send+3
  1729  000B26  90D8               	bcf	status,0,c
  1730  000B28  3218               	rrcf	??_ws2812_send+3,f,c
  1731  000B2A  3217               	rrcf	??_ws2812_send+2,f,c
  1732  000B2C  3216               	rrcf	??_ws2812_send+1,f,c
  1733  000B2E  3215               	rrcf	??_ws2812_send,f,c
  1734  000B30  C015  F011         	movff	??_ws2812_send,ws2812_send@led
  1735  000B34  C016  F012         	movff	??_ws2812_send+1,ws2812_send@led+1
  1736  000B38  C017  F013         	movff	??_ws2812_send+2,ws2812_send@led+2
  1737  000B3C  C018  F014         	movff	??_ws2812_send+3,ws2812_send@led+3
  1738  000B40  2A19               	incf	ws2812_send@j,f,c
  1739  000B42  D7D7               	goto	l2366
  1740  000B44                     l2376:
  1741                           
  1742                           ;ws2812.c: 46: }
  1743                           ;ws2812.c: 48: _delay((unsigned long)((50)*(64000000/4000000.0)));
  1744  000B44  0EC8               	movlw	200
  1745  000B46                     u2277:
  1746  000B46  F000               	nop	
  1747  000B48  2EE8               	decfsz	wreg,f,c
  1748  000B4A  D7FD               	goto	u2277
  1749  000B4C  0012               	return		;funcret
  1750  000B4E                     __end_of_ws2812_send:
  1751                           	opt stack 0
  1752                           tblptru	equ	0xFF8
  1753                           tblptrh	equ	0xFF7
  1754                           tblptrl	equ	0xFF6
  1755                           tablat	equ	0xFF5
  1756                           intcon	equ	0xFF2
  1757                           postinc0	equ	0xFEE
  1758                           wreg	equ	0xFE8
  1759                           postdec1	equ	0xFE5
  1760                           fsr1l	equ	0xFE1
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _update_status_reg *****************
  1764 ;; Defined at:
  1765 ;;		line 437 in file "main.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;		None               void
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1779 ;;      Params:         0       0       0       0
  1780 ;;      Locals:         0       0       0       0
  1781 ;;      Temps:          6       0       0       0
  1782 ;;      Totals:         6       0       0       0
  1783 ;;Total ram usage:        6 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    3
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text2
  1794  000BA8                     __ptext2:
  1795                           	opt stack 0
  1796  000BA8                     _update_status_reg:
  1797                           	opt stack 27
  1798                           
  1799                           ;main.c: 453: reg_status = ((pi_power.power_switch & 1) << 7) |
  1800                           ;main.c: 454: ((PORTDbits.RD2 & 1) << 6) |
  1801                           ;main.c: 455: ((pi_power.running & 1) << 5 ) |
  1802                           ;main.c: 456: ((PORTCbits.RC4 & 1) << 4) |
  1803                           ;main.c: 457: (pi_power.state & 7);
  1804                           
  1805                           ;incstack = 0
  1806  000BA8  C032  F011         	movff	_pi_power,??_update_status_reg
  1807  000BAC  0E07               	movlw	7
  1808  000BAE  1611               	andwf	??_update_status_reg,f,c
  1809  000BB0  A882               	btfss	3970,4,c	;volatile
  1810  000BB2  D003               	goto	u1890
  1811  000BB4  0E10               	movlw	16
  1812  000BB6  6E12               	movwf	(??_update_status_reg+1)& (0+255),c
  1813  000BB8  D001               	goto	u1905
  1814  000BBA                     u1890:
  1815  000BBA  6A12               	clrf	(??_update_status_reg+1)& (0+255),c
  1816  000BBC                     u1905:
  1817  000BBC  C038  F013         	movff	_pi_power+6,??_update_status_reg+2
  1818  000BC0  0E01               	movlw	1
  1819  000BC2  1613               	andwf	??_update_status_reg+2,f,c
  1820  000BC4  0E05               	movlw	5
  1821  000BC6  6E14               	movwf	(??_update_status_reg+3)& (0+255),c
  1822  000BC8                     u1915:
  1823  000BC8  90D8               	bcf	status,0,c
  1824  000BCA  3613               	rlcf	??_update_status_reg+2,f,c
  1825  000BCC  2E14               	decfsz	(??_update_status_reg+3)& (0+255),f,c
  1826  000BCE  D7FC               	goto	u1915
  1827  000BD0  A483               	btfss	3971,2,c	;volatile
  1828  000BD2  D003               	goto	u1920
  1829  000BD4  0E40               	movlw	64
  1830  000BD6  6E15               	movwf	(??_update_status_reg+4)& (0+255),c
  1831  000BD8  D001               	goto	u1935
  1832  000BDA                     u1920:
  1833  000BDA  6A15               	clrf	(??_update_status_reg+4)& (0+255),c
  1834  000BDC                     u1935:
  1835  000BDC  C039  F016         	movff	_pi_power+7,??_update_status_reg+5
  1836  000BE0  0E01               	movlw	1
  1837  000BE2  1616               	andwf	??_update_status_reg+5,f,c
  1838  000BE4  0E00               	movlw	0
  1839  000BE6  B016               	btfsc	??_update_status_reg+5,0,c
  1840  000BE8  0E80               	movlw	128
  1841  000BEA  6E16               	movwf	??_update_status_reg+5,c
  1842  000BEC  5016               	movf	??_update_status_reg+5,w,c
  1843  000BEE  1015               	iorwf	??_update_status_reg+4,w,c
  1844  000BF0  1013               	iorwf	??_update_status_reg+2,w,c
  1845  000BF2  1012               	iorwf	??_update_status_reg+1,w,c
  1846  000BF4  1011               	iorwf	??_update_status_reg,w,c
  1847  000BF6  6E47               	movwf	_reg_status,c
  1848  000BF8  0012               	return		;funcret
  1849  000BFA                     __end_of_update_status_reg:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1l	equ	0xFE1
  1860                           status	equ	0xFD8
  1861                           
  1862 ;; *************** function _request_pi_stop *****************
  1863 ;; Defined at:
  1864 ;;		line 478 in file "main.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;		None               void
  1871 ;; Registers used:
  1872 ;;		None
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1878 ;;      Params:         0       0       0       0
  1879 ;;      Locals:         0       0       0       0
  1880 ;;      Temps:          0       0       0       0
  1881 ;;      Totals:         0       0       0       0
  1882 ;;Total ram usage:        0 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; Hardware stack levels required when called:    3
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_main
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text3
  1893  000E44                     __ptext3:
  1894                           	opt stack 0
  1895  000E44                     _request_pi_stop:
  1896                           	opt stack 27
  1897                           
  1898                           ;incstack = 0
  1899                           ;main.c: 481: do { LATC4 = 0; } while(0);
  1900  000E44  988B               	bcf	3979,4,c	;volatile
  1901  000E46  0012               	return	
  1902  000E48  0012               	return		;funcret
  1903  000E4A                     __end_of_request_pi_stop:
  1904                           	opt stack 0
  1905                           tblptru	equ	0xFF8
  1906                           tblptrh	equ	0xFF7
  1907                           tblptrl	equ	0xFF6
  1908                           tablat	equ	0xFF5
  1909                           intcon	equ	0xFF2
  1910                           postinc0	equ	0xFEE
  1911                           wreg	equ	0xFE8
  1912                           postdec1	equ	0xFE5
  1913                           fsr1l	equ	0xFE1
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _request_pi_run *****************
  1917 ;; Defined at:
  1918 ;;		line 472 in file "main.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;		None               void
  1925 ;; Registers used:
  1926 ;;		None
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1932 ;;      Params:         0       0       0       0
  1933 ;;      Locals:         0       0       0       0
  1934 ;;      Temps:          0       0       0       0
  1935 ;;      Totals:         0       0       0       0
  1936 ;;Total ram usage:        0 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    3
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text4
  1947  000E4A                     __ptext4:
  1948                           	opt stack 0
  1949  000E4A                     _request_pi_run:
  1950                           	opt stack 27
  1951                           
  1952                           ;incstack = 0
  1953                           ;main.c: 475: do { LATC4 = 1; } while(0);
  1954  000E4A  888B               	bsf	3979,4,c	;volatile
  1955  000E4C  0012               	return	
  1956  000E4E  0012               	return		;funcret
  1957  000E50                     __end_of_request_pi_run:
  1958                           	opt stack 0
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           intcon	equ	0xFF2
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           status	equ	0xFD8
  1969                           
  1970 ;; *************** function _printf *****************
  1971 ;; Defined at:
  1972 ;;		line 464 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  f               2   38[COMRAM] PTR const unsigned char 
  1975 ;;		 -> STR_13(16), STR_12(17), STR_11(13), STR_10(13), 
  1976 ;;		 -> STR_9(13), STR_8(13), STR_7(13), STR_6(13), 
  1977 ;;		 -> STR_5(13), STR_4(13), STR_3(15), STR_2(15), 
  1978 ;;		 -> STR_1(17), 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  idx             1    0[BANK0 ] unsigned char 
  1981 ;;  val             4    5[BANK0 ] unsigned long 
  1982 ;;  tmpval          4    0        struct .
  1983 ;;  cp              3    0        PTR const unsigned char 
  1984 ;;  width           2   10[BANK0 ] int 
  1985 ;;  prec            2    3[BANK0 ] int 
  1986 ;;  ap              2    1[BANK0 ] PTR void [1]
  1987 ;;		 -> ?_printf(2), 
  1988 ;;  len             2    0        unsigned int 
  1989 ;;  c               1   12[BANK0 ] char 
  1990 ;;  flag            1    9[BANK0 ] unsigned char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  2   38[COMRAM] int 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2000 ;;      Params:         6       0       0       0
  2001 ;;      Locals:         0      13       0       0
  2002 ;;      Temps:          4       0       0       0
  2003 ;;      Totals:        10      13       0       0
  2004 ;;Total ram usage:       23 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    5
  2007 ;; This function calls:
  2008 ;;		___lldiv
  2009 ;;		___llmod
  2010 ;;		___wmul
  2011 ;;		_isdigit
  2012 ;;		_putch
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text5
  2019  000548                     __ptext5:
  2020                           	opt stack 0
  2021  000548                     _printf:
  2022                           	opt stack 25
  2023                           
  2024                           ;doprnt.c: 466: va_list ap;
  2025                           ;doprnt.c: 499: signed char c;
  2026                           ;doprnt.c: 501: int width;
  2027                           ;doprnt.c: 504: int prec;
  2028                           ;doprnt.c: 508: unsigned char flag;
  2029                           ;doprnt.c: 523: union {
  2030                           ;doprnt.c: 524: unsigned long vd;
  2031                           ;doprnt.c: 525: double integ;
  2032                           ;doprnt.c: 526: } tmpval;
  2033                           ;doprnt.c: 528: unsigned long val;
  2034                           ;doprnt.c: 529: unsigned len;
  2035                           ;doprnt.c: 530: const char * cp;
  2036                           ;doprnt.c: 533: *ap = __va_start();
  2037                           
  2038                           ;incstack = 0
  2039  000548  0E29               	movlw	low (?_printf+2)
  2040  00054A  0100               	movlb	0	; () banked
  2041  00054C  6F61               	movwf	printf@ap& (0+255),b
  2042  00054E  0E00               	movlw	high (?_printf+2)
  2043  000550  0100               	movlb	0	; () banked
  2044  000552  6F62               	movwf	(printf@ap+1)& (0+255),b
  2045                           
  2046                           ;doprnt.c: 536: while(c = *f++) {
  2047  000554  D1FA               	goto	l2490
  2048  000556                     l2380:
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;doprnt.c: 538: if(c != '%')
  2052  000556  0E25               	movlw	37
  2053  000558  0100               	movlb	0	; () banked
  2054  00055A  196C               	xorwf	printf@c& (0+255),w,b
  2055  00055C  B4D8               	btfsc	status,2,c
  2056  00055E  D005               	goto	l2384
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;doprnt.c: 540: {
  2060                           ;doprnt.c: 541: (putch(c) );
  2061  000560  0100               	movlb	0	; () banked
  2062  000562  516C               	movf	printf@c& (0+255),w,b
  2063  000564  EC1D  F007         	call	_putch
  2064                           
  2065                           ;doprnt.c: 542: continue;
  2066  000568  D1F0               	goto	l2490
  2067  00056A                     l2384:
  2068                           
  2069                           ;doprnt.c: 543: }
  2070                           ;doprnt.c: 546: width = 0;
  2071  00056A  0E00               	movlw	0
  2072  00056C  0100               	movlb	0	; () banked
  2073  00056E  6F6B               	movwf	(printf@width+1)& (0+255),b
  2074  000570  0E00               	movlw	0
  2075  000572  6F6A               	movwf	printf@width& (0+255),b
  2076                           
  2077                           ;doprnt.c: 548: flag = 0;
  2078  000574  0E00               	movlw	0
  2079  000576  0100               	movlb	0	; () banked
  2080  000578  6F69               	movwf	printf@flag& (0+255),b
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;doprnt.c: 551: switch(*f) {
  2084                           
  2085                           ;doprnt.c: 550: for(;;) {
  2086  00057A  D006               	goto	l2390
  2087  00057C                     l2386:
  2088                           
  2089                           ;doprnt.c: 580: flag |= 0x04;
  2090  00057C  0100               	movlb	0	; () banked
  2091  00057E  8569               	bsf	printf@flag& (0+255),2,b
  2092                           
  2093                           ;doprnt.c: 581: f++;
  2094  000580  4A27               	infsnz	printf@f,f,c
  2095  000582  2A28               	incf	printf@f+1,f,c
  2096                           
  2097                           ;doprnt.c: 582: continue;
  2098  000584  D001               	goto	l2390
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;doprnt.c: 584: }
  2102  000586  D00B               	goto	l2392
  2103  000588                     l2390:
  2104  000588  C027  FFF6         	movff	printf@f,tblptrl
  2105  00058C  C028  FFF7         	movff	printf@f+1,tblptrh
  2106  000590                     	if	0	;tblptru may be non-zero
  2107  000590                     	endif
  2108  000590                     	if	0	;tblptru may be non-zero
  2109  000590                     	endif
  2110  000590  0008               	tblrd		*
  2111  000592  50F5               	movf	tablat,w,c
  2112                           
  2113                           ; Switch size 1, requested type "space"
  2114                           ; Number of cases is 1, Range of values is 48 to 48
  2115                           ; switch strategies available:
  2116                           ; Name         Instructions Cycles
  2117                           ; simple_byte            4     3 (average)
  2118                           ;	Chosen strategy is simple_byte
  2119  000594  0A30               	xorlw	48	; case 48
  2120  000596  B4D8               	btfsc	status,2,c
  2121  000598  D7F1               	goto	l2386
  2122                           
  2123                           ;doprnt.c: 585: break;
  2124  00059A  D001               	goto	l2392
  2125                           
  2126                           ;doprnt.c: 586: }
  2127  00059C  D7F5               	goto	l2390
  2128  00059E                     l2392:
  2129                           
  2130                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2131  00059E  C027  FFF6         	movff	printf@f,tblptrl
  2132  0005A2  C028  FFF7         	movff	printf@f+1,tblptrh
  2133  0005A6                     	if	0	;tblptru may be non-zero
  2134  0005A6                     	endif
  2135  0005A6                     	if	0	;tblptru may be non-zero
  2136  0005A6                     	endif
  2137  0005A6  0008               	tblrd		*
  2138  0005A8  50F5               	movf	tablat,w,c
  2139  0005AA  ECA8  F006         	call	_isdigit
  2140  0005AE  A0D8               	btfss	status,0,c
  2141  0005B0  D045               	goto	l2412
  2142                           
  2143                           ;doprnt.c: 598: width = 0;
  2144  0005B2  0E00               	movlw	0
  2145  0005B4  0100               	movlb	0	; () banked
  2146  0005B6  6F6B               	movwf	(printf@width+1)& (0+255),b
  2147  0005B8  0E00               	movlw	0
  2148  0005BA  6F6A               	movwf	printf@width& (0+255),b
  2149  0005BC  D000               	goto	l2396
  2150  0005BE                     l2396:
  2151                           
  2152                           ;doprnt.c: 600: width *= 10;
  2153  0005BE  C06A  F011         	movff	printf@width,___wmul@multiplier
  2154  0005C2  C06B  F012         	movff	printf@width+1,___wmul@multiplier+1
  2155  0005C6  0E00               	movlw	0
  2156  0005C8  6E14               	movwf	___wmul@multiplicand+1,c
  2157  0005CA  0E0A               	movlw	10
  2158  0005CC  6E13               	movwf	___wmul@multiplicand,c
  2159  0005CE  EC80  F006         	call	___wmul	;wreg free
  2160  0005D2  C011  F06A         	movff	?___wmul,printf@width
  2161  0005D6  C012  F06B         	movff	?___wmul+1,printf@width+1
  2162                           
  2163                           ;doprnt.c: 601: width += *f++ - '0';
  2164  0005DA  0ED0               	movlw	208
  2165  0005DC  6E2D               	movwf	??_printf& (0+255),c
  2166  0005DE  0EFF               	movlw	255
  2167  0005E0  6E2E               	movwf	(??_printf+1)& (0+255),c
  2168  0005E2  C027  FFF6         	movff	printf@f,tblptrl
  2169  0005E6  C028  FFF7         	movff	printf@f+1,tblptrh
  2170  0005EA                     	if	0	;tblptru may be non-zero
  2171  0005EA                     	endif
  2172  0005EA                     	if	0	;tblptru may be non-zero
  2173  0005EA                     	endif
  2174  0005EA  0008               	tblrd		*
  2175  0005EC  50F5               	movf	tablat,w,c
  2176  0005EE  6E2F               	movwf	(??_printf+2)& (0+255),c
  2177  0005F0  6A30               	clrf	(??_printf+3)& (0+255),c
  2178  0005F2  502D               	movf	??_printf,w,c
  2179  0005F4  262F               	addwf	??_printf+2,f,c
  2180  0005F6  502E               	movf	??_printf+1,w,c
  2181  0005F8  2230               	addwfc	??_printf+3,f,c
  2182  0005FA  502F               	movf	??_printf+2,w,c
  2183  0005FC  0100               	movlb	0	; () banked
  2184  0005FE  276A               	addwf	printf@width& (0+255),f,b
  2185  000600  5030               	movf	??_printf+3,w,c
  2186  000602  0100               	movlb	0	; () banked
  2187  000604  236B               	addwfc	(printf@width+1)& (0+255),f,b
  2188                           
  2189                           ; BSR set to: 0
  2190  000606  4A27               	infsnz	printf@f,f,c
  2191  000608  2A28               	incf	printf@f+1,f,c
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2195  00060A  C027  FFF6         	movff	printf@f,tblptrl
  2196  00060E  C028  FFF7         	movff	printf@f+1,tblptrh
  2197  000612                     	if	0	;tblptru may be non-zero
  2198  000612                     	endif
  2199  000612                     	if	0	;tblptru may be non-zero
  2200  000612                     	endif
  2201  000612  0008               	tblrd		*
  2202  000614  50F5               	movf	tablat,w,c
  2203  000616  ECA8  F006         	call	_isdigit
  2204  00061A  A0D8               	btfss	status,0,c
  2205  00061C  D00F               	goto	l2412
  2206  00061E  D7CF               	goto	l2396
  2207                           
  2208                           ;doprnt.c: 635: switch(c = *f++) {
  2209                           
  2210                           ;doprnt.c: 608: }
  2211                           ;doprnt.c: 633: loop:
  2212  000620  D00D               	goto	l2412
  2213                           
  2214                           ;doprnt.c: 638: goto alldone;
  2215                           
  2216                           ;doprnt.c: 637: case 0:
  2217  000622  0012               	return	
  2218  000624                     l2404:
  2219                           
  2220                           ;doprnt.c: 643: flag |= 0x10;
  2221  000624  0100               	movlb	0	; () banked
  2222  000626  8969               	bsf	printf@flag& (0+255),4,b
  2223                           
  2224                           ;doprnt.c: 644: goto loop;
  2225  000628  D009               	goto	l2412
  2226                           
  2227                           ; BSR set to: 0
  2228                           
  2229                           ;doprnt.c: 712: case 'X':
  2230  00062A  D000               	goto	l2406
  2231  00062C                     l2406:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;doprnt.c: 718: case 'x':
  2235                           ;doprnt.c: 721: flag |= 0x80;
  2236  00062C  0100               	movlb	0	; () banked
  2237  00062E  8F69               	bsf	printf@flag& (0+255),7,b
  2238                           
  2239                           ;doprnt.c: 723: break;
  2240  000630  D020               	goto	l492
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;doprnt.c: 813: continue;
  2244                           
  2245                           ;doprnt.c: 802: default:
  2246  000632  D18B               	goto	l2490
  2247  000634                     l2408:
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 818: flag |= 0xC0;
  2251  000634  0EC0               	movlw	192
  2252  000636  0100               	movlb	0	; () banked
  2253  000638  1369               	iorwf	printf@flag& (0+255),f,b
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;doprnt.c: 822: }
  2257                           
  2258                           ;doprnt.c: 819: break;
  2259  00063A  D01B               	goto	l492
  2260  00063C                     l2412:
  2261  00063C  C027  FFF6         	movff	printf@f,tblptrl
  2262  000640  C028  FFF7         	movff	printf@f+1,tblptrh
  2263  000644  4A27               	infsnz	printf@f,f,c
  2264  000646  2A28               	incf	printf@f+1,f,c
  2265  000648                     	if	0	;tblptru may be non-zero
  2266  000648                     	endif
  2267  000648                     	if	0	;tblptru may be non-zero
  2268  000648                     	endif
  2269  000648  0008               	tblrd		*
  2270  00064A  CFF5 F06C          	movff	tablat,printf@c
  2271  00064E  0100               	movlb	0	; () banked
  2272  000650  516C               	movf	printf@c& (0+255),w,b
  2273                           
  2274                           ; Switch size 1, requested type "space"
  2275                           ; Number of cases is 5, Range of values is 0 to 120
  2276                           ; switch strategies available:
  2277                           ; Name         Instructions Cycles
  2278                           ; simple_byte           16     9 (average)
  2279                           ;	Chosen strategy is simple_byte
  2280  000652  0A00               	xorlw	0	; case 0
  2281  000654  B4D8               	btfsc	status,2,c
  2282  000656  0012               	return	
  2283  000658  0A58               	xorlw	88	; case 88
  2284  00065A  B4D8               	btfsc	status,2,c
  2285  00065C  D7E7               	goto	l2406
  2286  00065E  0A34               	xorlw	52	; case 108
  2287  000660  B4D8               	btfsc	status,2,c
  2288  000662  D7E0               	goto	l2404
  2289  000664  0A19               	xorlw	25	; case 117
  2290  000666  B4D8               	btfsc	status,2,c
  2291  000668  D7E5               	goto	l2408
  2292  00066A  0A0D               	xorlw	13	; case 120
  2293  00066C  B4D8               	btfsc	status,2,c
  2294  00066E  D7DE               	goto	l2406
  2295  000670  D16C               	goto	l2490
  2296  000672                     l492:
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;doprnt.c: 1273: {
  2300                           ;doprnt.c: 1281: if(flag & 0x10)
  2301  000672  0100               	movlb	0	; () banked
  2302  000674  A969               	btfss	printf@flag& (0+255),4,b
  2303  000676  D00E               	goto	l2418
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2307  000678  C061  FFD9         	movff	printf@ap,fsr2l
  2308  00067C  C062  FFDA         	movff	printf@ap+1,fsr2h
  2309  000680  CFDE F065          	movff	postinc2,printf@val
  2310  000684  CFDE F066          	movff	postinc2,printf@val+1
  2311  000688  CFDE F067          	movff	postinc2,printf@val+2
  2312  00068C  CFDE F068          	movff	postinc2,printf@val+3
  2313                           
  2314                           ; BSR set to: 0
  2315  000690  0E04               	movlw	4
  2316  000692  D010               	goto	L5
  2317  000694                     l2418:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;doprnt.c: 1283: else
  2321                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2322  000694  C061  FFD9         	movff	printf@ap,fsr2l
  2323  000698  C062  FFDA         	movff	printf@ap+1,fsr2h
  2324  00069C  CFDE F02D          	movff	postinc2,??_printf
  2325  0006A0  CFDD F02E          	movff	postdec2,??_printf+1
  2326  0006A4  C02D  F065         	movff	??_printf,printf@val
  2327  0006A8  C02E  F066         	movff	??_printf+1,printf@val+1
  2328  0006AC  0100               	movlb	0	; () banked
  2329  0006AE  6B67               	clrf	(printf@val+2)& (0+255),b
  2330  0006B0  6B68               	clrf	(printf@val+3)& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333  0006B2  0E02               	movlw	2
  2334  0006B4                     L5:
  2335  0006B4  0100               	movlb	0	; () banked
  2336  0006B6  2761               	addwf	printf@ap& (0+255),f,b
  2337  0006B8  0E00               	movlw	0
  2338  0006BA  2362               	addwfc	(printf@ap+1)& (0+255),f,b
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;doprnt.c: 1287: }
  2342                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2343  0006BC  D056               	goto	l2452
  2344  0006BE                     l2422:
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2348  0006BE  0E01               	movlw	1
  2349  0006C0  0100               	movlb	0	; () banked
  2350  0006C2  6F6C               	movwf	printf@c& (0+255),b
  2351  0006C4                     l2424:
  2352                           
  2353                           ; BSR set to: 0
  2354  0006C4  0E0A               	movlw	10
  2355  0006C6  0100               	movlb	0	; () banked
  2356  0006C8  196C               	xorwf	printf@c& (0+255),w,b
  2357  0006CA  B4D8               	btfsc	status,2,c
  2358  0006CC  D058               	goto	l2454
  2359  0006CE  D001               	goto	l2428
  2360                           
  2361                           ; BSR set to: 0
  2362  0006D0  D056               	goto	l2454
  2363  0006D2                     l2428:
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;doprnt.c: 1306: if(val < dpowers[c])
  2367  0006D2  0100               	movlb	0	; () banked
  2368  0006D4  516C               	movf	printf@c& (0+255),w,b
  2369  0006D6  0D04               	mullw	4
  2370  0006D8  0EED               	movlw	low _dpowers
  2371  0006DA  24F3               	addwf	prodl,w,c
  2372  0006DC  6EF6               	movwf	tblptrl,c
  2373  0006DE  0E3E               	movlw	high _dpowers
  2374  0006E0  20F4               	addwfc	prodh,w,c
  2375  0006E2  6EF7               	movwf	tblptrh,c
  2376  0006E4                     	if	0	;There are less than 3 active tblptr bytes
  2377  0006E4                     	endif
  2378  0006E4  0009               	tblrd		*+
  2379  0006E6  50F5               	movf	tablat,w,c
  2380  0006E8  0100               	movlb	0	; () banked
  2381  0006EA  5D65               	subwf	printf@val& (0+255),w,b
  2382  0006EC  0009               	tblrd		*+
  2383  0006EE  50F5               	movf	tablat,w,c
  2384  0006F0  0100               	movlb	0	; () banked
  2385  0006F2  5966               	subwfb	(printf@val+1)& (0+255),w,b
  2386  0006F4  0009               	tblrd		*+
  2387  0006F6  50F5               	movf	tablat,w,c
  2388  0006F8  0100               	movlb	0	; () banked
  2389  0006FA  5967               	subwfb	(printf@val+2)& (0+255),w,b
  2390  0006FC  0009               	tblrd		*+
  2391  0006FE  50F5               	movf	tablat,w,c
  2392  000700  0100               	movlb	0	; () banked
  2393  000702  5968               	subwfb	(printf@val+3)& (0+255),w,b
  2394  000704  A0D8               	btfss	status,0,c
  2395  000706  D03B               	goto	l2454
  2396  000708  D001               	goto	l2432
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;doprnt.c: 1307: break;
  2400  00070A  D039               	goto	l2454
  2401  00070C                     l2432:
  2402                           
  2403                           ; BSR set to: 0
  2404  00070C  0100               	movlb	0	; () banked
  2405  00070E  2B6C               	incf	printf@c& (0+255),f,b
  2406  000710  D7D9               	goto	l2424
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;doprnt.c: 1309: break;
  2410                           
  2411                           ; BSR set to: 0
  2412  000712  D035               	goto	l2454
  2413  000714                     l2436:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2417  000714  0E01               	movlw	1
  2418  000716  0100               	movlb	0	; () banked
  2419  000718  6F6C               	movwf	printf@c& (0+255),b
  2420  00071A                     l2438:
  2421                           
  2422                           ; BSR set to: 0
  2423  00071A  0E08               	movlw	8
  2424  00071C  0100               	movlb	0	; () banked
  2425  00071E  196C               	xorwf	printf@c& (0+255),w,b
  2426  000720  B4D8               	btfsc	status,2,c
  2427  000722  D02D               	goto	l2454
  2428  000724  D001               	goto	l2442
  2429                           
  2430                           ; BSR set to: 0
  2431  000726  D02B               	goto	l2454
  2432  000728                     l2442:
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2436  000728  0100               	movlb	0	; () banked
  2437  00072A  516C               	movf	printf@c& (0+255),w,b
  2438  00072C  0D04               	mullw	4
  2439  00072E  0E15               	movlw	low _hexpowers
  2440  000730  24F3               	addwf	prodl,w,c
  2441  000732  6EF6               	movwf	tblptrl,c
  2442  000734  0E3F               	movlw	high _hexpowers
  2443  000736  20F4               	addwfc	prodh,w,c
  2444  000738  6EF7               	movwf	tblptrh,c
  2445  00073A                     	if	0	;There are less than 3 active tblptr bytes
  2446  00073A                     	endif
  2447  00073A  0009               	tblrd		*+
  2448  00073C  50F5               	movf	tablat,w,c
  2449  00073E  0100               	movlb	0	; () banked
  2450  000740  5D65               	subwf	printf@val& (0+255),w,b
  2451  000742  0009               	tblrd		*+
  2452  000744  50F5               	movf	tablat,w,c
  2453  000746  0100               	movlb	0	; () banked
  2454  000748  5966               	subwfb	(printf@val+1)& (0+255),w,b
  2455  00074A  0009               	tblrd		*+
  2456  00074C  50F5               	movf	tablat,w,c
  2457  00074E  0100               	movlb	0	; () banked
  2458  000750  5967               	subwfb	(printf@val+2)& (0+255),w,b
  2459  000752  0009               	tblrd		*+
  2460  000754  50F5               	movf	tablat,w,c
  2461  000756  0100               	movlb	0	; () banked
  2462  000758  5968               	subwfb	(printf@val+3)& (0+255),w,b
  2463  00075A  A0D8               	btfss	status,0,c
  2464  00075C  D010               	goto	l2454
  2465  00075E  D001               	goto	l2446
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;doprnt.c: 1318: break;
  2469  000760  D00E               	goto	l2454
  2470  000762                     l2446:
  2471                           
  2472                           ; BSR set to: 0
  2473  000762  0100               	movlb	0	; () banked
  2474  000764  2B6C               	incf	printf@c& (0+255),f,b
  2475  000766  D7D9               	goto	l2438
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;doprnt.c: 1336: }
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;doprnt.c: 1320: break;
  2482                           
  2483                           ; BSR set to: 0
  2484  000768  D00A               	goto	l2454
  2485  00076A                     l2452:
  2486                           
  2487                           ; BSR set to: 0
  2488  00076A  0100               	movlb	0	; () banked
  2489  00076C  5169               	movf	printf@flag& (0+255),w,b
  2490  00076E  0BC0               	andlw	192
  2491                           
  2492                           ; Switch size 1, requested type "space"
  2493                           ; Number of cases is 2, Range of values is 128 to 192
  2494                           ; switch strategies available:
  2495                           ; Name         Instructions Cycles
  2496                           ; simple_byte            7     4 (average)
  2497                           ;	Chosen strategy is simple_byte
  2498  000770  0A80               	xorlw	128	; case 128
  2499  000772  B4D8               	btfsc	status,2,c
  2500  000774  D7CF               	goto	l2436
  2501  000776  0A40               	xorlw	64	; case 192
  2502  000778  B4D8               	btfsc	status,2,c
  2503  00077A  D7A1               	goto	l2422
  2504  00077C  D000               	goto	l2454
  2505  00077E                     l2454:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;doprnt.c: 1381: if(width > c)
  2509  00077E  0E80               	movlw	128
  2510  000780  0100               	movlb	0	; () banked
  2511  000782  BF6C               	btfsc	printf@c& (0+255),7,b
  2512  000784  0E7F               	movlw	127
  2513  000786  6E2D               	movwf	??_printf& (0+255),c
  2514  000788  0100               	movlb	0	; () banked
  2515  00078A  516A               	movf	printf@width& (0+255),w,b
  2516  00078C  0100               	movlb	0	; () banked
  2517  00078E  5D6C               	subwf	printf@c& (0+255),w,b
  2518  000790  0100               	movlb	0	; () banked
  2519  000792  516B               	movf	(printf@width+1)& (0+255),w,b
  2520  000794  0A80               	xorlw	128
  2521  000796  582D               	subwfb	??_printf& (0+255),w,c
  2522  000798  B0D8               	btfsc	status,0,c
  2523  00079A  D00B               	goto	l2458
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;doprnt.c: 1382: width -= c;
  2527  00079C  0100               	movlb	0	; () banked
  2528  00079E  516C               	movf	printf@c& (0+255),w,b
  2529  0007A0  0100               	movlb	0	; () banked
  2530  0007A2  5F6A               	subwf	printf@width& (0+255),f,b
  2531  0007A4  0E00               	movlw	0
  2532  0007A6  0100               	movlb	0	; () banked
  2533  0007A8  BF6C               	btfsc	printf@c& (0+255),7,b
  2534  0007AA  0EFF               	movlw	255
  2535  0007AC  0100               	movlb	0	; () banked
  2536  0007AE  5B6B               	subwfb	(printf@width+1)& (0+255),f,b
  2537  0007B0  D006               	goto	l2460
  2538  0007B2                     l2458:
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;doprnt.c: 1383: else
  2542                           ;doprnt.c: 1384: width = 0;
  2543  0007B2  0E00               	movlw	0
  2544  0007B4  0100               	movlb	0	; () banked
  2545  0007B6  6F6B               	movwf	(printf@width+1)& (0+255),b
  2546  0007B8  0E00               	movlw	0
  2547  0007BA  6F6A               	movwf	printf@width& (0+255),b
  2548  0007BC  D000               	goto	l2460
  2549  0007BE                     l2460:
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;doprnt.c: 1387: if(flag & 0x04) {
  2553  0007BE  0100               	movlb	0	; () banked
  2554  0007C0  A569               	btfss	printf@flag& (0+255),2,b
  2555  0007C2  D015               	goto	l2468
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 1415: if(width)
  2559  0007C4  0100               	movlb	0	; () banked
  2560  0007C6  516A               	movf	printf@width& (0+255),w,b
  2561  0007C8  0100               	movlb	0	; () banked
  2562  0007CA  116B               	iorwf	(printf@width+1)& (0+255),w,b
  2563  0007CC  B4D8               	btfsc	status,2,c
  2564  0007CE  D024               	goto	l2474
  2565  0007D0                     l2464:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;doprnt.c: 1417: (putch('0') );
  2569  0007D0  0E30               	movlw	48
  2570  0007D2  EC1D  F007         	call	_putch
  2571                           
  2572                           ;doprnt.c: 1418: while(--width);
  2573  0007D6  0100               	movlb	0	; () banked
  2574  0007D8  076A               	decf	printf@width& (0+255),f,b
  2575  0007DA  A0D8               	btfss	status,0,c
  2576  0007DC  076B               	decf	(printf@width+1)& (0+255),f,b
  2577  0007DE  0100               	movlb	0	; () banked
  2578  0007E0  516A               	movf	printf@width& (0+255),w,b
  2579  0007E2  0100               	movlb	0	; () banked
  2580  0007E4  116B               	iorwf	(printf@width+1)& (0+255),w,b
  2581  0007E6  B4D8               	btfsc	status,2,c
  2582  0007E8  D017               	goto	l2474
  2583  0007EA  D7F2               	goto	l2464
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 1420: } else
  2587                           
  2588                           ; BSR set to: 0
  2589  0007EC  D015               	goto	l2474
  2590  0007EE                     l2468:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 1422: {
  2594                           ;doprnt.c: 1424: if(width
  2595                           ;doprnt.c: 1428: )
  2596  0007EE  0100               	movlb	0	; () banked
  2597  0007F0  516A               	movf	printf@width& (0+255),w,b
  2598  0007F2  0100               	movlb	0	; () banked
  2599  0007F4  116B               	iorwf	(printf@width+1)& (0+255),w,b
  2600  0007F6  B4D8               	btfsc	status,2,c
  2601  0007F8  D00F               	goto	l2474
  2602  0007FA                     l2470:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;doprnt.c: 1430: (putch(' ') );
  2606  0007FA  0E20               	movlw	32
  2607  0007FC  EC1D  F007         	call	_putch
  2608                           
  2609                           ;doprnt.c: 1431: while(--width);
  2610  000800  0100               	movlb	0	; () banked
  2611  000802  076A               	decf	printf@width& (0+255),f,b
  2612  000804  A0D8               	btfss	status,0,c
  2613  000806  076B               	decf	(printf@width+1)& (0+255),f,b
  2614  000808  0100               	movlb	0	; () banked
  2615  00080A  516A               	movf	printf@width& (0+255),w,b
  2616  00080C  0100               	movlb	0	; () banked
  2617  00080E  116B               	iorwf	(printf@width+1)& (0+255),w,b
  2618  000810  B4D8               	btfsc	status,2,c
  2619  000812  D002               	goto	l2474
  2620  000814  D7F2               	goto	l2470
  2621                           
  2622                           ; BSR set to: 0
  2623                           
  2624                           ; BSR set to: 0
  2625  000816  D000               	goto	l2474
  2626  000818                     l2474:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;doprnt.c: 1469: }
  2630                           ;doprnt.c: 1472: prec = c;
  2631  000818  0100               	movlb	0	; () banked
  2632  00081A  516C               	movf	printf@c& (0+255),w,b
  2633  00081C  0100               	movlb	0	; () banked
  2634  00081E  6F63               	movwf	printf@prec& (0+255),b
  2635  000820  6B64               	clrf	(printf@prec+1)& (0+255),b
  2636  000822  BF63               	btfsc	printf@prec& (0+255),7,b
  2637  000824  0764               	decf	(printf@prec+1)& (0+255),f,b
  2638                           
  2639                           ;doprnt.c: 1474: while(prec--) {
  2640  000826  D084               	goto	l2488
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  2644  000828  D074               	goto	l2484
  2645  00082A                     l2476:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2649  00082A  C063  F02D         	movff	printf@prec,??_printf
  2650  00082E  C064  F02E         	movff	printf@prec+1,??_printf+1
  2651  000832  90D8               	bcf	status,0,c
  2652  000834  362D               	rlcf	??_printf,f,c
  2653  000836  362E               	rlcf	??_printf+1,f,c
  2654  000838  90D8               	bcf	status,0,c
  2655  00083A  362D               	rlcf	??_printf,f,c
  2656  00083C  362E               	rlcf	??_printf+1,f,c
  2657  00083E  0EED               	movlw	low _dpowers
  2658  000840  242D               	addwf	??_printf,w,c
  2659  000842  6EF6               	movwf	tblptrl,c
  2660  000844  0E3E               	movlw	high _dpowers
  2661  000846  202E               	addwfc	??_printf+1,w,c
  2662  000848  6EF7               	movwf	tblptrh,c
  2663  00084A                     	if	0	;There are less than 3 active tblptr bytes
  2664  00084A                     	endif
  2665  00084A  0009               	tblrd		*+
  2666  00084C  CFF5 F015          	movff	tablat,___lldiv@divisor
  2667  000850  0009               	tblrd		*+
  2668  000852  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2669  000856  0009               	tblrd		*+
  2670  000858  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2671  00085C  000A               	tblrd		*-
  2672  00085E  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2673  000862  C065  F011         	movff	printf@val,___lldiv@dividend
  2674  000866  C066  F012         	movff	printf@val+1,___lldiv@dividend+1
  2675  00086A  C067  F013         	movff	printf@val+2,___lldiv@dividend+2
  2676  00086E  C068  F014         	movff	printf@val+3,___lldiv@dividend+3
  2677  000872  ECB5  F004         	call	___lldiv	;wreg free
  2678  000876  C011  F01E         	movff	?___lldiv,___llmod@dividend
  2679  00087A  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  2680  00087E  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  2681  000882  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  2682  000886  0E0A               	movlw	10
  2683  000888  6E22               	movwf	___llmod@divisor,c
  2684  00088A  0E00               	movlw	0
  2685  00088C  6E23               	movwf	___llmod@divisor+1,c
  2686  00088E  0E00               	movlw	0
  2687  000890  6E24               	movwf	___llmod@divisor+2,c
  2688  000892  0E00               	movlw	0
  2689  000894  6E25               	movwf	___llmod@divisor+3,c
  2690  000896  EC3F  F005         	call	___llmod	;wreg free
  2691  00089A  501E               	movf	?___llmod,w,c
  2692  00089C  0F30               	addlw	48
  2693  00089E  0100               	movlb	0	; () banked
  2694  0008A0  6F6C               	movwf	printf@c& (0+255),b
  2695                           
  2696                           ;doprnt.c: 1491: break;
  2697  0008A2  D041               	goto	l2486
  2698  0008A4                     l2478:
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;doprnt.c: 1499: {
  2702                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2703  0008A4  C065  F011         	movff	printf@val,___lldiv@dividend
  2704  0008A8  C066  F012         	movff	printf@val+1,___lldiv@dividend+1
  2705  0008AC  C067  F013         	movff	printf@val+2,___lldiv@dividend+2
  2706  0008B0  C068  F014         	movff	printf@val+3,___lldiv@dividend+3
  2707  0008B4  C063  F02D         	movff	printf@prec,??_printf
  2708  0008B8  C064  F02E         	movff	printf@prec+1,??_printf+1
  2709  0008BC  90D8               	bcf	status,0,c
  2710  0008BE  362D               	rlcf	??_printf,f,c
  2711  0008C0  362E               	rlcf	??_printf+1,f,c
  2712  0008C2  90D8               	bcf	status,0,c
  2713  0008C4  362D               	rlcf	??_printf,f,c
  2714  0008C6  362E               	rlcf	??_printf+1,f,c
  2715  0008C8  0E15               	movlw	low _hexpowers
  2716  0008CA  242D               	addwf	??_printf,w,c
  2717  0008CC  6EF6               	movwf	tblptrl,c
  2718  0008CE  0E3F               	movlw	high _hexpowers
  2719  0008D0  202E               	addwfc	??_printf+1,w,c
  2720  0008D2  6EF7               	movwf	tblptrh,c
  2721  0008D4                     	if	0	;There are less than 3 active tblptr bytes
  2722  0008D4                     	endif
  2723  0008D4  0009               	tblrd		*+
  2724  0008D6  CFF5 F015          	movff	tablat,___lldiv@divisor
  2725  0008DA  0009               	tblrd		*+
  2726  0008DC  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2727  0008E0  0009               	tblrd		*+
  2728  0008E2  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2729  0008E6  000A               	tblrd		*-
  2730  0008E8  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2731  0008EC  ECB5  F004         	call	___lldiv	;wreg free
  2732  0008F0  5011               	movf	?___lldiv,w,c
  2733  0008F2  0B0F               	andlw	15
  2734  0008F4  0100               	movlb	0	; () banked
  2735  0008F6  6F60               	movwf	printf@idx& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  2739  0008F8  0100               	movlb	0	; () banked
  2740  0008FA  5160               	movf	printf@idx& (0+255),w,b
  2741  0008FC  0D01               	mullw	1
  2742  0008FE  0E35               	movlw	low STR_14
  2743  000900  24F3               	addwf	prodl,w,c
  2744  000902  6EF6               	movwf	tblptrl,c
  2745  000904  0E3F               	movlw	high STR_14
  2746  000906  20F4               	addwfc	prodh,w,c
  2747  000908  6EF7               	movwf	tblptrh,c
  2748  00090A                     	if	0	;There are less than 3 active tblptr bytes
  2749  00090A                     	endif
  2750  00090A  0008               	tblrd		*
  2751  00090C  CFF5 F06C          	movff	tablat,printf@c
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 1523: }
  2755                           
  2756                           ;doprnt.c: 1508: }
  2757                           ;doprnt.c: 1510: break;
  2758  000910  D00A               	goto	l2486
  2759  000912                     l2484:
  2760                           
  2761                           ; BSR set to: 0
  2762  000912  0100               	movlb	0	; () banked
  2763  000914  5169               	movf	printf@flag& (0+255),w,b
  2764  000916  0BC0               	andlw	192
  2765                           
  2766                           ; Switch size 1, requested type "space"
  2767                           ; Number of cases is 2, Range of values is 128 to 192
  2768                           ; switch strategies available:
  2769                           ; Name         Instructions Cycles
  2770                           ; simple_byte            7     4 (average)
  2771                           ;	Chosen strategy is simple_byte
  2772  000918  0A80               	xorlw	128	; case 128
  2773  00091A  B4D8               	btfsc	status,2,c
  2774  00091C  D7C3               	goto	l2478
  2775  00091E  0A40               	xorlw	64	; case 192
  2776  000920  B4D8               	btfsc	status,2,c
  2777  000922  D783               	goto	l2476
  2778  000924  D000               	goto	l2486
  2779  000926                     l2486:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;doprnt.c: 1524: (putch(c) );
  2783  000926  0100               	movlb	0	; () banked
  2784  000928  516C               	movf	printf@c& (0+255),w,b
  2785  00092A  EC1D  F007         	call	_putch
  2786  00092E  D000               	goto	l2488
  2787  000930                     l2488:
  2788  000930  0100               	movlb	0	; () banked
  2789  000932  0763               	decf	printf@prec& (0+255),f,b
  2790  000934  A0D8               	btfss	status,0,c
  2791  000936  0764               	decf	(printf@prec+1)& (0+255),f,b
  2792  000938  0100               	movlb	0	; () banked
  2793  00093A  2963               	incf	printf@prec& (0+255),w,b
  2794  00093C  E1EA               	bnz	l2484
  2795  00093E  0100               	movlb	0	; () banked
  2796  000940  2964               	incf	(printf@prec+1)& (0+255),w,b
  2797  000942  B4D8               	btfsc	status,2,c
  2798  000944  D002               	goto	l2490
  2799  000946  D7E5               	goto	l2484
  2800                           
  2801                           ; BSR set to: 0
  2802  000948  D000               	goto	l2490
  2803  00094A                     l2490:
  2804  00094A  C027  FFF6         	movff	printf@f,tblptrl
  2805  00094E  C028  FFF7         	movff	printf@f+1,tblptrh
  2806  000952  4A27               	infsnz	printf@f,f,c
  2807  000954  2A28               	incf	printf@f+1,f,c
  2808  000956                     	if	0	;tblptru may be non-zero
  2809  000956                     	endif
  2810  000956                     	if	0	;tblptru may be non-zero
  2811  000956                     	endif
  2812  000956  0008               	tblrd		*
  2813  000958  CFF5 F06C          	movff	tablat,printf@c
  2814  00095C  0100               	movlb	0	; () banked
  2815  00095E  516C               	movf	printf@c& (0+255),w,b
  2816  000960  B4D8               	btfsc	status,2,c
  2817  000962  0012               	return	
  2818  000964  D5F8               	goto	l2380
  2819                           
  2820                           ; BSR set to: 0
  2821  000966  0012               	return	
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;doprnt.c: 1540: return 0;
  2825                           ;	Return value of _printf is never used
  2826                           
  2827                           ;doprnt.c: 1525: }
  2828                           ;doprnt.c: 1533: }
  2829                           ;doprnt.c: 1535: alldone:
  2830  000968  0012               	return		;funcret
  2831  00096A                     __end_of_printf:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           tblptrh	equ	0xFF7
  2835                           tblptrl	equ	0xFF6
  2836                           tablat	equ	0xFF5
  2837                           prodh	equ	0xFF4
  2838                           prodl	equ	0xFF3
  2839                           intcon	equ	0xFF2
  2840                           postinc0	equ	0xFEE
  2841                           wreg	equ	0xFE8
  2842                           postdec1	equ	0xFE5
  2843                           fsr1l	equ	0xFE1
  2844                           postinc2	equ	0xFDE
  2845                           postdec2	equ	0xFDD
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function _putch *****************
  2851 ;; Defined at:
  2852 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  txData          1    wreg     unsigned char 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  txData          1   17[COMRAM] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;		None               void
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2866 ;;      Params:         0       0       0       0
  2867 ;;      Locals:         1       0       0       0
  2868 ;;      Temps:          0       0       0       0
  2869 ;;      Totals:         1       0       0       0
  2870 ;;Total ram usage:        1 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    4
  2873 ;; This function calls:
  2874 ;;		_EUSART1_Write
  2875 ;; This function is called by:
  2876 ;;		_printf
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text6
  2881  000E3A                     __ptext6:
  2882                           	opt stack 0
  2883  000E3A                     _putch:
  2884                           	opt stack 25
  2885                           
  2886                           ;incstack = 0
  2887                           ;putch@txData stored from wreg
  2888  000E3A  6E12               	movwf	putch@txData,c
  2889                           
  2890                           ;eusart1.c: 112: EUSART1_Write(txData);
  2891  000E3C  5012               	movf	putch@txData,w,c
  2892  000E3E  ECFA  F006         	call	_EUSART1_Write
  2893  000E42  0012               	return		;funcret
  2894  000E44                     __end_of_putch:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           prodh	equ	0xFF4
  2901                           prodl	equ	0xFF3
  2902                           intcon	equ	0xFF2
  2903                           postinc0	equ	0xFEE
  2904                           wreg	equ	0xFE8
  2905                           postdec1	equ	0xFE5
  2906                           fsr1l	equ	0xFE1
  2907                           postinc2	equ	0xFDE
  2908                           postdec2	equ	0xFDD
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function _EUSART1_Write *****************
  2914 ;; Defined at:
  2915 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;  txData          1    wreg     unsigned char 
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;  txData          1   16[COMRAM] unsigned char 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;		None               void
  2922 ;; Registers used:
  2923 ;;		wreg
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2929 ;;      Params:         0       0       0       0
  2930 ;;      Locals:         1       0       0       0
  2931 ;;      Temps:          0       0       0       0
  2932 ;;      Totals:         1       0       0       0
  2933 ;;Total ram usage:        1 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    3
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_putch
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text7
  2944  000DF4                     __ptext7:
  2945                           	opt stack 0
  2946  000DF4                     _EUSART1_Write:
  2947                           	opt stack 25
  2948                           
  2949                           ;incstack = 0
  2950                           ;EUSART1_Write@txData stored from wreg
  2951  000DF4  6E11               	movwf	EUSART1_Write@txData,c
  2952                           
  2953                           ;eusart1.c: 98: while(0 == PIR1bits.TX1IF)
  2954  000DF6  D000               	goto	l213
  2955  000DF8                     l213:
  2956  000DF8  A89E               	btfss	3998,4,c	;volatile
  2957  000DFA  D7FE               	goto	l213
  2958                           
  2959                           ;eusart1.c: 100: }
  2960                           ;eusart1.c: 102: TXREG1 = txData;
  2961  000DFC  C011  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2962  000E00  0012               	return		;funcret
  2963  000E02                     __end_of_EUSART1_Write:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           postdec1	equ	0xFE5
  2975                           fsr1l	equ	0xFE1
  2976                           postinc2	equ	0xFDE
  2977                           postdec2	equ	0xFDD
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _isdigit *****************
  2983 ;; Defined at:
  2984 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  c               1    wreg     unsigned char 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  c               1   18[COMRAM] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;		None               void
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2998 ;;      Params:         0       0       0       0
  2999 ;;      Locals:         2       0       0       0
  3000 ;;      Temps:          1       0       0       0
  3001 ;;      Totals:         3       0       0       0
  3002 ;;Total ram usage:        3 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    3
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_printf
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text8
  3013  000D50                     __ptext8:
  3014                           	opt stack 0
  3015  000D50                     _isdigit:
  3016                           	opt stack 26
  3017                           
  3018                           ;incstack = 0
  3019                           ;isdigit@c stored from wreg
  3020  000D50  6E13               	movwf	isdigit@c,c
  3021  000D52  0E00               	movlw	0
  3022  000D54  6E12               	movwf	_isdigit$2180,c
  3023  000D56  0E3A               	movlw	58
  3024  000D58  6013               	cpfslt	isdigit@c,c
  3025  000D5A  D006               	goto	l2282
  3026  000D5C  0E2F               	movlw	47
  3027  000D5E  6413               	cpfsgt	isdigit@c,c
  3028  000D60  D003               	goto	l2282
  3029  000D62  0E01               	movlw	1
  3030  000D64  6E12               	movwf	_isdigit$2180,c
  3031  000D66  D000               	goto	l2282
  3032  000D68                     l2282:
  3033  000D68  C012  F011         	movff	_isdigit$2180,??_isdigit
  3034  000D6C  3011               	rrcf	??_isdigit,w,c
  3035  000D6E  0012               	return	
  3036  000D70  0012               	return		;funcret
  3037  000D72                     __end_of_isdigit:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           intcon	equ	0xFF2
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           postinc2	equ	0xFDE
  3051                           postdec2	equ	0xFDD
  3052                           fsr2h	equ	0xFDA
  3053                           fsr2l	equ	0xFD9
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function ___wmul *****************
  3057 ;; Defined at:
  3058 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  multiplier      2   16[COMRAM] unsigned int 
  3061 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  product         2   20[COMRAM] unsigned int 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  2   16[COMRAM] unsigned int 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, prodl, prodh
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3073 ;;      Params:         4       0       0       0
  3074 ;;      Locals:         2       0       0       0
  3075 ;;      Temps:          0       0       0       0
  3076 ;;      Totals:         6       0       0       0
  3077 ;;Total ram usage:        6 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    3
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_printf
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text9
  3088  000D00                     __ptext9:
  3089                           	opt stack 0
  3090  000D00                     ___wmul:
  3091                           	opt stack 26
  3092                           
  3093                           ;incstack = 0
  3094  000D00  5011               	movf	___wmul@multiplier,w,c
  3095  000D02  0213               	mulwf	___wmul@multiplicand,c
  3096  000D04  CFF3 F015          	movff	prodl,___wmul@product
  3097  000D08  CFF4 F016          	movff	prodh,___wmul@product+1
  3098  000D0C  5011               	movf	___wmul@multiplier,w,c
  3099  000D0E  0214               	mulwf	___wmul@multiplicand+1,c
  3100  000D10  50F3               	movf	prodl,w,c
  3101  000D12  2616               	addwf	___wmul@product+1,f,c
  3102  000D14  5012               	movf	___wmul@multiplier+1,w,c
  3103  000D16  0213               	mulwf	___wmul@multiplicand,c
  3104  000D18  50F3               	movf	prodl,w,c
  3105  000D1A  2616               	addwf	___wmul@product+1,f,c
  3106  000D1C  C015  F011         	movff	___wmul@product,?___wmul
  3107  000D20  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3108  000D24  0012               	return	
  3109  000D26  0012               	return		;funcret
  3110  000D28                     __end_of___wmul:
  3111                           	opt stack 0
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           prodh	equ	0xFF4
  3117                           prodl	equ	0xFF3
  3118                           intcon	equ	0xFF2
  3119                           postinc0	equ	0xFEE
  3120                           wreg	equ	0xFE8
  3121                           postdec1	equ	0xFE5
  3122                           fsr1l	equ	0xFE1
  3123                           postinc2	equ	0xFDE
  3124                           postdec2	equ	0xFDD
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function ___llmod *****************
  3130 ;; Defined at:
  3131 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\llmod.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  dividend        4   29[COMRAM] unsigned long 
  3134 ;;  divisor         4   33[COMRAM] unsigned long 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  counter         1   37[COMRAM] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  4   29[COMRAM] unsigned long 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3146 ;;      Params:         8       0       0       0
  3147 ;;      Locals:         1       0       0       0
  3148 ;;      Temps:          0       0       0       0
  3149 ;;      Totals:         9       0       0       0
  3150 ;;Total ram usage:        9 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    3
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_printf
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text10
  3161  000A7E                     __ptext10:
  3162                           	opt stack 0
  3163  000A7E                     ___llmod:
  3164                           	opt stack 26
  3165                           
  3166                           ;incstack = 0
  3167  000A7E  5022               	movf	___llmod@divisor,w,c
  3168  000A80  1023               	iorwf	___llmod@divisor+1,w,c
  3169  000A82  1024               	iorwf	___llmod@divisor+2,w,c
  3170  000A84  1025               	iorwf	___llmod@divisor+3,w,c
  3171  000A86  B4D8               	btfsc	status,2,c
  3172  000A88  D029               	goto	l998
  3173  000A8A  0E01               	movlw	1
  3174  000A8C  6E26               	movwf	___llmod@counter,c
  3175  000A8E  D007               	goto	l2320
  3176  000A90                     l2318:
  3177  000A90  90D8               	bcf	status,0,c
  3178  000A92  3622               	rlcf	___llmod@divisor,f,c
  3179  000A94  3623               	rlcf	___llmod@divisor+1,f,c
  3180  000A96  3624               	rlcf	___llmod@divisor+2,f,c
  3181  000A98  3625               	rlcf	___llmod@divisor+3,f,c
  3182  000A9A  2A26               	incf	___llmod@counter,f,c
  3183  000A9C  D000               	goto	l2320
  3184  000A9E                     l2320:
  3185  000A9E  BE25               	btfsc	___llmod@divisor+3,7,c
  3186  000AA0  D002               	goto	l2322
  3187  000AA2  D7F6               	goto	l2318
  3188  000AA4  D000               	goto	l2322
  3189  000AA6                     l2322:
  3190  000AA6  5022               	movf	___llmod@divisor,w,c
  3191  000AA8  5C1E               	subwf	___llmod@dividend,w,c
  3192  000AAA  5023               	movf	___llmod@divisor+1,w,c
  3193  000AAC  581F               	subwfb	___llmod@dividend+1,w,c
  3194  000AAE  5024               	movf	___llmod@divisor+2,w,c
  3195  000AB0  5820               	subwfb	___llmod@dividend+2,w,c
  3196  000AB2  5025               	movf	___llmod@divisor+3,w,c
  3197  000AB4  5821               	subwfb	___llmod@dividend+3,w,c
  3198  000AB6  A0D8               	btfss	status,0,c
  3199  000AB8  D009               	goto	l2326
  3200  000ABA  5022               	movf	___llmod@divisor,w,c
  3201  000ABC  5E1E               	subwf	___llmod@dividend,f,c
  3202  000ABE  5023               	movf	___llmod@divisor+1,w,c
  3203  000AC0  5A1F               	subwfb	___llmod@dividend+1,f,c
  3204  000AC2  5024               	movf	___llmod@divisor+2,w,c
  3205  000AC4  5A20               	subwfb	___llmod@dividend+2,f,c
  3206  000AC6  5025               	movf	___llmod@divisor+3,w,c
  3207  000AC8  5A21               	subwfb	___llmod@dividend+3,f,c
  3208  000ACA  D000               	goto	l2326
  3209  000ACC                     l2326:
  3210  000ACC  90D8               	bcf	status,0,c
  3211  000ACE  3225               	rrcf	___llmod@divisor+3,f,c
  3212  000AD0  3224               	rrcf	___llmod@divisor+2,f,c
  3213  000AD2  3223               	rrcf	___llmod@divisor+1,f,c
  3214  000AD4  3222               	rrcf	___llmod@divisor,f,c
  3215  000AD6  2E26               	decfsz	___llmod@counter,f,c
  3216  000AD8  D7E6               	goto	l2322
  3217  000ADA  D000               	goto	l998
  3218  000ADC                     l998:
  3219  000ADC  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3220  000AE0  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3221  000AE4  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3222  000AE8  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3223  000AEC  0012               	return		;funcret
  3224  000AEE                     __end_of___llmod:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           postdec1	equ	0xFE5
  3236                           fsr1l	equ	0xFE1
  3237                           postinc2	equ	0xFDE
  3238                           postdec2	equ	0xFDD
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function ___lldiv *****************
  3244 ;; Defined at:
  3245 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  dividend        4   16[COMRAM] unsigned long 
  3248 ;;  divisor         4   20[COMRAM] unsigned long 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  quotient        4   24[COMRAM] unsigned long 
  3251 ;;  counter         1   28[COMRAM] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  4   16[COMRAM] unsigned long 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3261 ;;      Params:         8       0       0       0
  3262 ;;      Locals:         5       0       0       0
  3263 ;;      Temps:          0       0       0       0
  3264 ;;      Totals:        13       0       0       0
  3265 ;;Total ram usage:       13 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    3
  3268 ;; This function calls:
  3269 ;;		Nothing
  3270 ;; This function is called by:
  3271 ;;		_printf
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text11
  3276  00096A                     __ptext11:
  3277                           	opt stack 0
  3278  00096A                     ___lldiv:
  3279                           	opt stack 26
  3280                           
  3281                           ;incstack = 0
  3282  00096A  0E00               	movlw	0
  3283  00096C  6E19               	movwf	___lldiv@quotient,c
  3284  00096E  0E00               	movlw	0
  3285  000970  6E1A               	movwf	___lldiv@quotient+1,c
  3286  000972  0E00               	movlw	0
  3287  000974  6E1B               	movwf	___lldiv@quotient+2,c
  3288  000976  0E00               	movlw	0
  3289  000978  6E1C               	movwf	___lldiv@quotient+3,c
  3290  00097A  5015               	movf	___lldiv@divisor,w,c
  3291  00097C  1016               	iorwf	___lldiv@divisor+1,w,c
  3292  00097E  1017               	iorwf	___lldiv@divisor+2,w,c
  3293  000980  1018               	iorwf	___lldiv@divisor+3,w,c
  3294  000982  B4D8               	btfsc	status,2,c
  3295  000984  D02F               	goto	l988
  3296  000986  0E01               	movlw	1
  3297  000988  6E1D               	movwf	___lldiv@counter,c
  3298  00098A  D007               	goto	l2300
  3299  00098C                     l2298:
  3300  00098C  90D8               	bcf	status,0,c
  3301  00098E  3615               	rlcf	___lldiv@divisor,f,c
  3302  000990  3616               	rlcf	___lldiv@divisor+1,f,c
  3303  000992  3617               	rlcf	___lldiv@divisor+2,f,c
  3304  000994  3618               	rlcf	___lldiv@divisor+3,f,c
  3305  000996  2A1D               	incf	___lldiv@counter,f,c
  3306  000998  D000               	goto	l2300
  3307  00099A                     l2300:
  3308  00099A  BE18               	btfsc	___lldiv@divisor+3,7,c
  3309  00099C  D002               	goto	l2302
  3310  00099E  D7F6               	goto	l2298
  3311  0009A0  D000               	goto	l2302
  3312  0009A2                     l2302:
  3313  0009A2  90D8               	bcf	status,0,c
  3314  0009A4  3619               	rlcf	___lldiv@quotient,f,c
  3315  0009A6  361A               	rlcf	___lldiv@quotient+1,f,c
  3316  0009A8  361B               	rlcf	___lldiv@quotient+2,f,c
  3317  0009AA  361C               	rlcf	___lldiv@quotient+3,f,c
  3318  0009AC  5015               	movf	___lldiv@divisor,w,c
  3319  0009AE  5C11               	subwf	___lldiv@dividend,w,c
  3320  0009B0  5016               	movf	___lldiv@divisor+1,w,c
  3321  0009B2  5812               	subwfb	___lldiv@dividend+1,w,c
  3322  0009B4  5017               	movf	___lldiv@divisor+2,w,c
  3323  0009B6  5813               	subwfb	___lldiv@dividend+2,w,c
  3324  0009B8  5018               	movf	___lldiv@divisor+3,w,c
  3325  0009BA  5814               	subwfb	___lldiv@dividend+3,w,c
  3326  0009BC  A0D8               	btfss	status,0,c
  3327  0009BE  D00A               	goto	l2310
  3328  0009C0  5015               	movf	___lldiv@divisor,w,c
  3329  0009C2  5E11               	subwf	___lldiv@dividend,f,c
  3330  0009C4  5016               	movf	___lldiv@divisor+1,w,c
  3331  0009C6  5A12               	subwfb	___lldiv@dividend+1,f,c
  3332  0009C8  5017               	movf	___lldiv@divisor+2,w,c
  3333  0009CA  5A13               	subwfb	___lldiv@dividend+2,f,c
  3334  0009CC  5018               	movf	___lldiv@divisor+3,w,c
  3335  0009CE  5A14               	subwfb	___lldiv@dividend+3,f,c
  3336  0009D0  8019               	bsf	___lldiv@quotient,0,c
  3337  0009D2  D000               	goto	l2310
  3338  0009D4                     l2310:
  3339  0009D4  90D8               	bcf	status,0,c
  3340  0009D6  3218               	rrcf	___lldiv@divisor+3,f,c
  3341  0009D8  3217               	rrcf	___lldiv@divisor+2,f,c
  3342  0009DA  3216               	rrcf	___lldiv@divisor+1,f,c
  3343  0009DC  3215               	rrcf	___lldiv@divisor,f,c
  3344  0009DE  2E1D               	decfsz	___lldiv@counter,f,c
  3345  0009E0  D7E0               	goto	l2302
  3346  0009E2  D000               	goto	l988
  3347  0009E4                     l988:
  3348  0009E4  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3349  0009E8  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3350  0009EC  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3351  0009F0  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3352  0009F4  0012               	return		;funcret
  3353  0009F6                     __end_of___lldiv:
  3354                           	opt stack 0
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           postdec1	equ	0xFE5
  3365                           fsr1l	equ	0xFE1
  3366                           postinc2	equ	0xFDE
  3367                           postdec2	equ	0xFDD
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _pi_supply_on *****************
  3373 ;; Defined at:
  3374 ;;		line 466 in file "main.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		None
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3388 ;;      Params:         0       0       0       0
  3389 ;;      Locals:         0       0       0       0
  3390 ;;      Temps:          0       0       0       0
  3391 ;;      Totals:         0       0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    3
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_main
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text12
  3403  000E50                     __ptext12:
  3404                           	opt stack 0
  3405  000E50                     _pi_supply_on:
  3406                           	opt stack 27
  3407                           
  3408                           ;incstack = 0
  3409                           ;main.c: 469: do { LATD2 = 1; } while(0);
  3410  000E50  848C               	bsf	3980,2,c	;volatile
  3411  000E52  0012               	return	
  3412  000E54  0012               	return		;funcret
  3413  000E56                     __end_of_pi_supply_on:
  3414                           	opt stack 0
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           prodh	equ	0xFF4
  3420                           prodl	equ	0xFF3
  3421                           intcon	equ	0xFF2
  3422                           postinc0	equ	0xFEE
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           fsr1l	equ	0xFE1
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _pi_supply_off *****************
  3433 ;; Defined at:
  3434 ;;		line 460 in file "main.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;		None               void
  3441 ;; Registers used:
  3442 ;;		None
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3448 ;;      Params:         0       0       0       0
  3449 ;;      Locals:         0       0       0       0
  3450 ;;      Temps:          0       0       0       0
  3451 ;;      Totals:         0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    3
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_main
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text13
  3463  000E56                     __ptext13:
  3464                           	opt stack 0
  3465  000E56                     _pi_supply_off:
  3466                           	opt stack 27
  3467                           
  3468                           ;incstack = 0
  3469                           ;main.c: 463: do { LATD2 = 0; } while(0);
  3470  000E56  948C               	bcf	3980,2,c	;volatile
  3471  000E58  0012               	return	
  3472  000E5A  0012               	return		;funcret
  3473  000E5C                     __end_of_pi_supply_off:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           intcon	equ	0xFF2
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           fsr1l	equ	0xFE1
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function ___lmul *****************
  3493 ;; Defined at:
  3494 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul32.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  multiplier      4   16[COMRAM] unsigned long 
  3497 ;;  multiplicand    4   20[COMRAM] unsigned long 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  product         4   24[COMRAM] unsigned long 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  4   16[COMRAM] unsigned long 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3509 ;;      Params:         8       0       0       0
  3510 ;;      Locals:         4       0       0       0
  3511 ;;      Temps:          0       0       0       0
  3512 ;;      Totals:        12       0       0       0
  3513 ;;Total ram usage:       12 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    3
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_main
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text14
  3524  000B4E                     __ptext14:
  3525                           	opt stack 0
  3526  000B4E                     ___lmul:
  3527                           	opt stack 27
  3528                           
  3529                           ;incstack = 0
  3530  000B4E  0E00               	movlw	0
  3531  000B50  6E19               	movwf	___lmul@product,c
  3532  000B52  0E00               	movlw	0
  3533  000B54  6E1A               	movwf	___lmul@product+1,c
  3534  000B56  0E00               	movlw	0
  3535  000B58  6E1B               	movwf	___lmul@product+2,c
  3536  000B5A  0E00               	movlw	0
  3537  000B5C  6E1C               	movwf	___lmul@product+3,c
  3538  000B5E  D000               	goto	l2496
  3539  000B60                     l2496:
  3540  000B60  A011               	btfss	___lmul@multiplier,0,c
  3541  000B62  D009               	goto	l2500
  3542  000B64  5015               	movf	___lmul@multiplicand,w,c
  3543  000B66  2619               	addwf	___lmul@product,f,c
  3544  000B68  5016               	movf	___lmul@multiplicand+1,w,c
  3545  000B6A  221A               	addwfc	___lmul@product+1,f,c
  3546  000B6C  5017               	movf	___lmul@multiplicand+2,w,c
  3547  000B6E  221B               	addwfc	___lmul@product+2,f,c
  3548  000B70  5018               	movf	___lmul@multiplicand+3,w,c
  3549  000B72  221C               	addwfc	___lmul@product+3,f,c
  3550  000B74  D000               	goto	l2500
  3551  000B76                     l2500:
  3552  000B76  90D8               	bcf	status,0,c
  3553  000B78  3615               	rlcf	___lmul@multiplicand,f,c
  3554  000B7A  3616               	rlcf	___lmul@multiplicand+1,f,c
  3555  000B7C  3617               	rlcf	___lmul@multiplicand+2,f,c
  3556  000B7E  3618               	rlcf	___lmul@multiplicand+3,f,c
  3557  000B80  90D8               	bcf	status,0,c
  3558  000B82  3214               	rrcf	___lmul@multiplier+3,f,c
  3559  000B84  3213               	rrcf	___lmul@multiplier+2,f,c
  3560  000B86  3212               	rrcf	___lmul@multiplier+1,f,c
  3561  000B88  3211               	rrcf	___lmul@multiplier,f,c
  3562  000B8A  5011               	movf	___lmul@multiplier,w,c
  3563  000B8C  1012               	iorwf	___lmul@multiplier+1,w,c
  3564  000B8E  1013               	iorwf	___lmul@multiplier+2,w,c
  3565  000B90  1014               	iorwf	___lmul@multiplier+3,w,c
  3566  000B92  A4D8               	btfss	status,2,c
  3567  000B94  D7E5               	goto	l2496
  3568  000B96  C019  F011         	movff	___lmul@product,?___lmul
  3569  000B9A  C01A  F012         	movff	___lmul@product+1,?___lmul+1
  3570  000B9E  C01B  F013         	movff	___lmul@product+2,?___lmul+2
  3571  000BA2  C01C  F014         	movff	___lmul@product+3,?___lmul+3
  3572  000BA6  0012               	return		;funcret
  3573  000BA8                     __end_of___lmul:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           intcon	equ	0xFF2
  3582                           postinc0	equ	0xFEE
  3583                           wreg	equ	0xFE8
  3584                           postdec1	equ	0xFE5
  3585                           fsr1l	equ	0xFE1
  3586                           postinc2	equ	0xFDE
  3587                           postdec2	equ	0xFDD
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _TMR5_HasOverflowOccured *****************
  3593 ;; Defined at:
  3594 ;;		line 154 in file "mcc_generated_files/tmr5.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      unsigned char 
  3601 ;; Registers used:
  3602 ;;		wreg
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3608 ;;      Params:         0       0       0       0
  3609 ;;      Locals:         0       0       0       0
  3610 ;;      Temps:          0       0       0       0
  3611 ;;      Totals:         0       0       0       0
  3612 ;;Total ram usage:        0 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    3
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_main
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text15
  3623  000E02                     __ptext15:
  3624                           	opt stack 0
  3625  000E02                     _TMR5_HasOverflowOccured:
  3626                           	opt stack 27
  3627                           
  3628                           ;tmr5.c: 157: return(PIR5bits.TMR5IF);
  3629                           
  3630                           ;incstack = 0
  3631  000E02  A27E               	btfss	3966,1,c	;volatile
  3632  000E04  D002               	goto	u1670
  3633  000E06  0E01               	movlw	1
  3634  000E08  0012               	return	
  3635  000E0A                     u1670:
  3636  000E0A  0E00               	movlw	0
  3637  000E0C  0012               	return	
  3638  000E0E  0012               	return		;funcret
  3639  000E10                     __end_of_TMR5_HasOverflowOccured:
  3640                           	opt stack 0
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           intcon	equ	0xFF2
  3648                           postinc0	equ	0xFEE
  3649                           wreg	equ	0xFE8
  3650                           postdec1	equ	0xFE5
  3651                           fsr1l	equ	0xFE1
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _TMR0_HasOverflowOccured *****************
  3659 ;; Defined at:
  3660 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      unsigned char 
  3667 ;; Registers used:
  3668 ;;		wreg
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3674 ;;      Params:         0       0       0       0
  3675 ;;      Locals:         0       0       0       0
  3676 ;;      Temps:          0       0       0       0
  3677 ;;      Totals:         0       0       0       0
  3678 ;;Total ram usage:        0 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    3
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_main
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text16
  3689  000E10                     __ptext16:
  3690                           	opt stack 0
  3691  000E10                     _TMR0_HasOverflowOccured:
  3692                           	opt stack 27
  3693                           
  3694                           ;tmr0.c: 126: return(INTCONbits.TMR0IF);
  3695                           
  3696                           ;incstack = 0
  3697  000E10  A4F2               	btfss	intcon,2,c	;volatile
  3698  000E12  D002               	goto	u1650
  3699  000E14  0E01               	movlw	1
  3700  000E16  0012               	return	
  3701  000E18                     u1650:
  3702  000E18  0E00               	movlw	0
  3703  000E1A  0012               	return	
  3704  000E1C  0012               	return		;funcret
  3705  000E1E                     __end_of_TMR0_HasOverflowOccured:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           postinc0	equ	0xFEE
  3715                           wreg	equ	0xFE8
  3716                           postdec1	equ	0xFE5
  3717                           fsr1l	equ	0xFE1
  3718                           postinc2	equ	0xFDE
  3719                           postdec2	equ	0xFDD
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _SYSTEM_Initialize *****************
  3725 ;; Defined at:
  3726 ;;		line 106 in file "mcc_generated_files/mcc.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;		None
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;		None
  3731 ;; Return value:  Size  Location     Type
  3732 ;;		None               void
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3740 ;;      Params:         0       0       0       0
  3741 ;;      Locals:         0       0       0       0
  3742 ;;      Temps:          0       0       0       0
  3743 ;;      Totals:         0       0       0       0
  3744 ;;Total ram usage:        0 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    5
  3747 ;; This function calls:
  3748 ;;		_ADC_Initialize
  3749 ;;		_EUSART1_Initialize
  3750 ;;		_I2C2_Initialize
  3751 ;;		_INTERRUPT_Initialize
  3752 ;;		_OSCILLATOR_Initialize
  3753 ;;		_PIN_MANAGER_Initialize
  3754 ;;		_TMR0_Initialize
  3755 ;;		_TMR5_Initialize
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text17
  3762  000D72                     __ptext17:
  3763                           	opt stack 0
  3764  000D72                     _SYSTEM_Initialize:
  3765                           	opt stack 25
  3766                           
  3767                           ;mcc.c: 108: OSCILLATOR_Initialize();
  3768                           
  3769                           ;incstack = 0
  3770  000D72  EC0F  F007         	call	_OSCILLATOR_Initialize	;wreg free
  3771                           
  3772                           ;mcc.c: 109: PIN_MANAGER_Initialize();
  3773  000D76  ECFD  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  3774                           
  3775                           ;mcc.c: 110: INTERRUPT_Initialize();
  3776  000D7A  EC31  F007         	call	_INTERRUPT_Initialize	;wreg free
  3777                           
  3778                           ;mcc.c: 111: ADC_Initialize();
  3779  000D7E  ECEF  F006         	call	_ADC_Initialize	;wreg free
  3780                           
  3781                           ;mcc.c: 112: TMR0_Initialize();
  3782  000D82  ECD9  F006         	call	_TMR0_Initialize	;wreg free
  3783                           
  3784                           ;mcc.c: 113: TMR5_Initialize();
  3785  000D86  EC94  F006         	call	_TMR5_Initialize	;wreg free
  3786                           
  3787                           ;mcc.c: 114: EUSART1_Initialize();
  3788  000D8A  ECE4  F006         	call	_EUSART1_Initialize	;wreg free
  3789                           
  3790                           ;mcc.c: 115: I2C2_Initialize();
  3791  000D8E  ECCA  F006         	call	_I2C2_Initialize	;wreg free
  3792  000D92  0012               	return		;funcret
  3793  000D94                     __end_of_SYSTEM_Initialize:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           fsr1l	equ	0xFE1
  3806                           postinc2	equ	0xFDE
  3807                           postdec2	equ	0xFDD
  3808                           fsr2h	equ	0xFDA
  3809                           fsr2l	equ	0xFD9
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _TMR5_Initialize *****************
  3813 ;; Defined at:
  3814 ;;		line 63 in file "mcc_generated_files/tmr5.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;		None               void
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3828 ;;      Params:         0       0       0       0
  3829 ;;      Locals:         0       0       0       0
  3830 ;;      Temps:          0       0       0       0
  3831 ;;      Totals:         0       0       0       0
  3832 ;;Total ram usage:        0 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    4
  3835 ;; This function calls:
  3836 ;;		_TMR5_StartTimer
  3837 ;; This function is called by:
  3838 ;;		_SYSTEM_Initialize
  3839 ;;		_main
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text18
  3844  000D28                     __ptext18:
  3845                           	opt stack 0
  3846  000D28                     _TMR5_Initialize:
  3847                           	opt stack 26
  3848                           
  3849                           ;tmr5.c: 68: T5CON = 0x34;
  3850                           
  3851                           ;incstack = 0
  3852  000D28  0E34               	movlw	52
  3853  000D2A  010F               	movlb	15	; () banked
  3854  000D2C  6F4E               	movwf	78,b	;volatile
  3855                           
  3856                           ;tmr5.c: 71: T5GCON = 0x00;
  3857  000D2E  0E00               	movlw	0
  3858  000D30  010F               	movlb	15	; () banked
  3859  000D32  6F4D               	movwf	77,b	;volatile
  3860                           
  3861                           ;tmr5.c: 74: TMR5H = 0x3C;
  3862  000D34  0E3C               	movlw	60
  3863  000D36  010F               	movlb	15	; () banked
  3864  000D38  6F50               	movwf	80,b	;volatile
  3865                           
  3866                           ;tmr5.c: 77: TMR5L = 0xB0;
  3867  000D3A  0EB0               	movlw	176
  3868  000D3C  010F               	movlb	15	; () banked
  3869  000D3E  6F4F               	movwf	79,b	;volatile
  3870                           
  3871                           ; BSR set to: 15
  3872                           ;tmr5.c: 80: timer5ReloadVal=TMR5;
  3873  000D40  CF4F F07A          	movff	3919,_timer5ReloadVal	;volatile
  3874  000D44  CF50 F07B          	movff	3920,_timer5ReloadVal+1	;volatile
  3875                           
  3876                           ; BSR set to: 15
  3877                           ;tmr5.c: 83: PIR5bits.TMR5IF = 0;
  3878  000D48  927E               	bcf	3966,1,c	;volatile
  3879                           
  3880                           ; BSR set to: 15
  3881                           ;tmr5.c: 86: TMR5_StartTimer();
  3882  000D4A  EC2E  F007         	call	_TMR5_StartTimer	;wreg free
  3883  000D4E  0012               	return		;funcret
  3884  000D50                     __end_of_TMR5_Initialize:
  3885                           	opt stack 0
  3886                           tblptru	equ	0xFF8
  3887                           tblptrh	equ	0xFF7
  3888                           tblptrl	equ	0xFF6
  3889                           tablat	equ	0xFF5
  3890                           prodh	equ	0xFF4
  3891                           prodl	equ	0xFF3
  3892                           intcon	equ	0xFF2
  3893                           postinc0	equ	0xFEE
  3894                           wreg	equ	0xFE8
  3895                           postdec1	equ	0xFE5
  3896                           fsr1l	equ	0xFE1
  3897                           postinc2	equ	0xFDE
  3898                           postdec2	equ	0xFDD
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903 ;; *************** function _TMR5_StartTimer *****************
  3904 ;; Defined at:
  3905 ;;		line 89 in file "mcc_generated_files/tmr5.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;		None               void
  3912 ;; Registers used:
  3913 ;;		None
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3919 ;;      Params:         0       0       0       0
  3920 ;;      Locals:         0       0       0       0
  3921 ;;      Temps:          0       0       0       0
  3922 ;;      Totals:         0       0       0       0
  3923 ;;Total ram usage:        0 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    3
  3926 ;; This function calls:
  3927 ;;		Nothing
  3928 ;; This function is called by:
  3929 ;;		_TMR5_Initialize
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text19
  3934  000E5C                     __ptext19:
  3935                           	opt stack 0
  3936  000E5C                     _TMR5_StartTimer:
  3937                           	opt stack 26
  3938                           
  3939                           ;tmr5.c: 92: T5CONbits.TMR5ON = 1;
  3940                           
  3941                           ;incstack = 0
  3942  000E5C  010F               	movlb	15	; () banked
  3943  000E5E  814E               	bsf	78,0,b	;volatile
  3944                           
  3945                           ; BSR set to: 15
  3946  000E60  0012               	return		;funcret
  3947  000E62                     __end_of_TMR5_StartTimer:
  3948                           	opt stack 0
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           prodh	equ	0xFF4
  3954                           prodl	equ	0xFF3
  3955                           intcon	equ	0xFF2
  3956                           postinc0	equ	0xFEE
  3957                           wreg	equ	0xFE8
  3958                           postdec1	equ	0xFE5
  3959                           fsr1l	equ	0xFE1
  3960                           postinc2	equ	0xFDE
  3961                           postdec2	equ	0xFDD
  3962                           fsr2h	equ	0xFDA
  3963                           fsr2l	equ	0xFD9
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _TMR0_Initialize *****************
  3967 ;; Defined at:
  3968 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;		None
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;		None
  3973 ;; Return value:  Size  Location     Type
  3974 ;;		None               void
  3975 ;; Registers used:
  3976 ;;		wreg, status,2, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3982 ;;      Params:         0       0       0       0
  3983 ;;      Locals:         0       0       0       0
  3984 ;;      Temps:          0       0       0       0
  3985 ;;      Totals:         0       0       0       0
  3986 ;;Total ram usage:        0 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    4
  3989 ;; This function calls:
  3990 ;;		_TMR0_StartTimer
  3991 ;; This function is called by:
  3992 ;;		_SYSTEM_Initialize
  3993 ;;		_main
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text20
  3998  000DB2                     __ptext20:
  3999                           	opt stack 0
  4000  000DB2                     _TMR0_Initialize:
  4001                           	opt stack 26
  4002                           
  4003                           ;tmr0.c: 69: T0CON = 0xFF;
  4004                           
  4005                           ; BSR set to: 15
  4006                           ;incstack = 0
  4007  000DB2  68D5               	setf	4053,c	;volatile
  4008                           
  4009                           ;tmr0.c: 72: TMR0H = 0x00;
  4010  000DB4  0E00               	movlw	0
  4011  000DB6  6ED7               	movwf	4055,c	;volatile
  4012                           
  4013                           ;tmr0.c: 75: TMR0L = 0xFD;
  4014  000DB8  0EFD               	movlw	253
  4015  000DBA  6ED6               	movwf	4054,c	;volatile
  4016                           
  4017                           ;tmr0.c: 78: timer0ReloadVal8bit = 253;
  4018  000DBC  0EFD               	movlw	253
  4019  000DBE  6E48               	movwf	_timer0ReloadVal8bit,c	;volatile
  4020                           
  4021                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  4022  000DC0  94F2               	bcf	intcon,2,c	;volatile
  4023                           
  4024                           ;tmr0.c: 84: TMR0_StartTimer();
  4025  000DC2  EC36  F007         	call	_TMR0_StartTimer	;wreg free
  4026  000DC6  0012               	return		;funcret
  4027  000DC8                     __end_of_TMR0_Initialize:
  4028                           	opt stack 0
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           intcon	equ	0xFF2
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           postdec1	equ	0xFE5
  4039                           fsr1l	equ	0xFE1
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _TMR0_StartTimer *****************
  4047 ;; Defined at:
  4048 ;;		line 87 in file "mcc_generated_files/tmr0.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;		None               void
  4055 ;; Registers used:
  4056 ;;		None
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4062 ;;      Params:         0       0       0       0
  4063 ;;      Locals:         0       0       0       0
  4064 ;;      Temps:          0       0       0       0
  4065 ;;      Totals:         0       0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    3
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_TMR0_Initialize
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text21
  4077  000E6C                     __ptext21:
  4078                           	opt stack 0
  4079  000E6C                     _TMR0_StartTimer:
  4080                           	opt stack 26
  4081                           
  4082                           ;tmr0.c: 90: T0CONbits.TMR0ON = 1;
  4083                           
  4084                           ;incstack = 0
  4085  000E6C  8ED5               	bsf	4053,7,c	;volatile
  4086  000E6E  0012               	return		;funcret
  4087  000E70                     __end_of_TMR0_StartTimer:
  4088                           	opt stack 0
  4089                           tblptru	equ	0xFF8
  4090                           tblptrh	equ	0xFF7
  4091                           tblptrl	equ	0xFF6
  4092                           tablat	equ	0xFF5
  4093                           prodh	equ	0xFF4
  4094                           prodl	equ	0xFF3
  4095                           intcon	equ	0xFF2
  4096                           postinc0	equ	0xFEE
  4097                           wreg	equ	0xFE8
  4098                           postdec1	equ	0xFE5
  4099                           fsr1l	equ	0xFE1
  4100                           postinc2	equ	0xFDE
  4101                           postdec2	equ	0xFDD
  4102                           fsr2h	equ	0xFDA
  4103                           fsr2l	equ	0xFD9
  4104                           status	equ	0xFD8
  4105                           
  4106 ;; *************** function _PIN_MANAGER_Initialize *****************
  4107 ;; Defined at:
  4108 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;		None               void
  4115 ;; Registers used:
  4116 ;;		wreg, status,2
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4122 ;;      Params:         0       0       0       0
  4123 ;;      Locals:         0       0       0       0
  4124 ;;      Temps:          0       0       0       0
  4125 ;;      Totals:         0       0       0       0
  4126 ;;Total ram usage:        0 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    3
  4129 ;; This function calls:
  4130 ;;		Nothing
  4131 ;; This function is called by:
  4132 ;;		_SYSTEM_Initialize
  4133 ;;		_main
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text22
  4138  000BFA                     __ptext22:
  4139                           	opt stack 0
  4140  000BFA                     _PIN_MANAGER_Initialize:
  4141                           	opt stack 26
  4142                           
  4143                           ;pin_manager.c: 52: LATA = 0x00;
  4144                           
  4145                           ;incstack = 0
  4146  000BFA  0E00               	movlw	0
  4147  000BFC  6E89               	movwf	3977,c	;volatile
  4148                           
  4149                           ;pin_manager.c: 53: TRISA = 0xFF;
  4150  000BFE  6892               	setf	3986,c	;volatile
  4151                           
  4152                           ;pin_manager.c: 54: ANSELA = 0x2F;
  4153  000C00  0E2F               	movlw	47
  4154  000C02  010F               	movlb	15	; () banked
  4155  000C04  6F38               	movwf	56,b	;volatile
  4156                           
  4157                           ;pin_manager.c: 56: LATB = 0x00;
  4158  000C06  0E00               	movlw	0
  4159  000C08  6E8A               	movwf	3978,c	;volatile
  4160                           
  4161                           ; BSR set to: 15
  4162                           ;pin_manager.c: 57: TRISB = 0xFF;
  4163  000C0A  6893               	setf	3987,c	;volatile
  4164                           
  4165                           ;pin_manager.c: 58: ANSELB = 0x3F;
  4166  000C0C  0E3F               	movlw	63
  4167  000C0E  010F               	movlb	15	; () banked
  4168  000C10  6F39               	movwf	57,b	;volatile
  4169                           
  4170                           ;pin_manager.c: 59: WPUB = 0x00;
  4171  000C12  0E00               	movlw	0
  4172  000C14  6E61               	movwf	3937,c	;volatile
  4173                           
  4174                           ;pin_manager.c: 61: LATC = 0x01;
  4175  000C16  0E01               	movlw	1
  4176  000C18  6E8B               	movwf	3979,c	;volatile
  4177                           
  4178                           ;pin_manager.c: 62: TRISC = 0xC8;
  4179  000C1A  0EC8               	movlw	200
  4180  000C1C  6E94               	movwf	3988,c	;volatile
  4181                           
  4182                           ;pin_manager.c: 63: ANSELC = 0x08;
  4183  000C1E  0E08               	movlw	8
  4184  000C20  010F               	movlb	15	; () banked
  4185  000C22  6F3A               	movwf	58,b	;volatile
  4186                           
  4187                           ;pin_manager.c: 65: LATD = 0x03;
  4188  000C24  0E03               	movlw	3
  4189  000C26  6E8C               	movwf	3980,c	;volatile
  4190                           
  4191                           ;pin_manager.c: 66: TRISD = 0xFB;
  4192  000C28  0EFB               	movlw	251
  4193  000C2A  6E95               	movwf	3989,c	;volatile
  4194                           
  4195                           ;pin_manager.c: 67: ANSELD = 0xF0;
  4196  000C2C  0EF0               	movlw	240
  4197  000C2E  010F               	movlb	15	; () banked
  4198  000C30  6F3B               	movwf	59,b	;volatile
  4199                           
  4200                           ;pin_manager.c: 69: LATE = 0x00;
  4201  000C32  0E00               	movlw	0
  4202  000C34  6E8D               	movwf	3981,c	;volatile
  4203                           
  4204                           ;pin_manager.c: 70: TRISE = 0x07;
  4205  000C36  0E07               	movlw	7
  4206  000C38  6E96               	movwf	3990,c	;volatile
  4207                           
  4208                           ;pin_manager.c: 71: ANSELE = 0x07;
  4209  000C3A  0E07               	movlw	7
  4210  000C3C  010F               	movlb	15	; () banked
  4211  000C3E  6F3C               	movwf	60,b	;volatile
  4212                           
  4213                           ; BSR set to: 15
  4214                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  4215  000C40  8EF1               	bsf	intcon2,7,c	;volatile
  4216                           
  4217                           ; BSR set to: 15
  4218  000C42  0012               	return		;funcret
  4219  000C44                     __end_of_PIN_MANAGER_Initialize:
  4220                           	opt stack 0
  4221                           tblptru	equ	0xFF8
  4222                           tblptrh	equ	0xFF7
  4223                           tblptrl	equ	0xFF6
  4224                           tablat	equ	0xFF5
  4225                           prodh	equ	0xFF4
  4226                           prodl	equ	0xFF3
  4227                           intcon	equ	0xFF2
  4228                           intcon2	equ	0xFF1
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1l	equ	0xFE1
  4233                           postinc2	equ	0xFDE
  4234                           postdec2	equ	0xFDD
  4235                           fsr2h	equ	0xFDA
  4236                           fsr2l	equ	0xFD9
  4237                           status	equ	0xFD8
  4238                           
  4239 ;; *************** function _OSCILLATOR_Initialize *****************
  4240 ;; Defined at:
  4241 ;;		line 118 in file "mcc_generated_files/mcc.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;		None
  4246 ;; Return value:  Size  Location     Type
  4247 ;;		None               void
  4248 ;; Registers used:
  4249 ;;		wreg, status,2
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4255 ;;      Params:         0       0       0       0
  4256 ;;      Locals:         0       0       0       0
  4257 ;;      Temps:          0       0       0       0
  4258 ;;      Totals:         0       0       0       0
  4259 ;;Total ram usage:        0 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    3
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		_SYSTEM_Initialize
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text23
  4271  000E1E                     __ptext23:
  4272                           	opt stack 0
  4273  000E1E                     _OSCILLATOR_Initialize:
  4274                           	opt stack 26
  4275                           
  4276                           ;mcc.c: 121: OSCCON = 0x72;
  4277                           
  4278                           ; BSR set to: 15
  4279                           ;incstack = 0
  4280  000E1E  0E72               	movlw	114
  4281  000E20  6ED3               	movwf	4051,c	;volatile
  4282                           
  4283                           ;mcc.c: 123: OSCCON2 = 0x04;
  4284  000E22  0E04               	movlw	4
  4285  000E24  6ED2               	movwf	4050,c	;volatile
  4286                           
  4287                           ;mcc.c: 125: OSCTUNE = 0x00;
  4288  000E26  0E00               	movlw	0
  4289  000E28  6E9B               	movwf	3995,c	;volatile
  4290  000E2A  0012               	return		;funcret
  4291  000E2C                     __end_of_OSCILLATOR_Initialize:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           intcon	equ	0xFF2
  4300                           intcon2	equ	0xFF1
  4301                           postinc0	equ	0xFEE
  4302                           wreg	equ	0xFE8
  4303                           postdec1	equ	0xFE5
  4304                           fsr1l	equ	0xFE1
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _INTERRUPT_Initialize *****************
  4312 ;; Defined at:
  4313 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;		None               void
  4320 ;; Registers used:
  4321 ;;		None
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4327 ;;      Params:         0       0       0       0
  4328 ;;      Locals:         0       0       0       0
  4329 ;;      Temps:          0       0       0       0
  4330 ;;      Totals:         0       0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    3
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_SYSTEM_Initialize
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text24
  4342  000E62                     __ptext24:
  4343                           	opt stack 0
  4344  000E62                     _INTERRUPT_Initialize:
  4345                           	opt stack 26
  4346                           
  4347                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  4348                           
  4349                           ;incstack = 0
  4350  000E62  9ED0               	bcf	4048,7,c	;volatile
  4351                           
  4352                           ;interrupt_manager.c: 60: IPR3bits.SSP2IP = 0;
  4353  000E64  9EA5               	bcf	4005,7,c	;volatile
  4354  000E66  0012               	return		;funcret
  4355  000E68                     __end_of_INTERRUPT_Initialize:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           intcon2	equ	0xFF1
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           fsr1l	equ	0xFE1
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _I2C2_Initialize *****************
  4376 ;; Defined at:
  4377 ;;		line 84 in file "mcc_generated_files/i2c2.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;		None
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;		None
  4382 ;; Return value:  Size  Location     Type
  4383 ;;		None               void
  4384 ;; Registers used:
  4385 ;;		wreg, status,2
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4391 ;;      Params:         0       0       0       0
  4392 ;;      Locals:         0       0       0       0
  4393 ;;      Temps:          0       0       0       0
  4394 ;;      Totals:         0       0       0       0
  4395 ;;Total ram usage:        0 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    3
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_SYSTEM_Initialize
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text25
  4406  000D94                     __ptext25:
  4407                           	opt stack 0
  4408  000D94                     _I2C2_Initialize:
  4409                           	opt stack 26
  4410                           
  4411                           ;i2c2.c: 88: SSP2STAT = 0x00;
  4412                           
  4413                           ;incstack = 0
  4414  000D94  0E00               	movlw	0
  4415  000D96  6E6D               	movwf	3949,c	;volatile
  4416                           
  4417                           ;i2c2.c: 90: SSP2CON1 = 0x26;
  4418  000D98  0E26               	movlw	38
  4419  000D9A  6E6C               	movwf	3948,c	;volatile
  4420                           
  4421                           ;i2c2.c: 92: SSP2CON2 = 0x00;
  4422  000D9C  0E00               	movlw	0
  4423  000D9E  6E6B               	movwf	3947,c	;volatile
  4424                           
  4425                           ;i2c2.c: 94: SSP2CON3 = 0x00;
  4426  000DA0  0E00               	movlw	0
  4427  000DA2  6E69               	movwf	3945,c	;volatile
  4428                           
  4429                           ;i2c2.c: 96: SSP2MSK = (127 << 1);
  4430  000DA4  0EFE               	movlw	254
  4431  000DA6  6E6A               	movwf	3946,c	;volatile
  4432                           
  4433                           ;i2c2.c: 98: SSP2ADD = (86 << 1);
  4434  000DA8  0EAC               	movlw	172
  4435  000DAA  6E6E               	movwf	3950,c	;volatile
  4436                           
  4437                           ;i2c2.c: 101: PIR3bits.SSP2IF = 0;
  4438  000DAC  9EA4               	bcf	4004,7,c	;volatile
  4439                           
  4440                           ;i2c2.c: 103: PIE3bits.SSP2IE = 1;
  4441  000DAE  8EA3               	bsf	4003,7,c	;volatile
  4442  000DB0  0012               	return		;funcret
  4443  000DB2                     __end_of_I2C2_Initialize:
  4444                           	opt stack 0
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           prodh	equ	0xFF4
  4450                           prodl	equ	0xFF3
  4451                           intcon	equ	0xFF2
  4452                           intcon2	equ	0xFF1
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           postdec1	equ	0xFE5
  4456                           fsr1l	equ	0xFE1
  4457                           postinc2	equ	0xFDE
  4458                           postdec2	equ	0xFDD
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _EUSART1_Initialize *****************
  4464 ;; Defined at:
  4465 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;		None
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;		None               void
  4472 ;; Registers used:
  4473 ;;		wreg, status,2
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4479 ;;      Params:         0       0       0       0
  4480 ;;      Locals:         0       0       0       0
  4481 ;;      Temps:          0       0       0       0
  4482 ;;      Totals:         0       0       0       0
  4483 ;;Total ram usage:        0 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    3
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_SYSTEM_Initialize
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text26
  4494  000DC8                     __ptext26:
  4495                           	opt stack 0
  4496  000DC8                     _EUSART1_Initialize:
  4497                           	opt stack 26
  4498                           
  4499                           ;eusart1.c: 61: BAUD1CON = 0x48;
  4500                           
  4501                           ;incstack = 0
  4502  000DC8  0E48               	movlw	72
  4503  000DCA  6EB8               	movwf	4024,c	;volatile
  4504                           
  4505                           ;eusart1.c: 64: RC1STA = 0x80;
  4506  000DCC  0E80               	movlw	128
  4507  000DCE  6EAB               	movwf	4011,c	;volatile
  4508                           
  4509                           ;eusart1.c: 67: TX1STA = 0x26;
  4510  000DD0  0E26               	movlw	38
  4511  000DD2  6EAC               	movwf	4012,c	;volatile
  4512                           
  4513                           ;eusart1.c: 70: SPBRG1 = 0x44;
  4514  000DD4  0E44               	movlw	68
  4515  000DD6  6EAF               	movwf	4015,c	;volatile
  4516                           
  4517                           ;eusart1.c: 73: SPBRGH1 = 0x00;
  4518  000DD8  0E00               	movlw	0
  4519  000DDA  6EB0               	movwf	4016,c	;volatile
  4520  000DDC  0012               	return		;funcret
  4521  000DDE                     __end_of_EUSART1_Initialize:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           intcon	equ	0xFF2
  4530                           intcon2	equ	0xFF1
  4531                           postinc0	equ	0xFEE
  4532                           wreg	equ	0xFE8
  4533                           postdec1	equ	0xFE5
  4534                           fsr1l	equ	0xFE1
  4535                           postinc2	equ	0xFDE
  4536                           postdec2	equ	0xFDD
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _ADC_Initialize *****************
  4542 ;; Defined at:
  4543 ;;		line 59 in file "mcc_generated_files/adc.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;		None               void
  4550 ;; Registers used:
  4551 ;;		wreg, status,2
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4557 ;;      Params:         0       0       0       0
  4558 ;;      Locals:         0       0       0       0
  4559 ;;      Temps:          0       0       0       0
  4560 ;;      Totals:         0       0       0       0
  4561 ;;Total ram usage:        0 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    3
  4564 ;; This function calls:
  4565 ;;		Nothing
  4566 ;; This function is called by:
  4567 ;;		_SYSTEM_Initialize
  4568 ;;		_main
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text27
  4573  000DDE                     __ptext27:
  4574                           	opt stack 0
  4575  000DDE                     _ADC_Initialize:
  4576                           	opt stack 26
  4577                           
  4578                           ;adc.c: 64: ADCON0 = 0x01;
  4579                           
  4580                           ;incstack = 0
  4581  000DDE  0E01               	movlw	1
  4582  000DE0  6EC2               	movwf	4034,c	;volatile
  4583                           
  4584                           ;adc.c: 67: ADCON1 = 0x00;
  4585  000DE2  0E00               	movlw	0
  4586  000DE4  6EC1               	movwf	4033,c	;volatile
  4587                           
  4588                           ;adc.c: 70: ADCON2 = 0xB6;
  4589  000DE6  0EB6               	movlw	182
  4590  000DE8  6EC0               	movwf	4032,c	;volatile
  4591                           
  4592                           ;adc.c: 73: ADRESL = 0x00;
  4593  000DEA  0E00               	movlw	0
  4594  000DEC  6EC3               	movwf	4035,c	;volatile
  4595                           
  4596                           ;adc.c: 76: ADRESH = 0x00;
  4597  000DEE  0E00               	movlw	0
  4598  000DF0  6EC4               	movwf	4036,c	;volatile
  4599  000DF2  0012               	return		;funcret
  4600  000DF4                     __end_of_ADC_Initialize:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodh	equ	0xFF4
  4607                           prodl	equ	0xFF3
  4608                           intcon	equ	0xFF2
  4609                           intcon2	equ	0xFF1
  4610                           postinc0	equ	0xFEE
  4611                           wreg	equ	0xFE8
  4612                           postdec1	equ	0xFE5
  4613                           fsr1l	equ	0xFE1
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           fsr2h	equ	0xFDA
  4617                           fsr2l	equ	0xFD9
  4618                           status	equ	0xFD8
  4619                           
  4620 ;; *************** function _OSCILLATOR_FastClock *****************
  4621 ;; Defined at:
  4622 ;;		line 129 in file "mcc_generated_files/mcc.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, status,2
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4636 ;;      Params:         0       0       0       0
  4637 ;;      Locals:         0       0       0       0
  4638 ;;      Temps:          0       0       0       0
  4639 ;;      Totals:         0       0       0       0
  4640 ;;Total ram usage:        0 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    3
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_main
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text28
  4651  000E2C                     __ptext28:
  4652                           	opt stack 0
  4653  000E2C                     _OSCILLATOR_FastClock:
  4654                           	opt stack 27
  4655                           
  4656                           ;mcc.c: 132: OSCCON = 0x70;
  4657                           
  4658                           ;incstack = 0
  4659  000E2C  0E70               	movlw	112
  4660  000E2E  6ED3               	movwf	4051,c	;volatile
  4661                           
  4662                           ;mcc.c: 134: OSCCON2 = 0x04;
  4663  000E30  0E04               	movlw	4
  4664  000E32  6ED2               	movwf	4050,c	;volatile
  4665                           
  4666                           ;mcc.c: 136: OSCTUNE = 0x40;
  4667  000E34  0E40               	movlw	64
  4668  000E36  6E9B               	movwf	3995,c	;volatile
  4669  000E38  0012               	return		;funcret
  4670  000E3A                     __end_of_OSCILLATOR_FastClock:
  4671                           	opt stack 0
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon2	equ	0xFF1
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           postdec1	equ	0xFE5
  4683                           fsr1l	equ	0xFE1
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _ADC_GetConversion *****************
  4691 ;; Defined at:
  4692 ;;		line 105 in file "mcc_generated_files/adc.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  channel         1    wreg     enum E8837
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  channel         1   20[COMRAM] enum E8837
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  2   16[COMRAM] unsigned int 
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4706 ;;      Params:         2       0       0       0
  4707 ;;      Locals:         1       0       0       0
  4708 ;;      Temps:          2       0       0       0
  4709 ;;      Totals:         5       0       0       0
  4710 ;;Total ram usage:        5 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    3
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_main
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text29
  4721  000CCC                     __ptext29:
  4722                           	opt stack 0
  4723  000CCC                     _ADC_GetConversion:
  4724                           	opt stack 27
  4725                           
  4726                           ;incstack = 0
  4727                           ;ADC_GetConversion@channel stored from wreg
  4728  000CCC  6E15               	movwf	ADC_GetConversion@channel,c
  4729                           
  4730                           ;adc.c: 108: ADCON0bits.CHS = channel;
  4731  000CCE  C015  F013         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  4732  000CD2  4613               	rlncf	??_ADC_GetConversion,f,c
  4733  000CD4  4613               	rlncf	??_ADC_GetConversion,f,c
  4734  000CD6  50C2               	movf	4034,w,c	;volatile
  4735  000CD8  1813               	xorwf	??_ADC_GetConversion,w,c
  4736  000CDA  0B83               	andlw	-125
  4737  000CDC  1813               	xorwf	??_ADC_GetConversion,w,c
  4738  000CDE  6EC2               	movwf	4034,c	;volatile
  4739                           
  4740                           ;adc.c: 111: ADCON0bits.ADON = 1;
  4741  000CE0  80C2               	bsf	4034,0,c	;volatile
  4742                           
  4743                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  4744  000CE2  82C2               	bsf	4034,1,c	;volatile
  4745                           
  4746                           ;adc.c: 118: while (ADCON0bits.GO_nDONE)
  4747  000CE4  D000               	goto	l130
  4748  000CE6                     l130:
  4749  000CE6  B2C2               	btfsc	4034,1,c	;volatile
  4750  000CE8  D7FE               	goto	l130
  4751                           
  4752                           ;adc.c: 120: }
  4753                           ;adc.c: 123: return ((ADRESH << 8) + ADRESL);
  4754  000CEA  50C4               	movf	4036,w,c	;volatile
  4755  000CEC  6E14               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  4756  000CEE  6A13               	clrf	??_ADC_GetConversion& (0+255),c
  4757  000CF0  50C3               	movf	4035,w,c	;volatile
  4758  000CF2  2413               	addwf	??_ADC_GetConversion,w,c
  4759  000CF4  6E11               	movwf	?_ADC_GetConversion,c
  4760  000CF6  0E00               	movlw	0
  4761  000CF8  2014               	addwfc	??_ADC_GetConversion+1,w,c
  4762  000CFA  6E12               	movwf	?_ADC_GetConversion+1,c
  4763  000CFC  0012               	return	
  4764  000CFE  0012               	return		;funcret
  4765  000D00                     __end_of_ADC_GetConversion:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           prodh	equ	0xFF4
  4772                           prodl	equ	0xFF3
  4773                           intcon	equ	0xFF2
  4774                           intcon2	equ	0xFF1
  4775                           postinc0	equ	0xFEE
  4776                           wreg	equ	0xFE8
  4777                           postdec1	equ	0xFE5
  4778                           fsr1l	equ	0xFE1
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           fsr2h	equ	0xFDA
  4782                           fsr2l	equ	0xFD9
  4783                           status	equ	0xFD8
  4784                           
  4785 ;; *************** function _INTERRUPT_InterruptManager *****************
  4786 ;; Defined at:
  4787 ;;		line 63 in file "mcc_generated_files/interrupt_manager.c"
  4788 ;; Parameters:    Size  Location     Type
  4789 ;;		None
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;		None
  4792 ;; Return value:  Size  Location     Type
  4793 ;;		None               void
  4794 ;; Registers used:
  4795 ;;		wreg, status,2, status,0, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4801 ;;      Params:         0       0       0       0
  4802 ;;      Locals:         0       0       0       0
  4803 ;;      Temps:         14       0       0       0
  4804 ;;      Totals:        14       0       0       0
  4805 ;;Total ram usage:       14 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    2
  4808 ;; This function calls:
  4809 ;;		_I2C2_ISR
  4810 ;; This function is called by:
  4811 ;;		Interrupt level 2
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           	psect	intcode
  4816  000008                     __pintcode:
  4817                           	opt stack 0
  4818  000008                     _INTERRUPT_InterruptManager:
  4819                           	opt stack 25
  4820                           
  4821                           ;incstack = 0
  4822  000008  CFFA F003          	movff	pclath,??_INTERRUPT_InterruptManager
  4823  00000C  CFFB F004          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4824  000010  CFE9 F005          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4825  000014  CFEA F006          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4826  000018  CFE1 F007          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4827  00001C  CFE2 F008          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4828  000020  CFD9 F009          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4829  000024  CFDA F00A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4830  000028  CFF3 F00B          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4831  00002C  CFF4 F00C          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4832  000030  CFF6 F00D          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4833  000034  CFF7 F00E          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4834  000038  CFF8 F00F          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4835  00003C  CFF5 F010          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4836                           
  4837                           ;interrupt_manager.c: 66: if(PIE3bits.SSP2IE == 1 && PIR3bits.SSP2IF == 1)
  4838  000040  BEA3               	btfsc	4003,7,c	;volatile
  4839  000042  AEA4               	btfss	4004,7,c	;volatile
  4840  000044  D003               	goto	i2l280
  4841                           
  4842                           ;interrupt_manager.c: 67: {
  4843                           ;interrupt_manager.c: 68: I2C2_ISR();
  4844  000046  EC46  F006         	call	_I2C2_ISR	;wreg free
  4845                           
  4846                           ;interrupt_manager.c: 69: }
  4847  00004A  D000               	goto	i2l280
  4848  00004C                     i2l280:
  4849  00004C  C010  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4850  000050  C00F  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4851  000054  C00E  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4852  000058  C00D  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4853  00005C  C00C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4854  000060  C00B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4855  000064  C00A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4856  000068  C009  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4857  00006C  C008  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4858  000070  C007  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4859  000074  C006  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4860  000078  C005  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4861  00007C  C004  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4862  000080  C003  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4863  000084  0011               	retfie		f
  4864  000086                     __end_of_INTERRUPT_InterruptManager:
  4865                           	opt stack 0
  4866                           pclatu	equ	0xFFB
  4867                           pclath	equ	0xFFA
  4868                           tblptru	equ	0xFF8
  4869                           tblptrh	equ	0xFF7
  4870                           tblptrl	equ	0xFF6
  4871                           tablat	equ	0xFF5
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           intcon	equ	0xFF2
  4875                           intcon2	equ	0xFF1
  4876                           postinc0	equ	0xFEE
  4877                           fsr0h	equ	0xFEA
  4878                           fsr0l	equ	0xFE9
  4879                           wreg	equ	0xFE8
  4880                           postdec1	equ	0xFE5
  4881                           fsr1h	equ	0xFE2
  4882                           fsr1l	equ	0xFE1
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           fsr2h	equ	0xFDA
  4886                           fsr2l	equ	0xFD9
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _I2C2_ISR *****************
  4890 ;; Defined at:
  4891 ;;		line 107 in file "mcc_generated_files/i2c2.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  i2c_data        1    1[COMRAM] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4905 ;;      Params:         0       0       0       0
  4906 ;;      Locals:         1       0       0       0
  4907 ;;      Temps:          0       0       0       0
  4908 ;;      Totals:         1       0       0       0
  4909 ;;Total ram usage:        1 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    1
  4912 ;; This function calls:
  4913 ;;		_I2C2_StatusCallback
  4914 ;; This function is called by:
  4915 ;;		_INTERRUPT_InterruptManager
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text31
  4920  000C8C                     __ptext31:
  4921                           	opt stack 0
  4922  000C8C                     _I2C2_ISR:
  4923                           	opt stack 25
  4924                           
  4925                           ;i2c2.c: 109: uint8_t i2c_data = 0x55;
  4926                           
  4927                           ;incstack = 0
  4928  000C8C  0E55               	movlw	85
  4929  000C8E  6E02               	movwf	I2C2_ISR@i2c_data,c
  4930                           
  4931                           ;i2c2.c: 115: PIR3bits.SSP2IF = 0;
  4932  000C90  9EA4               	bcf	4004,7,c	;volatile
  4933                           
  4934                           ;i2c2.c: 116: i2c_data = SSP2BUF;
  4935  000C92  CF6F F002          	movff	3951,I2C2_ISR@i2c_data	;volatile
  4936                           
  4937                           ;i2c2.c: 117: if(1 == SSP2STATbits.R_nW)
  4938  000C96  A46D               	btfss	3949,2,c	;volatile
  4939  000C98  D00B               	goto	i2l256
  4940                           
  4941                           ;i2c2.c: 118: {
  4942                           ;i2c2.c: 119: if((1 == SSP2STATbits.D_nA) && (1 == SSP2CON2bits.ACKSTAT))
  4943  000C9A  BA6D               	btfsc	3949,5,c	;volatile
  4944  000C9C  AC6B               	btfss	3947,6,c	;volatile
  4945  000C9E  D004               	goto	i2l1324
  4946                           
  4947                           ;i2c2.c: 120: {
  4948                           ;i2c2.c: 122: I2C2_StatusCallback(I2C2_SLAVE_READ_COMPLETED);
  4949  000CA0  0E03               	movlw	3
  4950  000CA2  ECFB  F004         	call	_I2C2_StatusCallback
  4951                           
  4952                           ;i2c2.c: 123: }
  4953  000CA6  D010               	goto	i2l1330
  4954  000CA8                     i2l1324:
  4955                           
  4956                           ;i2c2.c: 124: else
  4957                           ;i2c2.c: 125: {
  4958                           ;i2c2.c: 127: I2C2_StatusCallback(I2C2_SLAVE_READ_REQUEST);
  4959  000CA8  0E01               	movlw	1
  4960  000CAA  ECFB  F004         	call	_I2C2_StatusCallback
  4961                           
  4962                           ;i2c2.c: 128: }
  4963                           ;i2c2.c: 129: }
  4964  000CAE  D00C               	goto	i2l1330
  4965  000CB0                     i2l256:
  4966                           
  4967                           ;i2c2.c: 130: else if(0 == SSP2STATbits.D_nA)
  4968  000CB0  BA6D               	btfsc	3949,5,c	;volatile
  4969  000CB2  D004               	goto	i2l260
  4970                           
  4971                           ;i2c2.c: 131: {
  4972                           ;i2c2.c: 135: I2C2_StatusCallback(I2C2_SLAVE_WRITE_REQUEST);
  4973  000CB4  0E00               	movlw	0
  4974  000CB6  ECFB  F004         	call	_I2C2_StatusCallback
  4975                           
  4976                           ;i2c2.c: 136: }
  4977  000CBA  D006               	goto	i2l1330
  4978  000CBC                     i2l260:
  4979                           
  4980                           ;i2c2.c: 137: else
  4981                           ;i2c2.c: 138: {
  4982                           ;i2c2.c: 139: I2C2_slaveWriteData = i2c_data;
  4983  000CBC  C002  F049         	movff	I2C2_ISR@i2c_data,_I2C2_slaveWriteData	;volatile
  4984                           
  4985                           ;i2c2.c: 142: I2C2_StatusCallback(I2C2_SLAVE_WRITE_COMPLETED);
  4986  000CC0  0E02               	movlw	2
  4987  000CC2  ECFB  F004         	call	_I2C2_StatusCallback
  4988  000CC6  D000               	goto	i2l1330
  4989  000CC8                     i2l1330:
  4990                           
  4991                           ;i2c2.c: 143: }
  4992                           ;i2c2.c: 145: SSP2CON1bits.CKP = 1;
  4993  000CC8  886C               	bsf	3948,4,c	;volatile
  4994  000CCA  0012               	return		;funcret
  4995  000CCC                     __end_of_I2C2_ISR:
  4996                           	opt stack 0
  4997                           pclatu	equ	0xFFB
  4998                           pclath	equ	0xFFA
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           intcon	equ	0xFF2
  5006                           intcon2	equ	0xFF1
  5007                           postinc0	equ	0xFEE
  5008                           fsr0h	equ	0xFEA
  5009                           fsr0l	equ	0xFE9
  5010                           wreg	equ	0xFE8
  5011                           postdec1	equ	0xFE5
  5012                           fsr1h	equ	0xFE2
  5013                           fsr1l	equ	0xFE1
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _I2C2_StatusCallback *****************
  5021 ;; Defined at:
  5022 ;;		line 530 in file "main.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  i2c_bus_stat    1    wreg     enum E9083
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  i2c_bus_stat    1    0[COMRAM] enum E9083
  5027 ;; Return value:  Size  Location     Type
  5028 ;;		None               void
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5036 ;;      Params:         0       0       0       0
  5037 ;;      Locals:         1       0       0       0
  5038 ;;      Temps:          0       0       0       0
  5039 ;;      Totals:         1       0       0       0
  5040 ;;Total ram usage:        1 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_I2C2_ISR
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text32
  5050  0009F6                     __ptext32:
  5051                           	opt stack 0
  5052  0009F6                     _I2C2_StatusCallback:
  5053                           	opt stack 25
  5054                           
  5055                           ;incstack = 0
  5056                           ;I2C2_StatusCallback@i2c_bus_state stored from wreg
  5057  0009F6  6E01               	movwf	I2C2_StatusCallback@i2c_bus_state,c
  5058                           
  5059                           ;main.c: 532: static uint8_t RegAddress = 0;
  5060                           ;main.c: 533: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  5061                           ;main.c: 535: switch (i2c_bus_state)
  5062  0009F8  D035               	goto	i2l1210
  5063  0009FA                     i2l1178:
  5064                           
  5065                           ;main.c: 539: slaveWriteType = SLAVE_DATA_ADDRESS;
  5066  0009FA  0E01               	movlw	1
  5067  0009FC  6E45               	movwf	I2C2_StatusCallback@slaveWriteType,c
  5068                           
  5069                           ;main.c: 540: break;
  5070  0009FE  0012               	return	
  5071                           
  5072                           ;main.c: 544: switch(slaveWriteType)
  5073                           
  5074                           ;main.c: 543: case I2C2_SLAVE_WRITE_COMPLETED:
  5075  000A00  D008               	goto	i2l1186
  5076  000A02                     i2l445:
  5077                           
  5078                           ;main.c: 547: RegAddress = I2C2_slaveWriteData;
  5079  000A02  C049  F044         	movff	_I2C2_slaveWriteData,I2C2_StatusCallback@RegAddress	;volatile
  5080                           
  5081                           ;main.c: 548: break;
  5082  000A06  D00D               	goto	i2l1188
  5083                           
  5084                           ;main.c: 550: case SLAVE_NORMAL_DATA:
  5085  000A08  D000               	goto	i2l1180
  5086  000A0A                     i2l1180:
  5087                           
  5088                           ;main.c: 554: RegAddress += 1;
  5089  000A0A  2A44               	incf	I2C2_StatusCallback@RegAddress,f,c
  5090                           
  5091                           ;main.c: 555: RegAddress &= 3;
  5092  000A0C  0E03               	movlw	3
  5093  000A0E  1644               	andwf	I2C2_StatusCallback@RegAddress,f,c
  5094                           
  5095                           ;main.c: 557: }
  5096                           
  5097                           ;main.c: 556: break;
  5098  000A10  D008               	goto	i2l1188
  5099  000A12                     i2l1186:
  5100  000A12  5045               	movf	I2C2_StatusCallback@slaveWriteType,w,c
  5101                           
  5102                           ; Switch size 1, requested type "space"
  5103                           ; Number of cases is 2, Range of values is 0 to 1
  5104                           ; switch strategies available:
  5105                           ; Name         Instructions Cycles
  5106                           ; simple_byte            7     4 (average)
  5107                           ;	Chosen strategy is simple_byte
  5108  000A14  0A00               	xorlw	0	; case 0
  5109  000A16  B4D8               	btfsc	status,2,c
  5110  000A18  D7F8               	goto	i2l1180
  5111  000A1A  0A01               	xorlw	1	; case 1
  5112  000A1C  B4D8               	btfsc	status,2,c
  5113  000A1E  D7F1               	goto	i2l445
  5114  000A20  D7F4               	goto	i2l1180
  5115  000A22                     i2l1188:
  5116                           
  5117                           ;main.c: 559: slaveWriteType = SLAVE_NORMAL_DATA;
  5118  000A22  0E00               	movlw	0
  5119  000A24  6E45               	movwf	I2C2_StatusCallback@slaveWriteType,c
  5120                           
  5121                           ;main.c: 560: break;
  5122  000A26  0012               	return	
  5123  000A28                     i2l1190:
  5124                           
  5125                           ;main.c: 565: if (RegAddress == 0)
  5126  000A28  5044               	movf	I2C2_StatusCallback@RegAddress,w,c
  5127  000A2A  A4D8               	btfss	status,2,c
  5128  000A2C  D003               	goto	i2l1194
  5129                           
  5130                           ;main.c: 566: {
  5131                           ;main.c: 567: SSP2BUF = reg_status;
  5132  000A2E  C047  FF6F         	movff	_reg_status,3951	;volatile
  5133  000A32  D000               	goto	i2l1194
  5134  000A34                     i2l1194:
  5135                           
  5136                           ;main.c: 568: }
  5137                           ;main.c: 570: if (RegAddress == 1)
  5138  000A34  0444               	decf	I2C2_StatusCallback@RegAddress,w,c
  5139  000A36  A4D8               	btfss	status,2,c
  5140  000A38  D003               	goto	i2l1198
  5141                           
  5142                           ;main.c: 571: {
  5143                           ;main.c: 572: SSP2BUF = meas_tune;
  5144  000A3A  C040  FF6F         	movff	_meas_tune,3951	;volatile
  5145                           
  5146                           ;main.c: 573: }
  5147  000A3E  D00E               	goto	i2l1206
  5148  000A40                     i2l1198:
  5149                           
  5150                           ;main.c: 575: else if (RegAddress == 2)
  5151  000A40  0E02               	movlw	2
  5152  000A42  1844               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5153  000A44  A4D8               	btfss	status,2,c
  5154  000A46  D003               	goto	i2l1202
  5155                           
  5156                           ;main.c: 576: {
  5157                           ;main.c: 577: SSP2BUF = meas_band;
  5158  000A48  C03E  FF6F         	movff	_meas_band,3951	;volatile
  5159                           
  5160                           ;main.c: 578: }
  5161  000A4C  D007               	goto	i2l1206
  5162  000A4E                     i2l1202:
  5163                           
  5164                           ;main.c: 580: else if (RegAddress == 3)
  5165  000A4E  0E03               	movlw	3
  5166  000A50  1844               	xorwf	I2C2_StatusCallback@RegAddress,w,c
  5167  000A52  A4D8               	btfss	status,2,c
  5168  000A54  D003               	goto	i2l1206
  5169                           
  5170                           ;main.c: 581: {
  5171                           ;main.c: 582: SSP2BUF = meas_vol;
  5172  000A56  C042  FF6F         	movff	_meas_vol,3951	;volatile
  5173  000A5A  D000               	goto	i2l1206
  5174  000A5C                     i2l1206:
  5175                           
  5176                           ;main.c: 583: }
  5177                           ;main.c: 585: RegAddress += 1;
  5178  000A5C  2A44               	incf	I2C2_StatusCallback@RegAddress,f,c
  5179                           
  5180                           ;main.c: 586: RegAddress &= 3;
  5181  000A5E  0E03               	movlw	3
  5182  000A60  1644               	andwf	I2C2_StatusCallback@RegAddress,f,c
  5183                           
  5184                           ;main.c: 592: }
  5185                           
  5186                           ;main.c: 590: default:;
  5187                           
  5188                           ;main.c: 589: case I2C2_SLAVE_READ_COMPLETED:
  5189                           
  5190                           ;main.c: 587: break;
  5191  000A62  0012               	return	
  5192  000A64                     i2l1210:
  5193  000A64  5001               	movf	I2C2_StatusCallback@i2c_bus_state,w,c
  5194                           
  5195                           ; Switch size 1, requested type "space"
  5196                           ; Number of cases is 4, Range of values is 0 to 3
  5197                           ; switch strategies available:
  5198                           ; Name         Instructions Cycles
  5199                           ; simple_byte           13     7 (average)
  5200                           ;	Chosen strategy is simple_byte
  5201  000A66  0A00               	xorlw	0	; case 0
  5202  000A68  B4D8               	btfsc	status,2,c
  5203  000A6A  D7C7               	goto	i2l1178
  5204  000A6C  0A01               	xorlw	1	; case 1
  5205  000A6E  B4D8               	btfsc	status,2,c
  5206  000A70  D7DB               	goto	i2l1190
  5207  000A72  0A03               	xorlw	3	; case 2
  5208  000A74  B4D8               	btfsc	status,2,c
  5209  000A76  D7CD               	goto	i2l1186
  5210  000A78  0A01               	xorlw	1	; case 3
  5211  000A7A  0012               	return	
  5212  000A7C  0012               	return		;funcret
  5213  000A7E                     __end_of_I2C2_StatusCallback:
  5214                           	opt stack 0
  5215                           pclatu	equ	0xFFB
  5216                           pclath	equ	0xFFA
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           intcon	equ	0xFF2
  5224                           intcon2	equ	0xFF1
  5225                           postinc0	equ	0xFEE
  5226                           fsr0h	equ	0xFEA
  5227                           fsr0l	equ	0xFE9
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           fsr1h	equ	0xFE2
  5231                           fsr1l	equ	0xFE1
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           fsr2h	equ	0xFDA
  5235                           fsr2l	equ	0xFD9
  5236                           status	equ	0xFD8
  5237                           pclatu	equ	0xFFB
  5238                           pclath	equ	0xFFA
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodh	equ	0xFF4
  5244                           prodl	equ	0xFF3
  5245                           intcon	equ	0xFF2
  5246                           intcon2	equ	0xFF1
  5247                           postinc0	equ	0xFEE
  5248                           fsr0h	equ	0xFEA
  5249                           fsr0l	equ	0xFE9
  5250                           wreg	equ	0xFE8
  5251                           postdec1	equ	0xFE5
  5252                           fsr1h	equ	0xFE2
  5253                           fsr1l	equ	0xFE1
  5254                           postinc2	equ	0xFDE
  5255                           postdec2	equ	0xFDD
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260                           	psect	rparam
  5261  0000                     pclatu	equ	0xFFB
  5262                           pclath	equ	0xFFA
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           intcon2	equ	0xFF1
  5271                           postinc0	equ	0xFEE
  5272                           fsr0h	equ	0xFEA
  5273                           fsr0l	equ	0xFE9
  5274                           wreg	equ	0xFE8
  5275                           postdec1	equ	0xFE5
  5276                           fsr1h	equ	0xFE2
  5277                           fsr1l	equ	0xFE1
  5278                           postinc2	equ	0xFDE
  5279                           postdec2	equ	0xFDD
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8


Data Sizes:
    Strings     201
    Constant    72
    Data        5
    BSS         22
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     49      73
    BANK0           160     22      28
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[16]), STR_12(CODE[17]), STR_11(CODE[13]), STR_10(CODE[13]), 
		 -> STR_9(CODE[13]), STR_8(CODE[13]), STR_7(CODE[13]), STR_6(CODE[13]), 
		 -> STR_5(CODE[13]), STR_4(CODE[13]), STR_3(CODE[15]), STR_2(CODE[15]), 
		 -> STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_EUSART1_Write
    ___llmod->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_StatusCallback

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    4726
                                             48 COMRAM     1     1      0
                                             13 BANK0      9     9      0
                  _ADC_GetConversion
                     _ADC_Initialize
               _OSCILLATOR_FastClock
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                  _SYSTEM_Initialize
            _TMR0_HasOverflowOccured
                    _TMR0_Initialize
            _TMR5_HasOverflowOccured
                    _TMR5_Initialize
                             ___lmul
                      _pi_supply_off
                       _pi_supply_on
                             _printf
                     _request_pi_run
                    _request_pi_stop
                  _update_status_reg
                        _ws2812_send
 ---------------------------------------------------------------------------------
 (1) _ws2812_send                                          9     5      4     210
                                             16 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _update_status_reg                                    6     6      0       0
                                             16 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _request_pi_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _request_pi_run                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    26      6    3745
                                             38 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                             17 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     386
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     549
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pi_supply_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pi_supply_off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     558
                                             16 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _TMR5_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                    _I2C2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (1) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_FastClock                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      31
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0      30
                                              2 COMRAM    14    14      0
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C2_ISR                                             1     1      0      30
                                              1 COMRAM     1     1      0
                _I2C2_StatusCallback
 ---------------------------------------------------------------------------------
 (6) _I2C2_StatusCallback                                  1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _OSCILLATOR_FastClock
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _I2C2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_HasOverflowOccured
   _TMR0_Initialize
     _TMR0_StartTimer
   _TMR5_HasOverflowOccured
   _TMR5_Initialize
     _TMR5_StartTimer
   ___lmul
   _pi_supply_off
   _pi_supply_on
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
       _EUSART1_Write
   _request_pi_run
   _request_pi_stop
   _update_status_reg
   _ws2812_send

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_ISR
     _I2C2_StatusCallback

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     16      1C       4       17.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     31      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      65       8        0.0%
DATA                 0      0      65      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Nov 25 20:37:12 2017

       __end_of_OSCILLATOR_FastClock 0E3A      __end_of_TMR0_HasOverflowOccured 0E1E  
                ___wmul@multiplicand 0013                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                                  l130 0CE6  
                                l213 0DF8                                  l285 0AFA  
                                l373 0168                                  l287 0B0A  
                                l383 0204                                  l378 01B4  
                                l387 024A                                  l492 0672  
                                l988 09E4                                  l998 0ADC  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
        __end_of_I2C2_StatusCallback 0A7E                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                     __end_of_I2C2_ISR 0CCC  
                               PORTC 000F82                                 l2300 099A  
                               l2310 09D4                                 l2302 09A2  
                               l2320 0A9E                                 l2322 0AA6  
                               l2500 0B76                                 l2404 0624  
                               l2412 063C                                 l2326 0ACC  
                               l2318 0A90                                 l2422 06BE  
                               l2406 062C                                 l2432 070C  
                               l2424 06C4                                 l2408 0634  
                               l2512 00B4                                 l2282 0D68  
                               l2442 0728                                 l2418 0694  
                               l2460 07BE                                 l2436 0714  
                               l2428 06D2                                 l2452 076A  
                               l2380 0556                                 l2372 0B16  
                               l2612 0276                                 l2524 00D4  
                               l2470 07FA                                 l2446 0762  
                               l2438 071A                                 l2454 077E  
                               l2390 0588                                 l2366 0AF2  
                               l2702 0530                                 l2630 02E0  
                               l2542 0126                                 l2550 014C  
                               l2534 00FA                                 l2464 07D0  
                               l2392 059E                                 l2384 056A  
                               l2376 0B44                                 l2704 0538  
                               l2632 02E4                                 l2536 0104  
                               l2298 098C                                 l2474 0818  
                               l2458 07B2                                 l2386 057C  
                               l2490 094A                                 l2618 028E  
                               l2562 018C                                 l2476 082A  
                               l2484 0912                                 l2468 07EE  
                               l2396 05BE                                 l2628 02DC  
                               l2580 01DC                                 l2636 02EE  
                               l2478 08A4                                 l2486 0926  
                               l2654 03B2                                 l2638 02F2  
                               l2566 0198                                 l2496 0B60  
                               l2488 0930                                 l2656 03B6  
                               l2584 01E8                                 l2682 04BA  
                               l2694 050E                                 l2598 022E  
                               l2698 0514                                 STR_1 3F57  
                               STR_2 3F87                                 STR_3 3F78  
                               STR_4 3FF1                                 STR_5 3FE4  
                               STR_6 3FB0                                 STR_7 3FBD  
                               STR_8 3FD7                                 STR_9 3FA3  
                               u2220 035C                                 u2140 0228  
                               _LATA 000F89                                 u2230 03A4  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u2240 04DC                                 _LATD 000F8C  
                               u2225 0352                                 _LATE 000F8D  
                               u2235 039A                                 u2190 0282  
                               u1650 0E18                                 u2277 0B46  
                               u1670 0E0A                                 u1920 0BDA  
                               u1905 0BBC                                 u1915 0BC8  
                               u1935 0BDC                                 u1890 0BBA  
                               u1970 00DC                                 u1980 00DE  
                               _TMR5 000F4F                                 _WPUB 000F61  
                      _EUSART1_Write 0DF4                                 _main 008A  
                    _TMR0_StartTimer 0E6C                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0086  
                    _timer5ReloadVal 007A                        __CFG_IESO$OFF 000000  
                       ___param_bank 000010              __end_of_TMR0_Initialize 0DC8  
              __end_of_pi_supply_off 0E5C       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 0E2C                                ?_main 0001  
                              STR_10 3F96                                STR_11 3FCA  
                              STR_12 3F46                                STR_13 3F68  
                              STR_14 3F35                      __end_of___lldiv 09F6  
                              _T0CON 000FD5                      __end_of___llmod 0AEE  
                              _LATC0 007C58                                _LATC2 007C5A  
                              _LATD2 007C62                                _LATC4 007C5C  
                              _LATC5 007C5D                                _T5CON 000F4E  
                     __CFG_DEBUG$OFF 000000                                i2l260 0CBC  
                              i2l256 0CB0                                i2l280 004C  
                              i2l445 0A02                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _TMR5H 000F50  
                              _TMR5L 000F4F                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                ___lmul@multiplicand 0015                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers 3F15                      __end_of_isdigit 0D72  
                 __CFG_MCLRE$EXTMCLR 000000                                _putch 0E3A  
                     ?_EUSART1_Write 0001                                tablat 000FF5  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                     __CFG_PBADEN$ON 000000                      _TMR5_Initialize 0D28  
                  ??_I2C2_Initialize 0011                      __initialization 0C44  
         __end_of_EUSART1_Initialize 0DDE                         __end_of_main 0548  
               __size_of_ws2812_send 0060          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 0031                        __activetblptr 000002  
            __end_of_TMR0_StartTimer 0E70                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   ___llmod@dividend 001E                               _ADRESH 000FC4  
                             _ADRESL 000FC3                 _OSCILLATOR_FastClock 0E2C  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                      main@meas_pi3v 0073                        main@meas_pi5v 0071  
                             _T5GCON 000F4D                               _RC1STA 000FAB  
                             i2l1202 0A4E                               i2l1210 0A64  
                             i2l1206 0A5C                               i2l1330 0CC8  
                             i2l1180 0A0A                               i2l1324 0CA8  
                             i2l1190 0A28                               i2l1194 0A34  
                             i2l1186 0A12                               i2l1178 09FA  
                             i2l1188 0A22                               i2l1198 0A40  
                     __CFG_WDTEN$OFF 000000                               _RCREG1 000FAE  
                             _OSCCON 000FD3     __size_of_TMR0_HasOverflowOccured 000E  
                             _SPBRG1 000FAF                               _TX1STA 000FAC  
                             _TXREG1 000FAD                       ws2812_send@led 0011  
                     __CFG_XINST$OFF 000000                               ___lmul 0B4E  
                             ___wmul 0D00                       __CFG_STVREN$ON 000000  
                          ??___lldiv 0019                            ??___llmod 0026  
                   ?_TMR0_Initialize 0001                            ?_I2C2_ISR 0001  
                             clear_0 0C4A    I2C2_StatusCallback@slaveWriteType 0045  
                             _printf 0548                      _TMR5_StartTimer 0E5C  
           ?_TMR5_HasOverflowOccured 0001                         __pdataCOMRAM 0049  
                          ??_isdigit 0011                      _request_pi_stop 0E44  
                       __mediumconst 3EEC                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0015                      ??_EUSART1_Write 0011  
              ?_OSCILLATOR_FastClock 0001        __size_of_INTERRUPT_Initialize 0006  
            __end_of_TMR5_Initialize 0D50                    _SYSTEM_Initialize 0D72  
                         __accesstop 0060              __end_of__initialization 0C82  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                     __pcstackCOMRAM 0001                  _timer0ReloadVal8bit 0048  
                       __pidataBANK0 0E68                  ??_SYSTEM_Initialize 0011  
                  _update_status_reg 0BA8                        __end_of_putch 0E44  
                         ??_I2C2_ISR 0002                   ?_update_status_reg 0001  
                _I2C2_slaveWriteData 0049                  ??_update_status_reg 0011  
                   ?_TMR0_StartTimer 0001            __end_of_SYSTEM_Initialize 0D94  
                      ?_pi_supply_on 0001                              ??_putch 0012  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 0048  
                 __CFG_CCP2MX$PORTC1 000000            __end_of_update_status_reg 0BFA  
                            ?___lmul 0011                              ?___wmul 0011  
            __end_of_TMR5_StartTimer 0E62                   __CFG_CCP3MX$PORTB5 000000  
    __end_of_TMR5_HasOverflowOccured 0E10              __end_of_request_pi_stop 0E4A  
                     ___lmul@product 0019                              ?_printf 0027  
            __size_of_ADC_Initialize 0016                              _OSCCON2 000FD2  
             ??_OSCILLATOR_FastClock 0011                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                            _SSP2ADD 000F6E                       ??_pi_supply_on 0011  
                            _SSP2BUF 000F6F                              _SSP2MSK 000F6A  
       __size_of_I2C2_StatusCallback 0088                      _I2C2_Initialize 0D94  
            _TMR0_HasOverflowOccured 0E10                     ?_TMR5_Initialize 0001  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                      __size_of___lmul 005A  
                            ___lldiv 096A                      __size_of___wmul 0028  
                            ___llmod 0A7E                              __pcinit 0C44  
                            __ramtop 0300              __size_of_request_pi_run 0006  
                            __ptext0 008A                              __ptext1 0AEE  
                            __ptext2 0BA8                              __ptext3 0E44  
                            __ptext4 0E4A                              __ptext5 0548  
                            __ptext6 0E3A                              __ptext7 0DF4  
                            __ptext8 0D50                              __ptext9 0D00  
                    __size_of_printf 0422                            _T0CONbits 000FD5  
                  __end_of_hexpowers 3F35                              _dpowers 3EED  
              _OSCILLATOR_Initialize 0E1E                              _isdigit 0D50  
                 _EUSART1_Initialize 0DC8             ??_PIN_MANAGER_Initialize 0011  
                          _T5CONbits 000F4E                           _reg_status 0047  
         __size_of_SYSTEM_Initialize 0022                 end_of_initialization 0C82  
                ?_EUSART1_Initialize 0001               __size_of_pi_supply_off 0006  
                      __Lmediumconst 3EEC                      ___lldiv@divisor 0015  
                    ___lldiv@counter 001D                        ??_ws2812_send 0015  
         __size_of_update_status_reg 0052                              printf@c 006C  
                            printf@f 0027                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                     ?_TMR5_StartTimer 0001  
               ??_EUSART1_Initialize 0011                     ?_request_pi_stop 0001  
                         _prev_color 0076                            _PORTCbits 000F82  
                          _PORTDbits 000F83                    __size_of_I2C2_ISR 0040  
            __end_of_I2C2_Initialize 0DB2            ??_TMR0_HasOverflowOccured 0011  
                EUSART1_Write@txData 0011     __size_of_TMR5_HasOverflowOccured 000E  
                        printf@width 006A                 __end_of_pi_supply_on 0E56  
       __end_of_INTERRUPT_Initialize 0E68                       __end_of___lmul 0BA8  
                     __end_of___wmul 0D28                        __pidataCOMRAM 0E70  
                __end_of_ws2812_send 0B4E                       _ADC_Initialize 0DDE  
                      _pi_supply_off 0E56               ?_OSCILLATOR_Initialize 0001  
                     __end_of_printf 096A     I2C2_StatusCallback@i2c_bus_state 0001  
                start_initialization 0C44             __size_of_TMR0_Initialize 0016  
    __size_of_PIN_MANAGER_Initialize 004A                          putch@txData 0012  
              __end_of_EUSART1_Write 0E02                      ___llmod@divisor 0022  
                    ___llmod@counter 0026                             ??___lmul 0019  
                           ??___wmul 0015               __end_of_ADC_Initialize 0DF4  
                        __pdataBANK0 0076                  _I2C2_StatusCallback 09F6  
                     ?_pi_supply_off 0001                       _request_pi_run 0E4A  
                           ??_printf 002D                          __pbssCOMRAM 0032  
                   ?_I2C2_Initialize 0001                        __pcstackBANK0 0060  
                       _isdigit$2180 0012                 ?_I2C2_StatusCallback 0001  
                          __pnvBANK0 007A             __size_of_TMR0_StartTimer 0004  
             _PIN_MANAGER_Initialize 0BFA                          _ws2812_send 0AEE  
                          __pintcode 0008                        __pmediumconst 3EEC  
             __end_of_request_pi_run 0E50                             ?___lldiv 0011  
                           ?___llmod 001E                      ?_ADC_Initialize 0001  
                    main@led_counter 0075                             _I2C2_ISR 0C8C  
       ??_INTERRUPT_InterruptManager 0003                            _led_color 003A  
                           _BAUD1CON 000FB8                             ?_isdigit 0001  
                          _meas_band 003E                            _meas_tune 0040  
                          _hexpowers 3F15                ??_I2C2_StatusCallback 0001  
      __size_of_OSCILLATOR_FastClock 000E                       __size_of_putch 000A  
               _INTERRUPT_Initialize 0E62              _TMR5_HasOverflowOccured 0E02  
                  ??_TMR0_Initialize 0011                       ___wmul@product 0015  
                           _IPR3bits 000FA5                             _PIE3bits 000FA3  
              __size_of_pi_supply_on 0006  __size_of_INTERRUPT_InterruptManager 007E  
                           _PIR1bits 000F9E                             _PIR3bits 000FA4  
                           _PIR5bits 000F7E             __size_of_TMR5_Initialize 0028  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                    ??_pi_supply_off 0011                             _SSP2CON1 000F6C  
                           _SSP2CON2 000F6B                             _SSP2CON3 000F69  
                   I2C2_ISR@i2c_data 0002                      ?_request_pi_run 0001  
                           _SSP2STAT 000F6D                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0011                           printf@flag 0069  
                         printf@prec 0063                    ___lmul@multiplier 0011  
                        _INTCON2bits 000FF1                            copy_data0 0C64  
                       _pi_supply_on 0E50                ?_INTERRUPT_Initialize 0001  
                           __Hrparam 0000                         ws2812_send@j 0019  
                           __Lrparam 0000                    _ADC_GetConversion 0CCC  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0011                   ?_ADC_GetConversion 0011  
                  ??_TMR0_StartTimer 0011                     __size_of___lldiv 008C  
                   __size_of___llmod 0070          __size_of_EUSART1_Initialize 0016  
                ??_ADC_GetConversion 0013             __size_of_TMR5_StartTimer 0006  
                   __size_of_isdigit 0022             __size_of_request_pi_stop 0006  
          ??_TMR5_HasOverflowOccured 0011                             __ptext10 0A7E  
                           __ptext11 096A                             __ptext20 0DB2  
                           __ptext12 0E50                             __ptext21 0E6C  
                           __ptext13 0E56                             __ptext22 0BFA  
                           __ptext14 0B4E                             __ptext31 0C8C  
                           __ptext23 0E1E                             __ptext15 0E02  
                           __ptext32 09F6                             __ptext24 0E62  
                           __ptext16 0E10                             __ptext25 0D94  
                           __ptext17 0D72                             __ptext26 0DC8  
                           __ptext18 0D28                             __ptext27 0DDE  
                           __ptext19 0E5C                             __ptext28 0E2C  
                           __ptext29 0CCC                         _SSP2CON1bits 000F6C  
                       _SSP2CON2bits 000F6B                             _meas_vol 0042  
                      __size_of_main 04BE                           _T5GCONbits 000F4D  
                           _pi_power 0032            __end_of_ADC_GetConversion 0D00  
                        _reg_control 0046                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 0086           _INTERRUPT_InterruptManager 0008  
                          printf@idx 0060                             main@pi3v 006D  
                           main@pi5v 006F                            printf@val 0065  
                       _SSP2STATbits 000F6D                    ??_TMR5_Initialize 0011  
           ?_TMR0_HasOverflowOccured 0001                           _INTCONbits 000FF2  
      I2C2_StatusCallback@RegAddress 0044                             isdigit@c 0013  
             ??_INTERRUPT_Initialize 0011                             intlevel2 0000  
                   ___lldiv@dividend 0011              ?_PIN_MANAGER_Initialize 0001  
                   ??_ADC_Initialize 0011                         ?_ws2812_send 0011  
                           printf@ap 0061               __size_of_EUSART1_Write 000E  
                   ___lldiv@quotient 0019                      _TMR0_Initialize 0DB2  
                  __CFG_T3CMX$PORTB5 000000                    ??_TMR5_StartTimer 0011  
     __end_of_PIN_MANAGER_Initialize 0C44             __size_of_I2C2_Initialize 001E  
                  ??_request_pi_stop 0011                    __CFG_FOSC$INTIO67 000000  
                   ??_request_pi_run 0011           __size_of_ADC_GetConversion 0034  
